
Smart_Home_D66.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ab2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005f6  00800060  00001ab2  00001b46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  00800656  00800656  0000213c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000216c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d0  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005bb9  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d4  00000000  00000000  00008431  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fc4  00000000  00000000  00009905  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ecc  00000000  00000000  0000c8cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001730  00000000  00000000  0000d798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002376  00000000  00000000  0000eec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000608  00000000  00000000  0001123e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_7>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_13>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	0b 07       	cpc	r16, r27
      56:	13 07       	cpc	r17, r19
      58:	4b 07       	cpc	r20, r27
      5a:	53 07       	cpc	r21, r19
      5c:	8b 07       	cpc	r24, r27
      5e:	ce 07       	cpc	r28, r30
      60:	da 07       	cpc	r29, r26
      62:	f5 0c       	add	r15, r5
      64:	f8 0c       	add	r15, r8
      66:	fb 0c       	add	r15, r11
      68:	fe 0c       	add	r15, r14
      6a:	01 0d       	add	r16, r1
      6c:	04 0d       	add	r16, r4
      6e:	07 0d       	add	r16, r7
      70:	0a 0d       	add	r16, r10

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	16 e0       	ldi	r17, 0x06	; 6
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e2 eb       	ldi	r30, 0xB2	; 178
      86:	fa e1       	ldi	r31, 0x1A	; 26
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a6 35       	cpi	r26, 0x56	; 86
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	26 e0       	ldi	r18, 0x06	; 6
      96:	a6 e5       	ldi	r26, 0x56	; 86
      98:	b6 e0       	ldi	r27, 0x06	; 6
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a1 3b       	cpi	r26, 0xB1	; 177
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <main>
      a8:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <AC_Initialization>:
uint8 AC_State_Auto = 0;
uint8 AC_State = 0;

void AC_Initialization()
{
	DIO_Set_Pin_Direction(AC_Port,AC_Pin,Out);
      b0:	41 e0       	ldi	r20, 0x01	; 1
      b2:	62 e0       	ldi	r22, 0x02	; 2
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
      ba:	08 95       	ret

000000bc <AC_On>:
}
void AC_On(){
	DIO_Set_Pin_Output(AC_Port,AC_Pin,High);
      bc:	41 e0       	ldi	r20, 0x01	; 1
      be:	62 e0       	ldi	r22, 0x02	; 2
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
      c6:	08 95       	ret

000000c8 <AC_Off>:
}
void AC_Off(){
	DIO_Set_Pin_Output(AC_Port,AC_Pin,Low);
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	62 e0       	ldi	r22, 0x02	; 2
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
      d2:	08 95       	ret

000000d4 <AC_Feedback>:

void AC_Feedback(uint8 New_Feed){
	//1 Means Turn Automatic AC
	//2 Means Turn Off AC Manual
	//3 Means Turn On AC Manual
	switch(New_Feed){
      d4:	82 30       	cpi	r24, 0x02	; 2
      d6:	c9 f0       	breq	.+50     	; 0x10a <AC_Feedback+0x36>
      d8:	83 30       	cpi	r24, 0x03	; 3
      da:	71 f1       	breq	.+92     	; 0x138 <AC_Feedback+0x64>
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	09 f0       	breq	.+2      	; 0xe2 <AC_Feedback+0xe>
      e0:	43 c0       	rjmp	.+134    	; 0x168 <AC_Feedback+0x94>
		case 1:
			switch(AC_State_Auto){
      e2:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <AC_State_Auto>
      e6:	88 23       	and	r24, r24
      e8:	19 f0       	breq	.+6      	; 0xf0 <AC_Feedback+0x1c>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	49 f0       	breq	.+18     	; 0x100 <AC_Feedback+0x2c>
      ee:	08 95       	ret
				case 0 :
				AC_State_Auto = 1;
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <AC_State_Auto>
				UART_Send_String_Polling_8("AC Auto Success!");
      f6:	82 e7       	ldi	r24, 0x72	; 114
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
				break;
      fe:	08 95       	ret
				case 1:
				UART_Send_String_Polling_8("AC is Already Auto!");
     100:	83 e8       	ldi	r24, 0x83	; 131
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
				break;
     108:	08 95       	ret
			}
			break;
		case 2:
			switch(AC_State){
     10a:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <__data_end>
     10e:	88 23       	and	r24, r24
     110:	19 f0       	breq	.+6      	; 0x118 <AC_Feedback+0x44>
     112:	81 30       	cpi	r24, 0x01	; 1
     114:	31 f0       	breq	.+12     	; 0x122 <AC_Feedback+0x4e>
     116:	08 95       	ret
				case 0 :
					UART_Send_String_Polling_8("AC is Already Closed!");
     118:	87 e9       	ldi	r24, 0x97	; 151
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					break;
     120:	08 95       	ret
				case 1:
					AC_Off();
     122:	0e 94 64 00 	call	0xc8	; 0xc8 <AC_Off>
					AC_State = 0;
     126:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <__data_end>
					AC_State_Auto = 0;
     12a:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <AC_State_Auto>
					UART_Send_String_Polling_8("AC Turned Off Success!");
     12e:	8d ea       	ldi	r24, 0xAD	; 173
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					break;
     136:	08 95       	ret
			}
			break;
		case 3:
			switch(AC_State){
     138:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <__data_end>
     13c:	88 23       	and	r24, r24
     13e:	19 f0       	breq	.+6      	; 0x146 <AC_Feedback+0x72>
     140:	81 30       	cpi	r24, 0x01	; 1
     142:	69 f0       	breq	.+26     	; 0x15e <AC_Feedback+0x8a>
     144:	08 95       	ret
				case 0 :
					AC_On();
     146:	0e 94 5e 00 	call	0xbc	; 0xbc <AC_On>
					AC_State = 1;
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <__data_end>
					AC_State_Auto = 0;
     150:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <AC_State_Auto>
					UART_Send_String_Polling_8("AC Turned On Success!");
     154:	84 ec       	ldi	r24, 0xC4	; 196
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					break;
     15c:	08 95       	ret
				case 1:
					UART_Send_String_Polling_8("AC Already Turned ON!");
     15e:	8a ed       	ldi	r24, 0xDA	; 218
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					break;
     166:	08 95       	ret
			}
			break;
		default:UART_Show_Invalid();break;
     168:	0e 94 27 0c 	call	0x184e	; 0x184e <UART_Show_Invalid>
     16c:	08 95       	ret

0000016e <BUZZER_On>:
	DIO_Set_Pin_Output(PORTAx,Pin3,High);
}

void BUZZER_Off()
{
	DIO_Set_Pin_Output(PORTAx,Pin3,Low);
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	63 e0       	ldi	r22, 0x03	; 3
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     178:	08 95       	ret

0000017a <BUZZER_ALARM_TILL_RESET>:
}

void BUZZER_ALARM_TILL_RESET()
{
	GIE_Disable();
     17a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GIE_Disable>
	BUZZER_On();
     17e:	0e 94 b7 00 	call	0x16e	; 0x16e <BUZZER_On>
     182:	ff cf       	rjmp	.-2      	; 0x182 <BUZZER_ALARM_TILL_RESET+0x8>

00000184 <__vector_11>:
	if(G_Dimmer_Value >= 50){
		G_Dimmer_Value--;
	}
}
void Dimmer_On(){
	G_Dimmer_Value = 50;	
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	0f 92       	push	r0
     18c:	11 24       	eor	r1, r1
     18e:	2f 93       	push	r18
     190:	3f 93       	push	r19
     192:	4f 93       	push	r20
     194:	5f 93       	push	r21
     196:	6f 93       	push	r22
     198:	7f 93       	push	r23
     19a:	8f 93       	push	r24
     19c:	9f 93       	push	r25
     19e:	af 93       	push	r26
     1a0:	bf 93       	push	r27
     1a2:	ef 93       	push	r30
     1a4:	ff 93       	push	r31
     1a6:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <Dimmercounter.1761>
     1aa:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <G_Dimmer_Value>
     1ae:	98 17       	cp	r25, r24
     1b0:	30 f4       	brcc	.+12     	; 0x1be <__vector_11+0x3a>
     1b2:	41 e0       	ldi	r20, 0x01	; 1
     1b4:	63 e0       	ldi	r22, 0x03	; 3
     1b6:	83 e0       	ldi	r24, 0x03	; 3
     1b8:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     1bc:	07 c0       	rjmp	.+14     	; 0x1cc <__vector_11+0x48>
     1be:	98 17       	cp	r25, r24
     1c0:	28 f0       	brcs	.+10     	; 0x1cc <__vector_11+0x48>
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	63 e0       	ldi	r22, 0x03	; 3
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     1cc:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <Dimmercounter.1761>
     1d0:	8f 5f       	subi	r24, 0xFF	; 255
     1d2:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <Dimmercounter.1761>
     1d6:	8e 3f       	cpi	r24, 0xFE	; 254
     1d8:	10 f0       	brcs	.+4      	; 0x1de <__vector_11+0x5a>
     1da:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <Dimmercounter.1761>
     1de:	ff 91       	pop	r31
     1e0:	ef 91       	pop	r30
     1e2:	bf 91       	pop	r27
     1e4:	af 91       	pop	r26
     1e6:	9f 91       	pop	r25
     1e8:	8f 91       	pop	r24
     1ea:	7f 91       	pop	r23
     1ec:	6f 91       	pop	r22
     1ee:	5f 91       	pop	r21
     1f0:	4f 91       	pop	r20
     1f2:	3f 91       	pop	r19
     1f4:	2f 91       	pop	r18
     1f6:	0f 90       	pop	r0
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	0f 90       	pop	r0
     1fc:	1f 90       	pop	r1
     1fe:	18 95       	reti

00000200 <Dimmer_Init>:
     200:	41 e0       	ldi	r20, 0x01	; 1
     202:	63 e0       	ldi	r22, 0x03	; 3
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
     20a:	0e 94 6f 0b 	call	0x16de	; 0x16de <Timer0_Init>
     20e:	0e 94 85 0b 	call	0x170a	; 0x170a <Timer0_Enable_Overflow_Interrupt>
     212:	08 95       	ret

00000214 <Dimmer_Feedback>:
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	e9 f0       	breq	.+58     	; 0x252 <Dimmer_Feedback+0x3e>
     218:	18 f4       	brcc	.+6      	; 0x220 <Dimmer_Feedback+0xc>
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	31 f0       	breq	.+12     	; 0x22a <Dimmer_Feedback+0x16>
     21e:	08 95       	ret
     220:	83 30       	cpi	r24, 0x03	; 3
     222:	51 f1       	breq	.+84     	; 0x278 <Dimmer_Feedback+0x64>
     224:	84 30       	cpi	r24, 0x04	; 4
     226:	d1 f1       	breq	.+116    	; 0x29c <Dimmer_Feedback+0x88>
     228:	08 95       	ret
     22a:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <G_Dimmer_Value>
     22e:	8a 3f       	cpi	r24, 0xFA	; 250
     230:	29 f4       	brne	.+10     	; 0x23c <Dimmer_Feedback+0x28>
     232:	80 ef       	ldi	r24, 0xF0	; 240
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     23a:	08 95       	ret
     23c:	8a 3f       	cpi	r24, 0xFA	; 250
     23e:	08 f0       	brcs	.+2      	; 0x242 <Dimmer_Feedback+0x2e>
     240:	3f c0       	rjmp	.+126    	; 0x2c0 <Dimmer_Feedback+0xac>
     242:	8e 5c       	subi	r24, 0xCE	; 206
     244:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <G_Dimmer_Value>
     248:	8d ef       	ldi	r24, 0xFD	; 253
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     250:	08 95       	ret
     252:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <G_Dimmer_Value>
     256:	81 11       	cpse	r24, r1
     258:	05 c0       	rjmp	.+10     	; 0x264 <Dimmer_Feedback+0x50>
     25a:	8f e0       	ldi	r24, 0x0F	; 15
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     262:	08 95       	ret
     264:	88 23       	and	r24, r24
     266:	61 f1       	breq	.+88     	; 0x2c0 <Dimmer_Feedback+0xac>
     268:	82 53       	subi	r24, 0x32	; 50
     26a:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <G_Dimmer_Value>
     26e:	8c e1       	ldi	r24, 0x1C	; 28
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     276:	08 95       	ret
     278:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <G_Dimmer_Value>
     27c:	81 11       	cpse	r24, r1
     27e:	05 c0       	rjmp	.+10     	; 0x28a <Dimmer_Feedback+0x76>
     280:	8e e2       	ldi	r24, 0x2E	; 46
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     288:	08 95       	ret
     28a:	88 23       	and	r24, r24
     28c:	c9 f0       	breq	.+50     	; 0x2c0 <Dimmer_Feedback+0xac>
     28e:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <G_Dimmer_Value>
     292:	8b e3       	ldi	r24, 0x3B	; 59
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     29a:	08 95       	ret
     29c:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <G_Dimmer_Value>
     2a0:	81 11       	cpse	r24, r1
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <Dimmer_Feedback+0xa0>
     2a4:	8e 5c       	subi	r24, 0xCE	; 206
     2a6:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <G_Dimmer_Value>
     2aa:	8d e4       	ldi	r24, 0x4D	; 77
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     2b2:	08 95       	ret
     2b4:	88 23       	and	r24, r24
     2b6:	21 f0       	breq	.+8      	; 0x2c0 <Dimmer_Feedback+0xac>
     2b8:	8e e5       	ldi	r24, 0x5E	; 94
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     2c0:	08 95       	ret

000002c2 <Dimmer_Off>:
}
void Dimmer_Off(){
	G_Dimmer_Value = 0;
     2c2:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <G_Dimmer_Value>
     2c6:	08 95       	ret

000002c8 <Door_Feedback>:
*/

extern uint8 door_state;// 0 is closed, 1 is open

void Door_Feedback(uint8 New_Feed){
	switch(New_Feed){
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	a9 f0       	breq	.+42     	; 0x2f6 <Door_Feedback+0x2e>
     2cc:	82 30       	cpi	r24, 0x02	; 2
     2ce:	31 f5       	brne	.+76     	; 0x31c <Door_Feedback+0x54>
		case 2: 
			switch(door_state)
     2d0:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <door_state>
     2d4:	88 23       	and	r24, r24
     2d6:	19 f0       	breq	.+6      	; 0x2de <Door_Feedback+0x16>
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	31 f0       	breq	.+12     	; 0x2e8 <Door_Feedback+0x20>
     2dc:	08 95       	ret
			{
				case 0 :
					UART_Send_String_Polling_8("Door is Already Closed!");
     2de:	8a e6       	ldi	r24, 0x6A	; 106
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					break;
     2e6:	08 95       	ret
				case 1:
					door_state = 0;
     2e8:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <door_state>
					UART_Send_String_Polling_8("Door Closed Success!");
     2ec:	82 e8       	ldi	r24, 0x82	; 130
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					break;
     2f4:	08 95       	ret
			}
			break;
		case 1:
			switch(door_state)
     2f6:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <door_state>
     2fa:	88 23       	and	r24, r24
     2fc:	19 f0       	breq	.+6      	; 0x304 <Door_Feedback+0x3c>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	49 f0       	breq	.+18     	; 0x314 <Door_Feedback+0x4c>
     302:	08 95       	ret
			{
				case 0 :
					door_state = 1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <door_state>
					UART_Send_String_Polling_8("Door Opened Success!");
     30a:	87 e9       	ldi	r24, 0x97	; 151
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					break;
     312:	08 95       	ret
				case 1:
					
					UART_Send_String_Polling_8("Door is Already Opened!");
     314:	8c ea       	ldi	r24, 0xAC	; 172
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
     31c:	08 95       	ret

0000031e <__vector_7>:
			break;	
	}
}

ISR(TIMER1_COMPA_vect) // Timer1 compare match interrupt
{
     31e:	1f 92       	push	r1
     320:	0f 92       	push	r0
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	0f 92       	push	r0
     326:	11 24       	eor	r1, r1
     328:	2f 93       	push	r18
     32a:	3f 93       	push	r19
     32c:	4f 93       	push	r20
     32e:	5f 93       	push	r21
     330:	6f 93       	push	r22
     332:	7f 93       	push	r23
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	af 93       	push	r26
     33a:	bf 93       	push	r27
     33c:	ef 93       	push	r30
     33e:	ff 93       	push	r31
	static uint8 counter = 0;
	// Start if counter = 0 by making Servo Pin high
	if(counter==0){DIO_Set_Pin_Output(PORTDx,Pin7,High);}
     340:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <counter.1900>
     344:	81 11       	cpse	r24, r1
     346:	06 c0       	rjmp	.+12     	; 0x354 <__vector_7+0x36>
     348:	41 e0       	ldi	r20, 0x01	; 1
     34a:	67 e0       	ldi	r22, 0x07	; 7
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     352:	17 c0       	rjmp	.+46     	; 0x382 <__vector_7+0x64>
	else if(counter == 1){
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	51 f4       	brne	.+20     	; 0x36c <__vector_7+0x4e>
		if(door_state == 0){
     358:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <door_state>
     35c:	81 11       	cpse	r24, r1
     35e:	11 c0       	rjmp	.+34     	; 0x382 <__vector_7+0x64>
			DIO_Set_Pin_Output(PORTDx,Pin7,Low);
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	67 e0       	ldi	r22, 0x07	; 7
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     36a:	0b c0       	rjmp	.+22     	; 0x382 <__vector_7+0x64>
		}
	}
	else if(counter == 5){
     36c:	85 30       	cpi	r24, 0x05	; 5
     36e:	49 f4       	brne	.+18     	; 0x382 <__vector_7+0x64>
		if(door_state == 1){
     370:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <door_state>
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	29 f4       	brne	.+10     	; 0x382 <__vector_7+0x64>
			DIO_Set_Pin_Output(PORTDx,Pin7,Low);
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	67 e0       	ldi	r22, 0x07	; 7
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
		}
	}
	if(counter<40){counter++;}
     382:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <counter.1900>
     386:	88 32       	cpi	r24, 0x28	; 40
     388:	20 f4       	brcc	.+8      	; 0x392 <__vector_7+0x74>
     38a:	8f 5f       	subi	r24, 0xFF	; 255
     38c:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <counter.1900>
     390:	02 c0       	rjmp	.+4      	; 0x396 <__vector_7+0x78>
	else {counter = 0;}
     392:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <counter.1900>
}
     396:	ff 91       	pop	r31
     398:	ef 91       	pop	r30
     39a:	bf 91       	pop	r27
     39c:	af 91       	pop	r26
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	7f 91       	pop	r23
     3a4:	6f 91       	pop	r22
     3a6:	5f 91       	pop	r21
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <Servo_Init>:


void Servo_Init(){
	DIO_Set_Pin_Direction(PORTDx,Pin7,Out);
     3b8:	41 e0       	ldi	r20, 0x01	; 1
     3ba:	67 e0       	ldi	r22, 0x07	; 7
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Output(PORTDx,Pin7,Low);
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	67 e0       	ldi	r22, 0x07	; 7
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	// Set the Prescaler to 8
	// Set WGM12 to enable CTC mode
	TCCR1B_Reg |= (1 << WGM12) | (1 << CS11);
     3cc:	8e b5       	in	r24, 0x2e	; 46
     3ce:	8a 60       	ori	r24, 0x0A	; 10
     3d0:	8e bd       	out	0x2e, r24	; 46
	// Set OCR1A to generate an interrupt every 0.5 ms
	// Set TOP value for 0.5ms period
	// Set OCR1A to 1000
	OCR1AH_Reg = 0x03; // High byte 00000011
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	8b bd       	out	0x2b, r24	; 43
	OCR1AL_Reg = 0xE8; // Low byte 11101000    0000001111101000
     3d6:	88 ee       	ldi	r24, 0xE8	; 232
     3d8:	8a bd       	out	0x2a, r24	; 42
	// Enable Timer/Counter1 Output Compare Match A interrupt
	TIMSK_Reg |= (1 << OCIE1A);
     3da:	89 b7       	in	r24, 0x39	; 57
     3dc:	80 61       	ori	r24, 0x10	; 16
     3de:	89 bf       	out	0x39, r24	; 57
	GIE_Enable(); // Enable global interrupts
     3e0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GIE_Enable>
     3e4:	08 95       	ret

000003e6 <EEPROM_Init>:
void EEPROM_Edit_Data(uint8 UserID,sint8 * Data, uint8 DataType){
	uint16 Marker = 0;
	if(UserID == 99) Marker = 10;
	else Marker = (UserID*20) + 10;
	// EDIT NOT COMPLETE
	EEPROM_Write_String((Marker+10),Data);
     3e6:	0e 94 89 0b 	call	0x1712	; 0x1712 <TWI_Init>
     3ea:	08 95       	ret

000003ec <EEPROM_Read_Byte>:
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	8c 01       	movw	r16, r24
     3f6:	17 70       	andi	r17, 0x07	; 7
     3f8:	12 fb       	bst	r17, 2
     3fa:	cc 27       	eor	r28, r28
     3fc:	c0 f9       	bld	r28, 0
     3fe:	cc 0f       	add	r28, r28
     400:	cc 0f       	add	r28, r28
     402:	cc 0f       	add	r28, r28
     404:	11 fb       	bst	r17, 1
     406:	88 27       	eor	r24, r24
     408:	80 f9       	bld	r24, 0
     40a:	88 0f       	add	r24, r24
     40c:	88 0f       	add	r24, r24
     40e:	c8 2b       	or	r28, r24
     410:	81 2f       	mov	r24, r17
     412:	81 70       	andi	r24, 0x01	; 1
     414:	88 0f       	add	r24, r24
     416:	c8 2b       	or	r28, r24
     418:	c0 6a       	ori	r28, 0xA0	; 160
     41a:	d1 e0       	ldi	r29, 0x01	; 1
     41c:	dc 0f       	add	r29, r28
     41e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_MSTR_Send_Start>
     422:	88 e0       	ldi	r24, 0x08	; 8
     424:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	31 f5       	brne	.+76     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     42c:	8c 2f       	mov	r24, r28
     42e:	0e 94 b5 0b 	call	0x176a	; 0x176a <TWI_Send_Data>
     432:	88 e1       	ldi	r24, 0x18	; 24
     434:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	01 f5       	brne	.+64     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     43c:	80 2f       	mov	r24, r16
     43e:	0e 94 b5 0b 	call	0x176a	; 0x176a <TWI_Send_Data>
     442:	88 e2       	ldi	r24, 0x28	; 40
     444:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	d1 f4       	brne	.+52     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     44c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_MSTR_Send_Start>
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	a9 f4       	brne	.+42     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     45a:	8d 2f       	mov	r24, r29
     45c:	0e 94 b5 0b 	call	0x176a	; 0x176a <TWI_Send_Data>
     460:	80 e4       	ldi	r24, 0x40	; 64
     462:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     466:	81 30       	cpi	r24, 0x01	; 1
     468:	79 f4       	brne	.+30     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <TWI_Receive_Data>
     470:	c8 2f       	mov	r28, r24
     472:	0e 94 a0 0b 	call	0x1740	; 0x1740 <TWI_Send_Stop>
     476:	09 c0       	rjmp	.+18     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	07 c0       	rjmp	.+14     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     47c:	c0 e0       	ldi	r28, 0x00	; 0
     47e:	05 c0       	rjmp	.+10     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     480:	c0 e0       	ldi	r28, 0x00	; 0
     482:	03 c0       	rjmp	.+6      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     484:	c0 e0       	ldi	r28, 0x00	; 0
     486:	01 c0       	rjmp	.+2      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     488:	c0 e0       	ldi	r28, 0x00	; 0
     48a:	8f e5       	ldi	r24, 0x5F	; 95
     48c:	9d e6       	ldi	r25, 0x6D	; 109
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     492:	00 c0       	rjmp	.+0      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     494:	00 00       	nop
     496:	8c 2f       	mov	r24, r28
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <EEPROM_Write_Byte>:
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	d8 2f       	mov	r29, r24
     4aa:	16 2f       	mov	r17, r22
     4ac:	92 fb       	bst	r25, 2
     4ae:	88 27       	eor	r24, r24
     4b0:	80 f9       	bld	r24, 0
     4b2:	28 2f       	mov	r18, r24
     4b4:	22 0f       	add	r18, r18
     4b6:	22 0f       	add	r18, r18
     4b8:	22 0f       	add	r18, r18
     4ba:	91 fb       	bst	r25, 1
     4bc:	88 27       	eor	r24, r24
     4be:	80 f9       	bld	r24, 0
     4c0:	88 0f       	add	r24, r24
     4c2:	88 0f       	add	r24, r24
     4c4:	82 2b       	or	r24, r18
     4c6:	91 70       	andi	r25, 0x01	; 1
     4c8:	99 0f       	add	r25, r25
     4ca:	98 2b       	or	r25, r24
     4cc:	c9 2f       	mov	r28, r25
     4ce:	c0 6a       	ori	r28, 0xA0	; 160
     4d0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_MSTR_Send_Start>
     4d4:	88 e0       	ldi	r24, 0x08	; 8
     4d6:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	01 f5       	brne	.+64     	; 0x51e <EEPROM_Write_Byte+0x7c>
     4de:	8c 2f       	mov	r24, r28
     4e0:	0e 94 b5 0b 	call	0x176a	; 0x176a <TWI_Send_Data>
     4e4:	88 e1       	ldi	r24, 0x18	; 24
     4e6:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	c1 f4       	brne	.+48     	; 0x51e <EEPROM_Write_Byte+0x7c>
     4ee:	8d 2f       	mov	r24, r29
     4f0:	0e 94 b5 0b 	call	0x176a	; 0x176a <TWI_Send_Data>
     4f4:	88 e2       	ldi	r24, 0x28	; 40
     4f6:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     4fa:	88 23       	and	r24, r24
     4fc:	81 f0       	breq	.+32     	; 0x51e <EEPROM_Write_Byte+0x7c>
     4fe:	81 2f       	mov	r24, r17
     500:	0e 94 b5 0b 	call	0x176a	; 0x176a <TWI_Send_Data>
     504:	88 e2       	ldi	r24, 0x28	; 40
     506:	0e 94 95 0b 	call	0x172a	; 0x172a <TWI_Check_Status>
     50a:	88 23       	and	r24, r24
     50c:	41 f0       	breq	.+16     	; 0x51e <EEPROM_Write_Byte+0x7c>
     50e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <TWI_Send_Stop>
     512:	8f e5       	ldi	r24, 0x5F	; 95
     514:	9d e6       	ldi	r25, 0x6D	; 109
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <EEPROM_Write_Byte+0x74>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <EEPROM_Write_Byte+0x7a>
     51c:	00 00       	nop
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	08 95       	ret

00000526 <EEPROM_Write_String>:
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	8c 01       	movw	r16, r24
     532:	7b 01       	movw	r14, r22
     534:	c0 e0       	ldi	r28, 0x00	; 0
     536:	05 c0       	rjmp	.+10     	; 0x542 <EEPROM_Write_String+0x1c>
     538:	80 0f       	add	r24, r16
     53a:	91 1f       	adc	r25, r17
     53c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <EEPROM_Write_Byte>
     540:	cf 5f       	subi	r28, 0xFF	; 255
     542:	8c 2f       	mov	r24, r28
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	f7 01       	movw	r30, r14
     548:	e8 0f       	add	r30, r24
     54a:	f9 1f       	adc	r31, r25
     54c:	60 81       	ld	r22, Z
     54e:	61 11       	cpse	r22, r1
     550:	f3 cf       	rjmp	.-26     	; 0x538 <EEPROM_Write_String+0x12>
     552:	80 0f       	add	r24, r16
     554:	91 1f       	adc	r25, r17
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	0e 94 51 02 	call	0x4a2	; 0x4a2 <EEPROM_Write_Byte>
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	08 95       	ret

00000568 <EEPROM_Read_String>:
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	6c 01       	movw	r12, r24
     578:	8b 01       	movw	r16, r22
     57a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <EEPROM_Read_Byte>
     57e:	f8 01       	movw	r30, r16
     580:	80 83       	st	Z, r24
     582:	c0 e0       	ldi	r28, 0x00	; 0
     584:	0c c0       	rjmp	.+24     	; 0x59e <EEPROM_Read_String+0x36>
     586:	cf 5f       	subi	r28, 0xFF	; 255
     588:	8c 2f       	mov	r24, r28
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	78 01       	movw	r14, r16
     58e:	e8 0e       	add	r14, r24
     590:	f9 1e       	adc	r15, r25
     592:	8c 0d       	add	r24, r12
     594:	9d 1d       	adc	r25, r13
     596:	0e 94 f6 01 	call	0x3ec	; 0x3ec <EEPROM_Read_Byte>
     59a:	f7 01       	movw	r30, r14
     59c:	80 83       	st	Z, r24
     59e:	f8 01       	movw	r30, r16
     5a0:	ec 0f       	add	r30, r28
     5a2:	f1 1d       	adc	r31, r1
     5a4:	80 81       	ld	r24, Z
     5a6:	81 11       	cpse	r24, r1
     5a8:	ee cf       	rjmp	.-36     	; 0x586 <EEPROM_Read_String+0x1e>
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	cf 90       	pop	r12
     5b8:	08 95       	ret

000005ba <EEPROM_Read_8Data>:
     5ba:	83 36       	cpi	r24, 0x63	; 99
     5bc:	31 f0       	breq	.+12     	; 0x5ca <EEPROM_Read_8Data+0x10>
     5be:	24 e1       	ldi	r18, 0x14	; 20
     5c0:	82 9f       	mul	r24, r18
     5c2:	c0 01       	movw	r24, r0
     5c4:	11 24       	eor	r1, r1
     5c6:	0a 96       	adiw	r24, 0x0a	; 10
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <EEPROM_Read_8Data+0x14>
     5ca:	8a e0       	ldi	r24, 0x0A	; 10
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	41 30       	cpi	r20, 0x01	; 1
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <EEPROM_Read_8Data+0x1e>
     5d2:	42 30       	cpi	r20, 0x02	; 2
     5d4:	29 f0       	breq	.+10     	; 0x5e0 <EEPROM_Read_8Data+0x26>
     5d6:	08 95       	ret
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	0e 94 b4 02 	call	0x568	; 0x568 <EEPROM_Read_String>
     5de:	08 95       	ret
     5e0:	0a 96       	adiw	r24, 0x0a	; 10
     5e2:	0e 94 b4 02 	call	0x568	; 0x568 <EEPROM_Read_String>
     5e6:	08 95       	ret

000005e8 <EEPROM_Read_UserID_Exist>:
     5e8:	83 36       	cpi	r24, 0x63	; 99
     5ea:	31 f0       	breq	.+12     	; 0x5f8 <EEPROM_Read_UserID_Exist+0x10>
     5ec:	24 e1       	ldi	r18, 0x14	; 20
     5ee:	82 9f       	mul	r24, r18
     5f0:	c0 01       	movw	r24, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	0a 96       	adiw	r24, 0x0a	; 10
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <EEPROM_Read_UserID_Exist+0x14>
     5f8:	8a e0       	ldi	r24, 0x0A	; 10
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <EEPROM_Read_Byte>
     600:	08 95       	ret

00000602 <EEPROM_Delete_User>:
     602:	24 e1       	ldi	r18, 0x14	; 20
     604:	82 9f       	mul	r24, r18
     606:	c0 01       	movw	r24, r0
     608:	11 24       	eor	r1, r1
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	0a 96       	adiw	r24, 0x0a	; 10
     60e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <EEPROM_Write_Byte>
     612:	08 95       	ret

00000614 <EEPROM_Find_Empty_ID>:
}


uint8 EEPROM_Find_Empty_ID(){
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
	for(int i=0; i<MAX_Users_Count;i++){
     61a:	c0 e0       	ldi	r28, 0x00	; 0
     61c:	d0 e0       	ldi	r29, 0x00	; 0
     61e:	07 c0       	rjmp	.+14     	; 0x62e <EEPROM_Find_Empty_ID+0x1a>
		if(EEPROM_Read_UserID_Exist(i))
     620:	1c 2f       	mov	r17, r28
     622:	8c 2f       	mov	r24, r28
     624:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <EEPROM_Read_UserID_Exist>
     628:	88 23       	and	r24, r24
     62a:	41 f0       	breq	.+16     	; 0x63c <EEPROM_Find_Empty_ID+0x28>
	EEPROM_Write_String((Marker+10),Data);
}


uint8 EEPROM_Find_Empty_ID(){
	for(int i=0; i<MAX_Users_Count;i++){
     62c:	21 96       	adiw	r28, 0x01	; 1
     62e:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <MAX_Users_Count>
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	c8 17       	cp	r28, r24
     636:	d9 07       	cpc	r29, r25
     638:	9c f3       	brlt	.-26     	; 0x620 <EEPROM_Find_Empty_ID+0xc>
		if(EEPROM_Read_UserID_Exist(i))
			continue;
		else return i;
	}
	return 0;
     63a:	10 e0       	ldi	r17, 0x00	; 0
}
     63c:	81 2f       	mov	r24, r17
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	08 95       	ret

00000646 <EEPROM_Reg_New_User>:
void EEPROM_Reg_New_User(uint8 UserID, sint8 * Username, sint8 * Password){
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	8b 01       	movw	r16, r22
     654:	7a 01       	movw	r14, r20
uint16 Marker = (UserID*20) + 10;
     656:	94 e1       	ldi	r25, 0x14	; 20
     658:	89 9f       	mul	r24, r25
     65a:	e0 01       	movw	r28, r0
     65c:	11 24       	eor	r1, r1
// User does not exist, Create the user
	EEPROM_Write_Byte(Marker,UserID);
     65e:	68 2f       	mov	r22, r24
     660:	ce 01       	movw	r24, r28
     662:	0a 96       	adiw	r24, 0x0a	; 10
     664:	0e 94 51 02 	call	0x4a2	; 0x4a2 <EEPROM_Write_Byte>
	EEPROM_Write_String((Marker+1),Password);
     668:	b7 01       	movw	r22, r14
     66a:	ce 01       	movw	r24, r28
     66c:	0b 96       	adiw	r24, 0x0b	; 11
     66e:	0e 94 93 02 	call	0x526	; 0x526 <EEPROM_Write_String>
	EEPROM_Write_String((Marker+10),Username);
     672:	b8 01       	movw	r22, r16
     674:	ce 01       	movw	r24, r28
     676:	44 96       	adiw	r24, 0x14	; 20
     678:	0e 94 93 02 	call	0x526	; 0x526 <EEPROM_Write_String>
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	08 95       	ret

0000068a <KEYPAD_Initialization>:
#include "../../MCAL/Digital_Input_Output/DIO.h"
#include "Keypad_4x4.h"


void KEYPAD_Initialization(){
	DIO_Set_Pin_Direction(COL_PORTB,COL_Pin_0,Out);
     68a:	41 e0       	ldi	r20, 0x01	; 1
     68c:	64 e0       	ldi	r22, 0x04	; 4
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(COL_PORTB,COL_Pin_1,Out);
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	65 e0       	ldi	r22, 0x05	; 5
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(COL_PORTB,COL_Pin_2,Out);
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	66 e0       	ldi	r22, 0x06	; 6
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(COL_PORTB,COL_Pin_3,Out);
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	67 e0       	ldi	r22, 0x07	; 7
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_PORTC,ROW_Pin_0,In);
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_PORTC,ROW_Pin_1,In);
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	64 e0       	ldi	r22, 0x04	; 4
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_PORTC,ROW_Pin_2,In);
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	65 e0       	ldi	r22, 0x05	; 5
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_PORTC,ROW_Pin_3,In);
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	66 e0       	ldi	r22, 0x06	; 6
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
	/// OUTPUT HIGH
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_0,High);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	64 e0       	ldi	r22, 0x04	; 4
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_1,High);
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	65 e0       	ldi	r22, 0x05	; 5
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_2,High);
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	66 e0       	ldi	r22, 0x06	; 6
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_3,High);
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	67 e0       	ldi	r22, 0x07	; 7
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	///PULL UP RESISTORES ON
	DIO_Set_Pin_Output(ROW_PORTC,ROW_Pin_0,High);
     702:	41 e0       	ldi	r20, 0x01	; 1
     704:	63 e0       	ldi	r22, 0x03	; 3
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(ROW_PORTC,ROW_Pin_1,High);
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	64 e0       	ldi	r22, 0x04	; 4
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(ROW_PORTC,ROW_Pin_2,High);
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	65 e0       	ldi	r22, 0x05	; 5
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(ROW_PORTC,ROW_Pin_3,High);
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	66 e0       	ldi	r22, 0x06	; 6
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     72a:	08 95       	ret

0000072c <KEYPAD_Get_Pressed_Key>:
}

uint8 KEYPAD_Get_Pressed_Key(){
     72c:	cf 93       	push	r28
	uint8 key = '\0';
	//KEYPAD_Initialization();
	
	/**************************		ROW 0		************************/
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_0,Low);
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	64 e0       	ldi	r22, 0x04	; 4
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_1,High);
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	65 e0       	ldi	r22, 0x05	; 5
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_2,High);
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	66 e0       	ldi	r22, 0x06	; 6
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_3,High);
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	67 e0       	ldi	r22, 0x07	; 7
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	/*****************		Col 0		*****************/
	if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_0)))
     756:	63 e0       	ldi	r22, 0x03	; 3
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     75e:	81 11       	cpse	r24, r1
     760:	08 c0       	rjmp	.+16     	; 0x772 <KEYPAD_Get_Pressed_Key+0x46>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_0))){}
     762:	63 e0       	ldi	r22, 0x03	; 3
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     76a:	88 23       	and	r24, r24
     76c:	d1 f3       	breq	.-12     	; 0x762 <KEYPAD_Get_Pressed_Key+0x36>
		key	=	Output_R_0_C_0;
     76e:	c1 e3       	ldi	r28, 0x31	; 49
     770:	2b c0       	rjmp	.+86     	; 0x7c8 <KEYPAD_Get_Pressed_Key+0x9c>
	}
	/*****************		Col 1		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_1)) )
     772:	64 e0       	ldi	r22, 0x04	; 4
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     77a:	81 11       	cpse	r24, r1
     77c:	08 c0       	rjmp	.+16     	; 0x78e <KEYPAD_Get_Pressed_Key+0x62>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_1))){}
     77e:	64 e0       	ldi	r22, 0x04	; 4
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     786:	88 23       	and	r24, r24
     788:	d1 f3       	breq	.-12     	; 0x77e <KEYPAD_Get_Pressed_Key+0x52>
		key	=	Output_R_0_C_1;
     78a:	c4 e3       	ldi	r28, 0x34	; 52
     78c:	1d c0       	rjmp	.+58     	; 0x7c8 <KEYPAD_Get_Pressed_Key+0x9c>
	}
	/*****************		Col 2		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_2)))
     78e:	65 e0       	ldi	r22, 0x05	; 5
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     796:	81 11       	cpse	r24, r1
     798:	08 c0       	rjmp	.+16     	; 0x7aa <KEYPAD_Get_Pressed_Key+0x7e>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_2))){}
     79a:	65 e0       	ldi	r22, 0x05	; 5
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     7a2:	88 23       	and	r24, r24
     7a4:	d1 f3       	breq	.-12     	; 0x79a <KEYPAD_Get_Pressed_Key+0x6e>
		key	=	Output_R_0_C_2;
     7a6:	c7 e3       	ldi	r28, 0x37	; 55
     7a8:	0f c0       	rjmp	.+30     	; 0x7c8 <KEYPAD_Get_Pressed_Key+0x9c>
	}
	/*****************		Col 3		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_3)))
     7aa:	66 e0       	ldi	r22, 0x06	; 6
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     7b2:	81 11       	cpse	r24, r1
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <KEYPAD_Get_Pressed_Key+0x9a>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_3))){}
     7b6:	66 e0       	ldi	r22, 0x06	; 6
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     7be:	88 23       	and	r24, r24
     7c0:	d1 f3       	breq	.-12     	; 0x7b6 <KEYPAD_Get_Pressed_Key+0x8a>
		key	=	Output_R_0_C_3;
     7c2:	ca e2       	ldi	r28, 0x2A	; 42
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <KEYPAD_Get_Pressed_Key+0x9c>
	DIO_Set_Pin_Output(ROW_PORTC,ROW_Pin_2,High);
	DIO_Set_Pin_Output(ROW_PORTC,ROW_Pin_3,High);
}

uint8 KEYPAD_Get_Pressed_Key(){
	uint8 key = '\0';
     7c6:	c0 e0       	ldi	r28, 0x00	; 0
		key	=	Output_R_0_C_3;
	}
	
	
	/**************************		ROW 1		************************/
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_0,High);
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	64 e0       	ldi	r22, 0x04	; 4
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_1,Low);
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	65 e0       	ldi	r22, 0x05	; 5
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_2,High);
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	66 e0       	ldi	r22, 0x06	; 6
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_3,High);
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	67 e0       	ldi	r22, 0x07	; 7
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	/*****************		Col 0		*****************/
	if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_0)) )
     7f0:	63 e0       	ldi	r22, 0x03	; 3
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     7f8:	81 11       	cpse	r24, r1
     7fa:	08 c0       	rjmp	.+16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_0))){}
     7fc:	63 e0       	ldi	r22, 0x03	; 3
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     804:	88 23       	and	r24, r24
     806:	d1 f3       	breq	.-12     	; 0x7fc <KEYPAD_Get_Pressed_Key+0xd0>
		key	=	Output_R_1_C_0;
     808:	c2 e3       	ldi	r28, 0x32	; 50
     80a:	29 c0       	rjmp	.+82     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	}
	/*****************		Col 1		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_1)) ){
     80c:	64 e0       	ldi	r22, 0x04	; 4
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     814:	81 11       	cpse	r24, r1
     816:	08 c0       	rjmp	.+16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_1))){}
     818:	64 e0       	ldi	r22, 0x04	; 4
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     820:	88 23       	and	r24, r24
     822:	d1 f3       	breq	.-12     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		key	=	Output_R_1_C_1;
     824:	c5 e3       	ldi	r28, 0x35	; 53
     826:	1b c0       	rjmp	.+54     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	}
	/*****************		Col 2		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_2)) )
     828:	65 e0       	ldi	r22, 0x05	; 5
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     830:	81 11       	cpse	r24, r1
     832:	08 c0       	rjmp	.+16     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_2))){}
     834:	65 e0       	ldi	r22, 0x05	; 5
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     83c:	88 23       	and	r24, r24
     83e:	d1 f3       	breq	.-12     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		key	=	Output_R_1_C_2;
     840:	c8 e3       	ldi	r28, 0x38	; 56
     842:	0d c0       	rjmp	.+26     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	}
	/*****************		Col 3		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_3)) )
     844:	66 e0       	ldi	r22, 0x06	; 6
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     84c:	81 11       	cpse	r24, r1
     84e:	07 c0       	rjmp	.+14     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_3))){}
     850:	66 e0       	ldi	r22, 0x06	; 6
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     858:	88 23       	and	r24, r24
     85a:	d1 f3       	breq	.-12     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		key	=	Output_R_1_C_3;
     85c:	c0 e3       	ldi	r28, 0x30	; 48
	}
	
	
	/**************************		ROW 2		************************/
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_0,High);
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	64 e0       	ldi	r22, 0x04	; 4
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_1,High);
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	65 e0       	ldi	r22, 0x05	; 5
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_2,Low);
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	66 e0       	ldi	r22, 0x06	; 6
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_3,High);
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	67 e0       	ldi	r22, 0x07	; 7
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	/*****************		Col 0		*****************/
	if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_0)) )
     886:	63 e0       	ldi	r22, 0x03	; 3
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     88e:	81 11       	cpse	r24, r1
     890:	08 c0       	rjmp	.+16     	; 0x8a2 <__stack+0x43>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_0))){}
     892:	63 e0       	ldi	r22, 0x03	; 3
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     89a:	88 23       	and	r24, r24
     89c:	d1 f3       	breq	.-12     	; 0x892 <__stack+0x33>
		key	=	Output_R_2_C_0;
     89e:	c3 e3       	ldi	r28, 0x33	; 51
     8a0:	29 c0       	rjmp	.+82     	; 0x8f4 <__stack+0x95>
	}
	/*****************		Col 1		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_1)) )
     8a2:	64 e0       	ldi	r22, 0x04	; 4
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     8aa:	81 11       	cpse	r24, r1
     8ac:	08 c0       	rjmp	.+16     	; 0x8be <__stack+0x5f>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_1))){}
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     8b6:	88 23       	and	r24, r24
     8b8:	d1 f3       	breq	.-12     	; 0x8ae <__stack+0x4f>
		key	=	Output_R_2_C_1;
     8ba:	c6 e3       	ldi	r28, 0x36	; 54
     8bc:	1b c0       	rjmp	.+54     	; 0x8f4 <__stack+0x95>
	}
	/*****************		Col 2		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_2)) )
     8be:	65 e0       	ldi	r22, 0x05	; 5
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     8c6:	81 11       	cpse	r24, r1
     8c8:	08 c0       	rjmp	.+16     	; 0x8da <__stack+0x7b>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_2))){}
     8ca:	65 e0       	ldi	r22, 0x05	; 5
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     8d2:	88 23       	and	r24, r24
     8d4:	d1 f3       	breq	.-12     	; 0x8ca <__stack+0x6b>
		key	=	Output_R_2_C_2;
     8d6:	c9 e3       	ldi	r28, 0x39	; 57
     8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <__stack+0x95>
	}
	/*****************		Col 3		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_3)) )
     8da:	66 e0       	ldi	r22, 0x06	; 6
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     8e2:	81 11       	cpse	r24, r1
     8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <__stack+0x95>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_3))){}
     8e6:	66 e0       	ldi	r22, 0x06	; 6
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     8ee:	88 23       	and	r24, r24
     8f0:	d1 f3       	breq	.-12     	; 0x8e6 <__stack+0x87>
		key	=	Output_R_2_C_3;
     8f2:	c3 e2       	ldi	r28, 0x23	; 35
	}


	/**************************		ROW 3		************************/
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_0,High);
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	64 e0       	ldi	r22, 0x04	; 4
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_1,High);
     8fe:	41 e0       	ldi	r20, 0x01	; 1
     900:	65 e0       	ldi	r22, 0x05	; 5
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_2,High);
     908:	41 e0       	ldi	r20, 0x01	; 1
     90a:	66 e0       	ldi	r22, 0x06	; 6
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(COL_PORTB,COL_Pin_3,Low);
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	67 e0       	ldi	r22, 0x07	; 7
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
	/*****************		Col 0		*****************/
	if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_0)) )
     91c:	63 e0       	ldi	r22, 0x03	; 3
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     924:	81 11       	cpse	r24, r1
     926:	08 c0       	rjmp	.+16     	; 0x938 <__stack+0xd9>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_0))){}
     928:	63 e0       	ldi	r22, 0x03	; 3
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     930:	88 23       	and	r24, r24
     932:	d1 f3       	breq	.-12     	; 0x928 <__stack+0xc9>
		key	=	Output_R_3_C_0;
     934:	c1 e4       	ldi	r28, 0x41	; 65
     936:	29 c0       	rjmp	.+82     	; 0x98a <__stack+0x12b>
	}
	/*****************		Col 1		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_1)))
     938:	64 e0       	ldi	r22, 0x04	; 4
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     940:	81 11       	cpse	r24, r1
     942:	08 c0       	rjmp	.+16     	; 0x954 <__stack+0xf5>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_1))){}
     944:	64 e0       	ldi	r22, 0x04	; 4
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     94c:	88 23       	and	r24, r24
     94e:	d1 f3       	breq	.-12     	; 0x944 <__stack+0xe5>
		key	=	Output_R_3_C_1;
     950:	c2 e4       	ldi	r28, 0x42	; 66
     952:	1b c0       	rjmp	.+54     	; 0x98a <__stack+0x12b>
	}
	/*****************		Col 2		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_2)))
     954:	65 e0       	ldi	r22, 0x05	; 5
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     95c:	81 11       	cpse	r24, r1
     95e:	08 c0       	rjmp	.+16     	; 0x970 <__stack+0x111>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_2))){}
     960:	65 e0       	ldi	r22, 0x05	; 5
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     968:	88 23       	and	r24, r24
     96a:	d1 f3       	breq	.-12     	; 0x960 <__stack+0x101>
		key	=	Output_R_3_C_2;
     96c:	c3 e4       	ldi	r28, 0x43	; 67
     96e:	0d c0       	rjmp	.+26     	; 0x98a <__stack+0x12b>
	}
	/*****************		Col 3		*****************/
	else if(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_3)) )
     970:	66 e0       	ldi	r22, 0x06	; 6
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     978:	81 11       	cpse	r24, r1
     97a:	07 c0       	rjmp	.+14     	; 0x98a <__stack+0x12b>
	{
		while(!(DIO_Get_Pin_Value(ROW_PORTC,ROW_Pin_3))){}
     97c:	66 e0       	ldi	r22, 0x06	; 6
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	0e 94 39 0b 	call	0x1672	; 0x1672 <DIO_Get_Pin_Value>
     984:	88 23       	and	r24, r24
     986:	d1 f3       	breq	.-12     	; 0x97c <__stack+0x11d>
		key	=	Output_R_3_C_3;
     988:	c4 e4       	ldi	r28, 0x44	; 68
	}
	
	/**************************		Return		************************/
	return key;
}
     98a:	8c 2f       	mov	r24, r28
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <Send_Data_FallingEdge>:
	LCD_Send_String("(4)(5)   (9)Exit");
}
void LCD_Show_Choose_Dimmer(){
	LCD_Send_Clear_Screen();
	LCD_Send_String("Dimmer Higher(1)");
	LCD_Send_String("(0)Lower (9)Exit");
     990:	41 e0       	ldi	r20, 0x01	; 1
     992:	63 e0       	ldi	r22, 0x03	; 3
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     99a:	8f ed       	ldi	r24, 0xDF	; 223
     99c:	9e e2       	ldi	r25, 0x2E	; 46
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <Send_Data_FallingEdge+0xe>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <Send_Data_FallingEdge+0x14>
     9a4:	00 00       	nop
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	63 e0       	ldi	r22, 0x03	; 3
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     9b0:	8f ed       	ldi	r24, 0xDF	; 223
     9b2:	9e e2       	ldi	r25, 0x2E	; 46
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <Send_Data_FallingEdge+0x24>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <Send_Data_FallingEdge+0x2a>
     9ba:	00 00       	nop
     9bc:	08 95       	ret

000009be <LCD_Send_Cmd>:
     9be:	cf 93       	push	r28
     9c0:	c8 2f       	mov	r28, r24
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	62 e0       	ldi	r22, 0x02	; 2
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     9d6:	c4 fb       	bst	r28, 4
     9d8:	44 27       	eor	r20, r20
     9da:	40 f9       	bld	r20, 0
     9dc:	64 e0       	ldi	r22, 0x04	; 4
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     9e4:	c5 fb       	bst	r28, 5
     9e6:	44 27       	eor	r20, r20
     9e8:	40 f9       	bld	r20, 0
     9ea:	65 e0       	ldi	r22, 0x05	; 5
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     9f2:	c6 fb       	bst	r28, 6
     9f4:	44 27       	eor	r20, r20
     9f6:	40 f9       	bld	r20, 0
     9f8:	66 e0       	ldi	r22, 0x06	; 6
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     a00:	4c 2f       	mov	r20, r28
     a02:	44 1f       	adc	r20, r20
     a04:	44 27       	eor	r20, r20
     a06:	44 1f       	adc	r20, r20
     a08:	67 e0       	ldi	r22, 0x07	; 7
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     a10:	0e 94 c8 04 	call	0x990	; 0x990 <Send_Data_FallingEdge>
     a14:	8f e1       	ldi	r24, 0x1F	; 31
     a16:	9e e4       	ldi	r25, 0x4E	; 78
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <LCD_Send_Cmd+0x5a>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <LCD_Send_Cmd+0x60>
     a1e:	00 00       	nop
     a20:	4c 2f       	mov	r20, r28
     a22:	41 70       	andi	r20, 0x01	; 1
     a24:	64 e0       	ldi	r22, 0x04	; 4
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     a2c:	c1 fb       	bst	r28, 1
     a2e:	44 27       	eor	r20, r20
     a30:	40 f9       	bld	r20, 0
     a32:	65 e0       	ldi	r22, 0x05	; 5
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     a3a:	c2 fb       	bst	r28, 2
     a3c:	44 27       	eor	r20, r20
     a3e:	40 f9       	bld	r20, 0
     a40:	66 e0       	ldi	r22, 0x06	; 6
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     a48:	c3 fb       	bst	r28, 3
     a4a:	44 27       	eor	r20, r20
     a4c:	40 f9       	bld	r20, 0
     a4e:	67 e0       	ldi	r22, 0x07	; 7
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     a56:	0e 94 c8 04 	call	0x990	; 0x990 <Send_Data_FallingEdge>
     a5a:	8f e1       	ldi	r24, 0x1F	; 31
     a5c:	9e e4       	ldi	r25, 0x4E	; 78
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <LCD_Send_Cmd+0xa0>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <LCD_Send_Cmd+0xa6>
     a64:	00 00       	nop
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <LCD_Init>:
     a6a:	41 e0       	ldi	r20, 0x01	; 1
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
     a7e:	41 e0       	ldi	r20, 0x01	; 1
     a80:	63 e0       	ldi	r22, 0x03	; 3
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	64 e0       	ldi	r22, 0x04	; 4
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	66 e0       	ldi	r22, 0x06	; 6
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
     aa6:	41 e0       	ldi	r20, 0x01	; 1
     aa8:	67 e0       	ldi	r22, 0x07	; 7
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
     ab0:	2f e7       	ldi	r18, 0x7F	; 127
     ab2:	85 eb       	ldi	r24, 0xB5	; 181
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	21 50       	subi	r18, 0x01	; 1
     ab8:	80 40       	sbci	r24, 0x00	; 0
     aba:	90 40       	sbci	r25, 0x00	; 0
     abc:	e1 f7       	brne	.-8      	; 0xab6 <LCD_Init+0x4c>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <LCD_Init+0x56>
     ac0:	00 00       	nop
     ac2:	83 e3       	ldi	r24, 0x33	; 51
     ac4:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     ac8:	8f e3       	ldi	r24, 0x3F	; 63
     aca:	9f e1       	ldi	r25, 0x1F	; 31
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <LCD_Init+0x62>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <LCD_Init+0x68>
     ad2:	00 00       	nop
     ad4:	82 e3       	ldi	r24, 0x32	; 50
     ad6:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     ada:	8f e3       	ldi	r24, 0x3F	; 63
     adc:	9f e1       	ldi	r25, 0x1F	; 31
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <LCD_Init+0x74>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <LCD_Init+0x7a>
     ae4:	00 00       	nop
     ae6:	88 e2       	ldi	r24, 0x28	; 40
     ae8:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     aec:	8f e3       	ldi	r24, 0x3F	; 63
     aee:	9f e1       	ldi	r25, 0x1F	; 31
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <LCD_Init+0x86>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <LCD_Init+0x8c>
     af6:	00 00       	nop
     af8:	8f e0       	ldi	r24, 0x0F	; 15
     afa:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     afe:	8f e3       	ldi	r24, 0x3F	; 63
     b00:	9f e1       	ldi	r25, 0x1F	; 31
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <LCD_Init+0x98>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <LCD_Init+0x9e>
     b08:	00 00       	nop
     b0a:	86 e0       	ldi	r24, 0x06	; 6
     b0c:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     b10:	8f e3       	ldi	r24, 0x3F	; 63
     b12:	9f e1       	ldi	r25, 0x1F	; 31
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <LCD_Init+0xaa>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <LCD_Init+0xb0>
     b1a:	00 00       	nop
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     b22:	8f e3       	ldi	r24, 0x3F	; 63
     b24:	9f e1       	ldi	r25, 0x1F	; 31
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <LCD_Init+0xbc>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <LCD_Init+0xc2>
     b2c:	00 00       	nop
     b2e:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <Cursor_Position>
     b32:	08 95       	ret

00000b34 <LCD_Set_Cursor_Position>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	c8 2f       	mov	r28, r24
     b3a:	d6 2f       	mov	r29, r22
     b3c:	86 2f       	mov	r24, r22
     b3e:	90 e4       	ldi	r25, 0x40	; 64
     b40:	c9 9f       	mul	r28, r25
     b42:	80 0d       	add	r24, r0
     b44:	11 24       	eor	r1, r1
     b46:	80 68       	ori	r24, 0x80	; 128
     b48:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     b4c:	c1 11       	cpse	r28, r1
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <LCD_Set_Cursor_Position+0x26>
     b50:	d0 31       	cpi	r29, 0x10	; 16
     b52:	18 f4       	brcc	.+6      	; 0xb5a <LCD_Set_Cursor_Position+0x26>
     b54:	d0 93 5a 06 	sts	0x065A, r29	; 0x80065a <Cursor_Position>
     b58:	07 c0       	rjmp	.+14     	; 0xb68 <LCD_Set_Cursor_Position+0x34>
     b5a:	c1 30       	cpi	r28, 0x01	; 1
     b5c:	29 f4       	brne	.+10     	; 0xb68 <LCD_Set_Cursor_Position+0x34>
     b5e:	d0 31       	cpi	r29, 0x10	; 16
     b60:	18 f4       	brcc	.+6      	; 0xb68 <LCD_Set_Cursor_Position+0x34>
     b62:	d0 5f       	subi	r29, 0xF0	; 240
     b64:	d0 93 5a 06 	sts	0x065A, r29	; 0x80065a <Cursor_Position>
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <LCD_Send_Clear_Screen>:
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     b74:	8f e3       	ldi	r24, 0x3F	; 63
     b76:	9f e1       	ldi	r25, 0x1F	; 31
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <LCD_Send_Clear_Screen+0xa>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <LCD_Send_Clear_Screen+0x10>
     b7e:	00 00       	nop
     b80:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <Cursor_Position>
     b84:	08 95       	ret

00000b86 <LCD_Position_Handler>:
     b86:	cf 93       	push	r28
     b88:	c8 2f       	mov	r28, r24
     b8a:	81 11       	cpse	r24, r1
     b8c:	22 c0       	rjmp	.+68     	; 0xbd2 <LCD_Position_Handler+0x4c>
     b8e:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <Cursor_Position>
     b92:	8f 30       	cpi	r24, 0x0F	; 15
     b94:	20 f4       	brcc	.+8      	; 0xb9e <LCD_Position_Handler+0x18>
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <Cursor_Position>
     b9c:	1a c0       	rjmp	.+52     	; 0xbd2 <LCD_Position_Handler+0x4c>
     b9e:	8f 30       	cpi	r24, 0x0F	; 15
     ba0:	41 f4       	brne	.+16     	; 0xbb2 <LCD_Position_Handler+0x2c>
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <Cursor_Position>
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_Set_Cursor_Position>
     bb0:	10 c0       	rjmp	.+32     	; 0xbd2 <LCD_Position_Handler+0x4c>
     bb2:	90 ef       	ldi	r25, 0xF0	; 240
     bb4:	98 0f       	add	r25, r24
     bb6:	9f 30       	cpi	r25, 0x0F	; 15
     bb8:	20 f4       	brcc	.+8      	; 0xbc2 <LCD_Position_Handler+0x3c>
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <Cursor_Position>
     bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <LCD_Position_Handler+0x4c>
     bc2:	8f 31       	cpi	r24, 0x1F	; 31
     bc4:	31 f4       	brne	.+12     	; 0xbd2 <LCD_Position_Handler+0x4c>
     bc6:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <Cursor_Position>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_Set_Cursor_Position>
     bd2:	c1 30       	cpi	r28, 0x01	; 1
     bd4:	e9 f4       	brne	.+58     	; 0xc10 <LCD_Position_Handler+0x8a>
     bd6:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <Cursor_Position>
     bda:	9f ef       	ldi	r25, 0xFF	; 255
     bdc:	98 0f       	add	r25, r24
     bde:	9f 30       	cpi	r25, 0x0F	; 15
     be0:	18 f4       	brcc	.+6      	; 0xbe8 <LCD_Position_Handler+0x62>
     be2:	90 93 5a 06 	sts	0x065A, r25	; 0x80065a <Cursor_Position>
     be6:	14 c0       	rjmp	.+40     	; 0xc10 <LCD_Position_Handler+0x8a>
     be8:	80 31       	cpi	r24, 0x10	; 16
     bea:	29 f4       	brne	.+10     	; 0xbf6 <LCD_Position_Handler+0x70>
     bec:	6f e0       	ldi	r22, 0x0F	; 15
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_Set_Cursor_Position>
     bf4:	0d c0       	rjmp	.+26     	; 0xc10 <LCD_Position_Handler+0x8a>
     bf6:	2f ee       	ldi	r18, 0xEF	; 239
     bf8:	28 0f       	add	r18, r24
     bfa:	2f 30       	cpi	r18, 0x0F	; 15
     bfc:	18 f4       	brcc	.+6      	; 0xc04 <LCD_Position_Handler+0x7e>
     bfe:	90 93 5a 06 	sts	0x065A, r25	; 0x80065a <Cursor_Position>
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <LCD_Position_Handler+0x8a>
     c04:	81 11       	cpse	r24, r1
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <LCD_Position_Handler+0x8a>
     c08:	6f e0       	ldi	r22, 0x0F	; 15
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_Set_Cursor_Position>
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <LCD_Send_Char>:
     c14:	cf 93       	push	r28
     c16:	90 ee       	ldi	r25, 0xE0	; 224
     c18:	98 0f       	add	r25, r24
     c1a:	9e 35       	cpi	r25, 0x5E	; 94
     c1c:	08 f0       	brcs	.+2      	; 0xc20 <LCD_Send_Char+0xc>
     c1e:	56 c0       	rjmp	.+172    	; 0xccc <LCD_Send_Char+0xb8>
     c20:	c8 2f       	mov	r28, r24
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	62 e0       	ldi	r22, 0x02	; 2
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     c36:	c4 fb       	bst	r28, 4
     c38:	44 27       	eor	r20, r20
     c3a:	40 f9       	bld	r20, 0
     c3c:	64 e0       	ldi	r22, 0x04	; 4
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     c44:	c5 fb       	bst	r28, 5
     c46:	44 27       	eor	r20, r20
     c48:	40 f9       	bld	r20, 0
     c4a:	65 e0       	ldi	r22, 0x05	; 5
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     c52:	c6 fb       	bst	r28, 6
     c54:	44 27       	eor	r20, r20
     c56:	40 f9       	bld	r20, 0
     c58:	66 e0       	ldi	r22, 0x06	; 6
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     c60:	4c 2f       	mov	r20, r28
     c62:	44 1f       	adc	r20, r20
     c64:	44 27       	eor	r20, r20
     c66:	44 1f       	adc	r20, r20
     c68:	67 e0       	ldi	r22, 0x07	; 7
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     c70:	0e 94 c8 04 	call	0x990	; 0x990 <Send_Data_FallingEdge>
     c74:	8f e1       	ldi	r24, 0x1F	; 31
     c76:	9e e4       	ldi	r25, 0x4E	; 78
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <LCD_Send_Char+0x64>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <LCD_Send_Char+0x6a>
     c7e:	00 00       	nop
     c80:	4c 2f       	mov	r20, r28
     c82:	41 70       	andi	r20, 0x01	; 1
     c84:	64 e0       	ldi	r22, 0x04	; 4
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     c8c:	c1 fb       	bst	r28, 1
     c8e:	44 27       	eor	r20, r20
     c90:	40 f9       	bld	r20, 0
     c92:	65 e0       	ldi	r22, 0x05	; 5
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     c9a:	c2 fb       	bst	r28, 2
     c9c:	44 27       	eor	r20, r20
     c9e:	40 f9       	bld	r20, 0
     ca0:	66 e0       	ldi	r22, 0x06	; 6
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     ca8:	c3 fb       	bst	r28, 3
     caa:	44 27       	eor	r20, r20
     cac:	40 f9       	bld	r20, 0
     cae:	67 e0       	ldi	r22, 0x07	; 7
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
     cb6:	0e 94 c8 04 	call	0x990	; 0x990 <Send_Data_FallingEdge>
     cba:	8f e1       	ldi	r24, 0x1F	; 31
     cbc:	9e e4       	ldi	r25, 0x4E	; 78
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <LCD_Send_Char+0xaa>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <LCD_Send_Char+0xb0>
     cc4:	00 00       	nop
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 c3 05 	call	0xb86	; 0xb86 <LCD_Position_Handler>
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <LCD_Cursor_Shift>:
     cd0:	cf 93       	push	r28
     cd2:	c8 2f       	mov	r28, r24
     cd4:	81 11       	cpse	r24, r1
     cd6:	0b c0       	rjmp	.+22     	; 0xcee <LCD_Cursor_Shift+0x1e>
     cd8:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <Cursor_Position>
     cdc:	8f 31       	cpi	r24, 0x1F	; 31
     cde:	38 f4       	brcc	.+14     	; 0xcee <LCD_Cursor_Shift+0x1e>
     ce0:	84 e1       	ldi	r24, 0x14	; 20
     ce2:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     ce6:	8c 2f       	mov	r24, r28
     ce8:	0e 94 c3 05 	call	0xb86	; 0xb86 <LCD_Position_Handler>
     cec:	08 c0       	rjmp	.+16     	; 0xcfe <LCD_Cursor_Shift+0x2e>
     cee:	c1 30       	cpi	r28, 0x01	; 1
     cf0:	31 f4       	brne	.+12     	; 0xcfe <LCD_Cursor_Shift+0x2e>
     cf2:	80 e1       	ldi	r24, 0x10	; 16
     cf4:	0e 94 df 04 	call	0x9be	; 0x9be <LCD_Send_Cmd>
     cf8:	8c 2f       	mov	r24, r28
     cfa:	0e 94 c3 05 	call	0xb86	; 0xb86 <LCD_Position_Handler>
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <LCD_Delete_Last_Written>:
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 68 06 	call	0xcd0	; 0xcd0 <LCD_Cursor_Shift>
     d08:	8f e3       	ldi	r24, 0x3F	; 63
     d0a:	9f e1       	ldi	r25, 0x1F	; 31
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <LCD_Delete_Last_Written+0xa>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <LCD_Delete_Last_Written+0x10>
     d12:	00 00       	nop
     d14:	80 e2       	ldi	r24, 0x20	; 32
     d16:	0e 94 0a 06 	call	0xc14	; 0xc14 <LCD_Send_Char>
     d1a:	8f e3       	ldi	r24, 0x3F	; 63
     d1c:	9f e1       	ldi	r25, 0x1F	; 31
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <LCD_Delete_Last_Written+0x1c>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <LCD_Delete_Last_Written+0x22>
     d24:	00 00       	nop
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	0e 94 68 06 	call	0xcd0	; 0xcd0 <LCD_Cursor_Shift>
     d2c:	8f e3       	ldi	r24, 0x3F	; 63
     d2e:	9f e1       	ldi	r25, 0x1F	; 31
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <LCD_Delete_Last_Written+0x2e>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <LCD_Delete_Last_Written+0x34>
     d36:	00 00       	nop
     d38:	08 95       	ret

00000d3a <LCD_Send_String>:
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	8c 01       	movw	r16, r24
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <LCD_Send_String+0x1e>
     d46:	0e 94 0a 06 	call	0xc14	; 0xc14 <LCD_Send_Char>
     d4a:	cf 5f       	subi	r28, 0xFF	; 255
     d4c:	8f e3       	ldi	r24, 0x3F	; 63
     d4e:	9c e9       	ldi	r25, 0x9C	; 156
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <LCD_Send_String+0x16>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <LCD_Send_String+0x1c>
     d56:	00 00       	nop
     d58:	f8 01       	movw	r30, r16
     d5a:	ec 0f       	add	r30, r28
     d5c:	f1 1d       	adc	r31, r1
     d5e:	80 81       	ld	r24, Z
     d60:	81 11       	cpse	r24, r1
     d62:	f1 cf       	rjmp	.-30     	; 0xd46 <LCD_Send_String+0xc>
     d64:	8f e1       	ldi	r24, 0x1F	; 31
     d66:	9e e4       	ldi	r25, 0x4E	; 78
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <LCD_Send_String+0x2e>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <LCD_Send_String+0x34>
     d6e:	00 00       	nop
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <LCD_Show_Get_UserID>:
     d78:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Send_Clear_Screen>
     d7c:	84 ec       	ldi	r24, 0xC4	; 196
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     d84:	08 95       	ret

00000d86 <LCD_Show_Get_Password>:
     d86:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Send_Clear_Screen>
     d8a:	85 ed       	ldi	r24, 0xD5	; 213
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     d92:	08 95       	ret

00000d94 <LCD_Show_Welcome_User>:
     d94:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Send_Clear_Screen>
     d98:	86 ee       	ldi	r24, 0xE6	; 230
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     da0:	08 95       	ret

00000da2 <LCD_Show_AuthFailed>:
     da2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Send_Clear_Screen>
     da6:	87 ef       	ldi	r24, 0xF7	; 247
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     dae:	88 e0       	ldi	r24, 0x08	; 8
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     db6:	08 95       	ret

00000db8 <LCD_Show_Invalid>:
     db8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Send_Clear_Screen>
     dbc:	89 e1       	ldi	r24, 0x19	; 25
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     dc4:	88 e0       	ldi	r24, 0x08	; 8
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     dcc:	08 95       	ret

00000dce <LCD_Show_Main_Options>:
     dce:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Send_Clear_Screen>
     dd2:	8a e2       	ldi	r24, 0x2A	; 42
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     dda:	8b e3       	ldi	r24, 0x3B	; 59
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     de2:	08 95       	ret

00000de4 <LCD_Show_Locked>:
}
void LCD_Show_Locked(){
	LCD_Send_Clear_Screen();
     de4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Send_Clear_Screen>
	LCD_Send_String("Auth Failed!    ");
     de8:	87 ef       	ldi	r24, 0xF7	; 247
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
	LCD_Send_String("System Locked   ");
     df0:	82 eb       	ldi	r24, 0xB2	; 178
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
     df8:	08 95       	ret

00000dfa <LCD_Process>:
}


void LCD_Process(){
	switch(LCD_g_step){
     dfa:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     dfe:	8e 2f       	mov	r24, r30
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	fc 01       	movw	r30, r24
     e04:	31 97       	sbiw	r30, 0x01	; 1
     e06:	e7 30       	cpi	r30, 0x07	; 7
     e08:	f1 05       	cpc	r31, r1
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <LCD_Process+0x14>
     e0c:	f6 c0       	rjmp	.+492    	; 0xffa <LCD_Process+0x200>
     e0e:	e6 5d       	subi	r30, 0xD6	; 214
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__tablejump2__>
		case 1:LCD_Show_Get_UserID(); LCD_g_step++; break;
     e16:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_Show_Get_UserID>
     e1a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     e24:	08 95       	ret
		case 2:
			LCD_UserInput = KEYPAD_Get_Pressed_Key();
     e26:	0e 94 96 03 	call	0x72c	; 0x72c <KEYPAD_Get_Pressed_Key>
     e2a:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <LCD_UserInput>
			if (LCD_UserInput == '\0') break;
     e2e:	88 23       	and	r24, r24
     e30:	09 f4       	brne	.+2      	; 0xe34 <LCD_Process+0x3a>
     e32:	e3 c0       	rjmp	.+454    	; 0xffa <LCD_Process+0x200>
			if (LCD_UserInput >= '0' && LCD_UserInput <= '9'){
     e34:	90 ed       	ldi	r25, 0xD0	; 208
     e36:	98 0f       	add	r25, r24
     e38:	9a 30       	cpi	r25, 0x0A	; 10
     e3a:	78 f4       	brcc	.+30     	; 0xe5a <LCD_Process+0x60>
				LCD_Send_Char(LCD_UserInput);
     e3c:	0e 94 0a 06 	call	0xc14	; 0xc14 <LCD_Send_Char>
				LCD_UserID[LCD_user_count] = LCD_UserInput;
     e40:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <LCD_user_count>
     e44:	e8 2f       	mov	r30, r24
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	e9 58       	subi	r30, 0x89	; 137
     e4a:	f9 4f       	sbci	r31, 0xF9	; 249
     e4c:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <LCD_UserInput>
     e50:	90 83       	st	Z, r25
				LCD_user_count++;
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <LCD_user_count>
     e58:	1b c0       	rjmp	.+54     	; 0xe90 <LCD_Process+0x96>
			}else if (LCD_UserInput == '*' && LCD_user_count > 0){
     e5a:	8a 32       	cpi	r24, 0x2A	; 42
     e5c:	89 f4       	brne	.+34     	; 0xe80 <LCD_Process+0x86>
     e5e:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <LCD_user_count>
     e62:	99 23       	and	r25, r25
     e64:	69 f0       	breq	.+26     	; 0xe80 <LCD_Process+0x86>
				LCD_Delete_Last_Written();
     e66:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_Delete_Last_Written>
				LCD_UserID[LCD_user_count] = '\0';
     e6a:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <LCD_user_count>
     e6e:	e8 2f       	mov	r30, r24
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	e9 58       	subi	r30, 0x89	; 137
     e74:	f9 4f       	sbci	r31, 0xF9	; 249
     e76:	10 82       	st	Z, r1
				LCD_user_count--;
     e78:	81 50       	subi	r24, 0x01	; 1
     e7a:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <LCD_user_count>
     e7e:	08 c0       	rjmp	.+16     	; 0xe90 <LCD_Process+0x96>
			}else if (LCD_UserInput >= 'A' && LCD_UserInput <= 'D') {
     e80:	81 54       	subi	r24, 0x41	; 65
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	28 f4       	brcc	.+10     	; 0xe90 <LCD_Process+0x96>
				LCD_g_step++;
     e86:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			LCD_UserInput = '\0';
     e90:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <LCD_UserInput>
			break;
     e94:	08 95       	ret
		case 3:LCD_Show_Get_Password();LCD_g_step++;break;
     e96:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_Show_Get_Password>
     e9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     ea4:	08 95       	ret
		case 4:
			// Get user Input 
			LCD_UserInput = KEYPAD_Get_Pressed_Key();
     ea6:	0e 94 96 03 	call	0x72c	; 0x72c <KEYPAD_Get_Pressed_Key>
     eaa:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <LCD_UserInput>
			if (LCD_UserInput == '\0') break;
     eae:	88 23       	and	r24, r24
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <LCD_Process+0xba>
     eb2:	a3 c0       	rjmp	.+326    	; 0xffa <LCD_Process+0x200>
			if (LCD_UserInput >= '0' && LCD_UserInput <= '9'){
     eb4:	90 ed       	ldi	r25, 0xD0	; 208
     eb6:	98 0f       	add	r25, r24
     eb8:	9a 30       	cpi	r25, 0x0A	; 10
     eba:	78 f4       	brcc	.+30     	; 0xeda <LCD_Process+0xe0>
				LCD_Send_Char(LCD_UserInput);
     ebc:	0e 94 0a 06 	call	0xc14	; 0xc14 <LCD_Send_Char>
				LCD_Password[LCD_pass_count] = LCD_UserInput;
     ec0:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <LCD_pass_count>
     ec4:	e8 2f       	mov	r30, r24
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	e7 56       	subi	r30, 0x67	; 103
     eca:	f9 4f       	sbci	r31, 0xF9	; 249
     ecc:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <LCD_UserInput>
     ed0:	90 83       	st	Z, r25
				LCD_pass_count++;
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <LCD_pass_count>
     ed8:	1b c0       	rjmp	.+54     	; 0xf10 <LCD_Process+0x116>
				}else if (LCD_UserInput == '*' && LCD_pass_count > 0){
     eda:	8a 32       	cpi	r24, 0x2A	; 42
     edc:	89 f4       	brne	.+34     	; 0xf00 <LCD_Process+0x106>
     ede:	90 91 5d 06 	lds	r25, 0x065D	; 0x80065d <LCD_pass_count>
     ee2:	99 23       	and	r25, r25
     ee4:	69 f0       	breq	.+26     	; 0xf00 <LCD_Process+0x106>
				LCD_Delete_Last_Written();
     ee6:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_Delete_Last_Written>
				LCD_Password[LCD_pass_count] = '\0';
     eea:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <LCD_pass_count>
     eee:	e8 2f       	mov	r30, r24
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	e7 56       	subi	r30, 0x67	; 103
     ef4:	f9 4f       	sbci	r31, 0xF9	; 249
     ef6:	10 82       	st	Z, r1
				LCD_pass_count--;
     ef8:	81 50       	subi	r24, 0x01	; 1
     efa:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <LCD_pass_count>
     efe:	08 c0       	rjmp	.+16     	; 0xf10 <LCD_Process+0x116>
				}else if (LCD_UserInput >= 'A' && LCD_UserInput <= 'D') {
     f00:	81 54       	subi	r24, 0x41	; 65
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	28 f4       	brcc	.+10     	; 0xf10 <LCD_Process+0x116>
				LCD_g_step++;
     f06:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			LCD_UserInput = '\0';
     f10:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <LCD_UserInput>
			break;
     f14:	08 95       	ret
		case 5: 
			//User/Password Login Process
			// If User ELCD_UserInputist, Fetch Password
			LCD_ID = atoi(LCD_UserID);
     f16:	87 e7       	ldi	r24, 0x77	; 119
     f18:	96 e0       	ldi	r25, 0x06	; 6
     f1a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <atoi>
     f1e:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <LCD_ID>

			if(EEPROM_Read_UserID_Exist(LCD_ID)){
     f22:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <EEPROM_Read_UserID_Exist>
     f26:	88 23       	and	r24, r24
     f28:	39 f0       	breq	.+14     	; 0xf38 <LCD_Process+0x13e>
				EEPROM_Read_8Data(LCD_ID,LCD_EE_Password,1);
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	69 ea       	ldi	r22, 0xA9	; 169
     f2e:	76 e0       	ldi	r23, 0x06	; 6
     f30:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <LCD_ID>
     f34:	0e 94 dd 02 	call	0x5ba	; 0x5ba <EEPROM_Read_8Data>
			}
			//If password Match, Login Success!
			if(strcmp(LCD_Password,LCD_EE_Password) == 0){
     f38:	69 ea       	ldi	r22, 0xA9	; 169
     f3a:	76 e0       	ldi	r23, 0x06	; 6
     f3c:	89 e9       	ldi	r24, 0x99	; 153
     f3e:	96 e0       	ldi	r25, 0x06	; 6
     f40:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <strcmp>
     f44:	89 2b       	or	r24, r25
     f46:	99 f4       	brne	.+38     	; 0xf6e <LCD_Process+0x174>
				EEPROM_Read_8Data(LCD_ID,LCD_EE_Username,2);
     f48:	42 e0       	ldi	r20, 0x02	; 2
     f4a:	6f e7       	ldi	r22, 0x7F	; 127
     f4c:	76 e0       	ldi	r23, 0x06	; 6
     f4e:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <LCD_ID>
     f52:	0e 94 dd 02 	call	0x5ba	; 0x5ba <EEPROM_Read_8Data>
				LCD_Show_Welcome_User();
     f56:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCD_Show_Welcome_User>
				LCD_Send_String(LCD_EE_Username);
     f5a:	8f e7       	ldi	r24, 0x7F	; 127
     f5c:	96 e0       	ldi	r25, 0x06	; 6
     f5e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_Send_String>
				LCD_g_step++;
     f62:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     f6c:	08 95       	ret
			}else{
				//Else Login Failed, Increase Fail Counter
				LCD_Show_AuthFailed();
     f6e:	0e 94 d1 06 	call	0xda2	; 0xda2 <LCD_Show_AuthFailed>
				LCD_Fail_Count++;
     f72:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <LCD_Fail_Count>
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <LCD_Fail_Count>
				if(LCD_Fail_Count == Max_Failure_Login_Count){
     f7c:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <Max_Failure_Login_Count>
     f80:	89 13       	cpse	r24, r25
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <LCD_Process+0x19a>
					UART_Send_String_Polling_8("Login Failed, \nSystem Locked! \n");
     f84:	83 ec       	ldi	r24, 0xC3	; 195
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					LCD_Show_Locked();
     f8c:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_Show_Locked>
					BUZZER_ALARM_TILL_RESET();
     f90:	0e 94 bd 00 	call	0x17a	; 0x17a <BUZZER_ALARM_TILL_RESET>
				}
				LCD_g_step = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     f9a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f9c:	2f ef       	ldi	r18, 0xFF	; 255
     f9e:	83 ed       	ldi	r24, 0xD3	; 211
     fa0:	90 e3       	ldi	r25, 0x30	; 48
     fa2:	21 50       	subi	r18, 0x01	; 1
     fa4:	80 40       	sbci	r24, 0x00	; 0
     fa6:	90 40       	sbci	r25, 0x00	; 0
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <LCD_Process+0x1a8>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <LCD_Process+0x1b2>
     fac:	00 00       	nop
			}
			break;
			
			
		case 6:_delay_ms(1000);LCD_Show_Main_Options();break;
     fae:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_Show_Main_Options>
     fb2:	08 95       	ret
		case 7:
			LCD_UserInput = KEYPAD_Get_Pressed_Key();
     fb4:	0e 94 96 03 	call	0x72c	; 0x72c <KEYPAD_Get_Pressed_Key>
     fb8:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <LCD_UserInput>
			if (LCD_UserInput == '\0') break;
     fbc:	88 23       	and	r24, r24
     fbe:	e9 f0       	breq	.+58     	; 0xffa <LCD_Process+0x200>
			if (LCD_UserInput >= '0' && LCD_UserInput <= '4'){
     fc0:	80 53       	subi	r24, 0x30	; 48
     fc2:	85 30       	cpi	r24, 0x05	; 5
     fc4:	50 f4       	brcc	.+20     	; 0xfda <LCD_Process+0x1e0>
				LCD_g_choice1 = LCD_UserInput - 48;
     fc6:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <LCD_g_choice1>
				LCD_UserInput = '\0';
     fca:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <LCD_UserInput>
				LCD_g_step++;
     fce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     fd8:	08 95       	ret
			}else{
				LCD_Show_Invalid();
     fda:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LCD_Show_Invalid>
     fde:	2f ef       	ldi	r18, 0xFF	; 255
     fe0:	83 ed       	ldi	r24, 0xD3	; 211
     fe2:	90 e3       	ldi	r25, 0x30	; 48
     fe4:	21 50       	subi	r18, 0x01	; 1
     fe6:	80 40       	sbci	r24, 0x00	; 0
     fe8:	90 40       	sbci	r25, 0x00	; 0
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <LCD_Process+0x1ea>
     fec:	00 c0       	rjmp	.+0      	; 0xfee <LCD_Process+0x1f4>
     fee:	00 00       	nop
				_delay_ms(1000);
				LCD_g_step--;
     ff0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ff4:	81 50       	subi	r24, 0x01	; 1
     ff6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     ffa:	08 95       	ret

00000ffc <LED_Init_All>:
void LED_0_Toggle(){DIO_Set_Pin_Output(Led0_Port,Led0_Pin,Toggle);}
void LED_1_Toggle(){DIO_Set_Pin_Output(Led1_Port,Led1_Pin,Toggle);}
void LED_2_Toggle(){DIO_Set_Pin_Output(Led2_Port,Led2_Pin,Toggle);}
void LED_3_Toggle(){DIO_Set_Pin_Output(Led3_Port,Led3_Pin,Toggle);}
void LED_4_Toggle(){DIO_Set_Pin_Output(Led4_Port,Led4_Pin,Toggle);}
void Dimmer_Toggle(){DIO_Set_Pin_Output(Dimmer_Port,Dimmer_Pin,Low);}
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	67 e0       	ldi	r22, 0x07	; 7
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
    1010:	41 e0       	ldi	r20, 0x01	; 1
    1012:	63 e0       	ldi	r22, 0x03	; 3
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	65 e0       	ldi	r22, 0x05	; 5
    101e:	83 e0       	ldi	r24, 0x03	; 3
    1020:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
    1024:	41 e0       	ldi	r20, 0x01	; 1
    1026:	64 e0       	ldi	r22, 0x04	; 4
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_Set_Pin_Direction>
    1038:	08 95       	ret

0000103a <LED_0_Off>:
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	62 e0       	ldi	r22, 0x02	; 2
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    1044:	08 95       	ret

00001046 <LED_1_Off>:
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	67 e0       	ldi	r22, 0x07	; 7
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    1050:	08 95       	ret

00001052 <LED_2_Off>:
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	63 e0       	ldi	r22, 0x03	; 3
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    105c:	08 95       	ret

0000105e <LED_3_Off>:
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	65 e0       	ldi	r22, 0x05	; 5
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    1068:	08 95       	ret

0000106a <LED_4_Off>:
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	64 e0       	ldi	r22, 0x04	; 4
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    1074:	08 95       	ret

00001076 <LED_0_Toggle>:
    1076:	42 e0       	ldi	r20, 0x02	; 2
    1078:	62 e0       	ldi	r22, 0x02	; 2
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    1080:	08 95       	ret

00001082 <LED_1_Toggle>:
    1082:	42 e0       	ldi	r20, 0x02	; 2
    1084:	67 e0       	ldi	r22, 0x07	; 7
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    108c:	08 95       	ret

0000108e <LED_2_Toggle>:
    108e:	42 e0       	ldi	r20, 0x02	; 2
    1090:	63 e0       	ldi	r22, 0x03	; 3
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    1098:	08 95       	ret

0000109a <LED_3_Toggle>:
    109a:	42 e0       	ldi	r20, 0x02	; 2
    109c:	65 e0       	ldi	r22, 0x05	; 5
    109e:	83 e0       	ldi	r24, 0x03	; 3
    10a0:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    10a4:	08 95       	ret

000010a6 <LED_4_Toggle>:
    10a6:	42 e0       	ldi	r20, 0x02	; 2
    10a8:	64 e0       	ldi	r22, 0x04	; 4
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_Set_Pin_Output>
    10b0:	08 95       	ret

000010b2 <LED_Feedback>:

void LED_Feedback(uint8 g_choice_2){
    10b2:	cf 93       	push	r28
	uint8 x = 0;
	switch(g_choice_2){
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	99 f0       	breq	.+38     	; 0x10de <LED_Feedback+0x2c>
    10b8:	28 f4       	brcc	.+10     	; 0x10c4 <LED_Feedback+0x12>
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	41 f0       	breq	.+16     	; 0x10ce <LED_Feedback+0x1c>
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	51 f0       	breq	.+20     	; 0x10d6 <LED_Feedback+0x24>
    10c2:	19 c0       	rjmp	.+50     	; 0x10f6 <LED_Feedback+0x44>
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <LED_Feedback+0x34>
    10c8:	85 30       	cpi	r24, 0x05	; 5
    10ca:	89 f0       	breq	.+34     	; 0x10ee <LED_Feedback+0x3c>
    10cc:	14 c0       	rjmp	.+40     	; 0x10f6 <LED_Feedback+0x44>
		case 1: // Toggle Led 0
		LED_0_Toggle(); x = 0;break;
    10ce:	0e 94 3b 08 	call	0x1076	; 0x1076 <LED_0_Toggle>
    10d2:	c0 e0       	ldi	r28, 0x00	; 0
    10d4:	11 c0       	rjmp	.+34     	; 0x10f8 <LED_Feedback+0x46>
		case 2: // Toggle Led 1
		LED_1_Toggle(); x = 1;break;
    10d6:	0e 94 41 08 	call	0x1082	; 0x1082 <LED_1_Toggle>
    10da:	c1 e0       	ldi	r28, 0x01	; 1
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <LED_Feedback+0x46>
		case 3: // Toggle Led 2
		LED_2_Toggle(); x = 2;break;
    10de:	0e 94 47 08 	call	0x108e	; 0x108e <LED_2_Toggle>
    10e2:	c2 e0       	ldi	r28, 0x02	; 2
    10e4:	09 c0       	rjmp	.+18     	; 0x10f8 <LED_Feedback+0x46>
		case 4: // Toggle Led 3
		LED_3_Toggle(); x = 3;break;
    10e6:	0e 94 4d 08 	call	0x109a	; 0x109a <LED_3_Toggle>
    10ea:	c3 e0       	ldi	r28, 0x03	; 3
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <LED_Feedback+0x46>
		case 5: // Toggle Led 4
		LED_4_Toggle(); x = 4;break;
    10ee:	0e 94 53 08 	call	0x10a6	; 0x10a6 <LED_4_Toggle>
    10f2:	c4 e0       	ldi	r28, 0x04	; 4
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <LED_Feedback+0x46>
void LED_3_Toggle(){DIO_Set_Pin_Output(Led3_Port,Led3_Pin,Toggle);}
void LED_4_Toggle(){DIO_Set_Pin_Output(Led4_Port,Led4_Pin,Toggle);}
void Dimmer_Toggle(){DIO_Set_Pin_Output(Dimmer_Port,Dimmer_Pin,Low);}

void LED_Feedback(uint8 g_choice_2){
	uint8 x = 0;
    10f6:	c0 e0       	ldi	r28, 0x00	; 0
		case 4: // Toggle Led 3
		LED_3_Toggle(); x = 3;break;
		case 5: // Toggle Led 4
		LED_4_Toggle(); x = 4;break;
	}
	UART_Send_String_Polling_8("Led ");
    10f8:	8e e0       	ldi	r24, 0x0E	; 14
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_Byte_Polling_8(x);
    1100:	8c 2f       	mov	r24, r28
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <UART_Send_Byte_Polling_8>
	UART_Send_String_Polling_8("Toggled");
    1108:	83 e1       	ldi	r24, 0x13	; 19
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <Smart_Initialization>:
	UART_Received_Flag = 1;
}
void Go_Back(){
	UART_Send_String_Polling_8("Going Back!\n");
	UART_Show_MainMenu();
	UART_global_Flag--;
    1114:	0e 94 fe 07 	call	0xffc	; 0xffc <LED_Init_All>
    1118:	0e 94 23 08 	call	0x1046	; 0x1046 <LED_1_Off>
    111c:	0e 94 29 08 	call	0x1052	; 0x1052 <LED_2_Off>
    1120:	0e 94 2f 08 	call	0x105e	; 0x105e <LED_3_Off>
    1124:	0e 94 35 08 	call	0x106a	; 0x106a <LED_4_Off>
    1128:	0e 94 1d 08 	call	0x103a	; 0x103a <LED_0_Off>
    112c:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_Init>
    1130:	0e 94 45 03 	call	0x68a	; 0x68a <KEYPAD_Initialization>
    1134:	0e 94 58 00 	call	0xb0	; 0xb0 <AC_Initialization>
    1138:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Servo_Init>
    113c:	0e 94 00 01 	call	0x200	; 0x200 <Dimmer_Init>
    1140:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Dimmer_Off>
    1144:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <EEPROM_Init>
    1148:	0e 94 c0 0b 	call	0x1780	; 0x1780 <UART_Init>
    114c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <UART_Enable_RX_Interrupt>
    1150:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GIE_Enable>
    1154:	08 95       	ret

00001156 <__vector_13>:
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
    1178:	88 e8       	ldi	r24, 0x88	; 136
    117a:	96 e0       	ldi	r25, 0x06	; 6
    117c:	0e 94 00 0c 	call	0x1800	; 0x1800 <UART_Recieve_String_8>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <UART_Received_Flag>
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	0f 90       	pop	r0
    11a4:	1f 90       	pop	r1
    11a6:	18 95       	reti

000011a8 <Go_Next>:
}
void Go_Next(){
	UART_global_Flag++;
    11a8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <UART_global_Flag>
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <UART_global_Flag>
    11b2:	08 95       	ret

000011b4 <UART_Process>:
	// step 2 user_password
	// step 3 choice_1(from main menu)
	// step 4 choice_2(from Control_Appliances/UserManagement/Settings)
	// step 5 choice_3(from ...)

	if (UART_Received_Flag == 1) {
    11b4:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <UART_Received_Flag>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	09 f0       	breq	.+2      	; 0x11be <UART_Process+0xa>
    11bc:	3c c1       	rjmp	.+632    	; 0x1436 <UART_Process+0x282>
		UART_Received_Flag = 0;
    11be:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <UART_Received_Flag>

		switch (UART_global_Flag) {
    11c2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <UART_global_Flag>
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	f9 f0       	breq	.+62     	; 0x1208 <UART_Process+0x54>
    11ca:	28 f4       	brcc	.+10     	; 0x11d6 <UART_Process+0x22>
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	61 f0       	breq	.+24     	; 0x11e8 <UART_Process+0x34>
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	79 f0       	breq	.+30     	; 0x11f2 <UART_Process+0x3e>
    11d4:	08 95       	ret
    11d6:	85 30       	cpi	r24, 0x05	; 5
    11d8:	09 f4       	brne	.+2      	; 0x11dc <UART_Process+0x28>
    11da:	88 c0       	rjmp	.+272    	; 0x12ec <UART_Process+0x138>
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <UART_Process+0x2c>
    11de:	5e c0       	rjmp	.+188    	; 0x129c <UART_Process+0xe8>
    11e0:	86 30       	cpi	r24, 0x06	; 6
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <UART_Process+0x32>
    11e4:	f6 c0       	rjmp	.+492    	; 0x13d2 <UART_Process+0x21e>
    11e6:	08 95       	ret
			/************************* Login Process *************************/
			case 1: //Just Started, User Not loggedIn, user sent anything
			UART_Show_Request_UserID();
    11e8:	0e 94 1d 0c 	call	0x183a	; 0x183a <UART_Show_Request_UserID>
			Go_Next();
    11ec:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Go_Next>
			break;
    11f0:	08 95       	ret
			case 2: // we got user input for userID now we validate it
			strcpy(UART_UserID, UART_Buffer); // Copy UART_Buffer To USERID
    11f2:	68 e8       	ldi	r22, 0x88	; 136
    11f4:	76 e0       	ldi	r23, 0x06	; 6
    11f6:	89 e6       	ldi	r24, 0x69	; 105
    11f8:	96 e0       	ldi	r25, 0x06	; 6
    11fa:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <strcpy>
			UART_Show_Request_Password();
    11fe:	0e 94 22 0c 	call	0x1844	; 0x1844 <UART_Show_Request_Password>
			Go_Next();
    1202:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Go_Next>
			break;
    1206:	08 95       	ret
			case 3: // login Process
			strcpy(UART_Password, UART_Buffer); // Copy UART_Buffer to Password
    1208:	68 e8       	ldi	r22, 0x88	; 136
    120a:	76 e0       	ldi	r23, 0x06	; 6
    120c:	80 e6       	ldi	r24, 0x60	; 96
    120e:	96 e0       	ldi	r25, 0x06	; 6
    1210:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <strcpy>
			//			atoi ascii to integer || itoa integer to ascii
			User_ID = atoi(UART_UserID);
    1214:	89 e6       	ldi	r24, 0x69	; 105
    1216:	96 e0       	ldi	r25, 0x06	; 6
    1218:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <atoi>
    121c:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <User_ID>
			//			Check if User Exists
			if (EEPROM_Read_UserID_Exist(User_ID)) {
    1220:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <EEPROM_Read_UserID_Exist>
    1224:	88 23       	and	r24, r24
    1226:	71 f0       	breq	.+28     	; 0x1244 <UART_Process+0x90>
				// Get Username and Password
				EEPROM_Read_8Data(User_ID, EEPROM_Username, 2);
    1228:	42 e0       	ldi	r20, 0x02	; 2
    122a:	69 e6       	ldi	r22, 0x69	; 105
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <User_ID>
    1232:	0e 94 dd 02 	call	0x5ba	; 0x5ba <EEPROM_Read_8Data>
				EEPROM_Read_8Data(User_ID, EEPROM_Password, 1);
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	61 e6       	ldi	r22, 0x61	; 97
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <User_ID>
    1240:	0e 94 dd 02 	call	0x5ba	; 0x5ba <EEPROM_Read_8Data>
			}
			// User and password Compare!
			if (strcmp(EEPROM_Password, UART_Password) == 0) {
    1244:	60 e6       	ldi	r22, 0x60	; 96
    1246:	76 e0       	ldi	r23, 0x06	; 6
    1248:	81 e6       	ldi	r24, 0x61	; 97
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <strcmp>
    1250:	89 2b       	or	r24, r25
    1252:	89 f4       	brne	.+34     	; 0x1276 <UART_Process+0xc2>
				UART_Send_String_Polling_8("Welcome Back! ");
    1254:	88 e2       	ldi	r24, 0x28	; 40
    1256:	93 e0       	ldi	r25, 0x03	; 3
    1258:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
				UART_Send_String_Polling_8(EEPROM_Username);
    125c:	89 e6       	ldi	r24, 0x69	; 105
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
				UART_Send_String_Polling_8("\n");
    1264:	85 e5       	ldi	r24, 0x55	; 85
    1266:	95 e0       	ldi	r25, 0x05	; 5
    1268:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
				UART_Show_MainMenu();
    126c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <UART_Show_MainMenu>
				Go_Next();
    1270:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Go_Next>
    1274:	08 95       	ret
				} else {
				//				If Login Fail, Count Failure, Lock Sys
				FailCount++;
    1276:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <FailCount>
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <FailCount>
				if (FailCount >= Max_Failure_Login_Count) {
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	30 f0       	brcs	.+12     	; 0x1290 <UART_Process+0xdc>
					UART_Send_String_Polling_8("Login Failed, \nSystem Locked! \n");
    1284:	83 ec       	ldi	r24, 0xC3	; 195
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
					BUZZER_ALARM_TILL_RESET();
    128c:	0e 94 bd 00 	call	0x17a	; 0x17a <BUZZER_ALARM_TILL_RESET>
				}
				UART_Show_Login_Failed();
    1290:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <UART_Show_Login_Failed>
				UART_global_Flag = 1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <UART_global_Flag>
    129a:	08 95       	ret
			}
			break;
			/********************** End Login Process *************************/

			case 4: // Process choice 1 from MainMenu
			g_choice_1 = atoi(UART_Buffer);
    129c:	88 e8       	ldi	r24, 0x88	; 136
    129e:	96 e0       	ldi	r25, 0x06	; 6
    12a0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <atoi>
    12a4:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <g_choice_1>
			if (g_choice_1 <= 9 || g_choice_1 != 0) {
				// If user Input is valid BUT User is not admin
				// We Give him Admin Auth Refused
				// Admin Only: Control Door(3), Create,Delete(6,7)  User
				// Factory Reset(8)
				if ((g_choice_1 > 5 && g_choice_1 < 9) || (g_choice_1 == 3)) {
    12a8:	9a ef       	ldi	r25, 0xFA	; 250
    12aa:	98 0f       	add	r25, r24
    12ac:	93 30       	cpi	r25, 0x03	; 3
    12ae:	10 f0       	brcs	.+4      	; 0x12b4 <UART_Process+0x100>
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	49 f4       	brne	.+18     	; 0x12c6 <UART_Process+0x112>
					if (User_ID != Admin_ID) {
    12b4:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <User_ID>
    12b8:	93 36       	cpi	r25, 0x63	; 99
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <UART_Process+0x112>
						UART_Send_String_Polling_8("Auth Denied, Only Admin Function! \n");
    12bc:	87 e3       	ldi	r24, 0x37	; 55
    12be:	93 e0       	ldi	r25, 0x03	; 3
    12c0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
						break;
    12c4:	08 95       	ret
					}
				}
				//Otherwise, Allow to handle every functionality
				UART_Choice_Handler_1(g_choice_1);
    12c6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <UART_Choice_Handler_1>
				// For Show user list No further Instructions Needed
					if (g_choice_1 != 5) {
    12ca:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <g_choice_1>
    12ce:	85 30       	cpi	r24, 0x05	; 5
    12d0:	31 f0       	breq	.+12     	; 0x12de <UART_Process+0x12a>
						UART_global_Flag++;
    12d2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <UART_global_Flag>
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <UART_global_Flag>
    12dc:	08 95       	ret
					}else if(g_choice_1 == 8){
    12de:	88 30       	cpi	r24, 0x08	; 8
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <UART_Process+0x130>
    12e2:	a9 c0       	rjmp	.+338    	; 0x1436 <UART_Process+0x282>
						UART_global_Flag = 2;
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <UART_global_Flag>
    12ea:	08 95       	ret
				UART_Show_MainMenu();
			}
			break;

			case 5: // Process choice 2 from SubMenu
			g_choice_2 = atoi(UART_Buffer);
    12ec:	88 e8       	ldi	r24, 0x88	; 136
    12ee:	96 e0       	ldi	r25, 0x06	; 6
    12f0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <atoi>
    12f4:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <g_choice_2>
			if (g_choice_1 != 6 && g_choice_1 != 7) {
    12f8:	90 91 76 06 	lds	r25, 0x0676	; 0x800676 <g_choice_1>
    12fc:	2a ef       	ldi	r18, 0xFA	; 250
    12fe:	29 0f       	add	r18, r25
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	98 f0       	brcs	.+38     	; 0x132a <UART_Process+0x176>
				if (g_choice_2 > 8) {
    1304:	89 30       	cpi	r24, 0x09	; 9
    1306:	38 f0       	brcs	.+14     	; 0x1316 <UART_Process+0x162>
					UART_Show_Invalid();
    1308:	0e 94 27 0c 	call	0x184e	; 0x184e <UART_Show_Invalid>
					UART_Choice_Handler_1(g_choice_1);
    130c:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <g_choice_1>
    1310:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <UART_Choice_Handler_1>
					break;
    1314:	08 95       	ret
				}
				if (g_choice_2 == 0) {
    1316:	81 11       	cpse	r24, r1
    1318:	08 c0       	rjmp	.+16     	; 0x132a <UART_Process+0x176>
					UART_Show_MainMenu();
    131a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <UART_Show_MainMenu>
					UART_global_Flag--;
    131e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <UART_global_Flag>
    1322:	81 50       	subi	r24, 0x01	; 1
    1324:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <UART_global_Flag>
					break;
    1328:	08 95       	ret
				}
			}

			switch (g_choice_1) {
    132a:	93 30       	cpi	r25, 0x03	; 3
    132c:	f1 f0       	breq	.+60     	; 0x136a <UART_Process+0x1b6>
    132e:	28 f4       	brcc	.+10     	; 0x133a <UART_Process+0x186>
    1330:	91 30       	cpi	r25, 0x01	; 1
    1332:	59 f0       	breq	.+22     	; 0x134a <UART_Process+0x196>
    1334:	92 30       	cpi	r25, 0x02	; 2
    1336:	89 f0       	breq	.+34     	; 0x135a <UART_Process+0x1a6>
    1338:	08 95       	ret
    133a:	96 30       	cpi	r25, 0x06	; 6
    133c:	39 f1       	breq	.+78     	; 0x138c <UART_Process+0x1d8>
    133e:	97 30       	cpi	r25, 0x07	; 7
    1340:	99 f1       	breq	.+102    	; 0x13a8 <UART_Process+0x1f4>
    1342:	94 30       	cpi	r25, 0x04	; 4
    1344:	09 f0       	breq	.+2      	; 0x1348 <UART_Process+0x194>
    1346:	77 c0       	rjmp	.+238    	; 0x1436 <UART_Process+0x282>
    1348:	19 c0       	rjmp	.+50     	; 0x137c <UART_Process+0x1c8>
				case 1: // LED Controller
				if (g_choice_2 < 6) {
    134a:	86 30       	cpi	r24, 0x06	; 6
    134c:	18 f4       	brcc	.+6      	; 0x1354 <UART_Process+0x1a0>
					LED_Feedback(g_choice_2);
    134e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <LED_Feedback>
    1352:	08 95       	ret
					} else {
					UART_Show_Invalid();
    1354:	0e 94 27 0c 	call	0x184e	; 0x184e <UART_Show_Invalid>
    1358:	08 95       	ret
				}
				break;
				case 2: // Air Conditioner Controller
				if (g_choice_2 < 4) {
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	18 f4       	brcc	.+6      	; 0x1364 <UART_Process+0x1b0>
					AC_Feedback(g_choice_2);
    135e:	0e 94 6a 00 	call	0xd4	; 0xd4 <AC_Feedback>
    1362:	08 95       	ret
					} else {
					UART_Show_Invalid();
    1364:	0e 94 27 0c 	call	0x184e	; 0x184e <UART_Show_Invalid>
    1368:	08 95       	ret
				}
				break;
				case 3: // Door Controller
				if (g_choice_2 < 3) {
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	20 f4       	brcc	.+8      	; 0x1376 <UART_Process+0x1c2>
					Door_Feedback(g_choice_2);
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Door_Feedback>
    1374:	08 95       	ret
					} else {
					UART_Show_Invalid();
    1376:	0e 94 27 0c 	call	0x184e	; 0x184e <UART_Show_Invalid>
    137a:	08 95       	ret
				}
				break;
				case 4: // Dimmer Controller
				if (g_choice_2 < 3) {
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	18 f4       	brcc	.+6      	; 0x1386 <UART_Process+0x1d2>
					Dimmer_Feedback(g_choice_2);
    1380:	0e 94 0a 01 	call	0x214	; 0x214 <Dimmer_Feedback>
    1384:	08 95       	ret
					} else {
					UART_Show_Invalid();
    1386:	0e 94 27 0c 	call	0x184e	; 0x184e <UART_Show_Invalid>
    138a:	08 95       	ret
				}
				break;
				case 6: // New User
				strcpy(New_Username, UART_Buffer);
    138c:	68 e8       	ldi	r22, 0x88	; 136
    138e:	76 e0       	ldi	r23, 0x06	; 6
    1390:	81 e9       	ldi	r24, 0x91	; 145
    1392:	96 e0       	ldi	r25, 0x06	; 6
    1394:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <strcpy>
				UART_Show_Request_NewUserPassword();
    1398:	0e 94 df 0c 	call	0x19be	; 0x19be <UART_Show_Request_NewUserPassword>
				UART_global_Flag++;
    139c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <UART_global_Flag>
    13a0:	8f 5f       	subi	r24, 0xFF	; 255
    13a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <UART_global_Flag>
				break;
    13a6:	08 95       	ret
				case 7: // Delete User
				if (EEPROM_Read_UserID_Exist(g_choice_2)) {
    13a8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <EEPROM_Read_UserID_Exist>
    13ac:	88 23       	and	r24, r24
    13ae:	49 f0       	breq	.+18     	; 0x13c2 <UART_Process+0x20e>
					EEPROM_Delete_User(g_choice_2);
    13b0:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <g_choice_2>
    13b4:	0e 94 01 03 	call	0x602	; 0x602 <EEPROM_Delete_User>
					UART_Send_String_Polling_8("User Deleted Successfully");
    13b8:	8b e5       	ldi	r24, 0x5B	; 91
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <UART_Process+0x216>
					} else {
					UART_Send_String_Polling_8("User Does not Exist!");
    13c2:	85 e7       	ldi	r24, 0x75	; 117
    13c4:	93 e0       	ldi	r25, 0x03	; 3
    13c6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
				}
				UART_global_Flag = 1;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <UART_global_Flag>
				break;
    13d0:	08 95       	ret
			}
			break;
			case 6:
			strcpy(New_Password, UART_Buffer);
    13d2:	68 e8       	ldi	r22, 0x88	; 136
    13d4:	76 e0       	ldi	r23, 0x06	; 6
    13d6:	81 ea       	ldi	r24, 0xA1	; 161
    13d8:	96 e0       	ldi	r25, 0x06	; 6
    13da:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <strcpy>
			New_UserID = EEPROM_Find_Empty_ID();
    13de:	0e 94 0a 03 	call	0x614	; 0x614 <EEPROM_Find_Empty_ID>
    13e2:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <New_UserID>
			if (New_UserID != 0) {
    13e6:	88 23       	and	r24, r24
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <UART_Process+0x242>
				EEPROM_Reg_New_User(New_UserID, New_Username, New_Password);
    13ea:	41 ea       	ldi	r20, 0xA1	; 161
    13ec:	56 e0       	ldi	r21, 0x06	; 6
    13ee:	61 e9       	ldi	r22, 0x91	; 145
    13f0:	76 e0       	ldi	r23, 0x06	; 6
    13f2:	0e 94 23 03 	call	0x646	; 0x646 <EEPROM_Reg_New_User>
			}
			UART_Send_String_Polling_8("New User Registered Success!\n");
    13f6:	8a e8       	ldi	r24, 0x8A	; 138
    13f8:	93 e0       	ldi	r25, 0x03	; 3
    13fa:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			UART_Send_String_Polling_8("New User ID: ");
    13fe:	88 ea       	ldi	r24, 0xA8	; 168
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			UART_Send_Byte_Polling_8(New_UserID + 48);
    1406:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <New_UserID>
    140a:	80 5d       	subi	r24, 0xD0	; 208
    140c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <UART_Send_Byte_Polling_8>
			UART_Send_String_Polling_8("\n");
    1410:	85 e5       	ldi	r24, 0x55	; 85
    1412:	95 e0       	ldi	r25, 0x05	; 5
    1414:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			UART_Send_String_Polling_8("New User Username: ");
    1418:	86 eb       	ldi	r24, 0xB6	; 182
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			UART_Send_String_Polling_8(New_Username);
    1420:	81 e9       	ldi	r24, 0x91	; 145
    1422:	96 e0       	ldi	r25, 0x06	; 6
    1424:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			UART_Send_String_Polling_8("\n");
    1428:	85 e5       	ldi	r24, 0x55	; 85
    142a:	95 e0       	ldi	r25, 0x05	; 5
    142c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			UART_global_Flag = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <UART_global_Flag>
    1436:	08 95       	ret

00001438 <main>:



int main(void)
{
	Smart_Initialization();
    1438:	0e 94 8a 08 	call	0x1114	; 0x1114 <Smart_Initialization>

	while (1) 
    {
		UART_Process();
    143c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <UART_Process>
		LCD_Process();
    1440:	0e 94 fd 06 	call	0xdfa	; 0xdfa <LCD_Process>
    1444:	fb cf       	rjmp	.-10     	; 0x143c <main+0x4>

00001446 <DIO_Set_Pin_Direction>:
		}else if(Output == Low){
		switch(port){
			case PORTAx:PORTA_Reg=0x00;break;
			case PORTBx:PORTB_Reg=0x00;break;
			case PORTCx:PORTC_Reg=0x00;break;
			case PORTDx:PORTD_Reg=0x00;break;
    1446:	41 30       	cpi	r20, 0x01	; 1
    1448:	a1 f5       	brne	.+104    	; 0x14b2 <DIO_Set_Pin_Direction+0x6c>
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	89 f0       	breq	.+34     	; 0x1470 <DIO_Set_Pin_Direction+0x2a>
    144e:	28 f0       	brcs	.+10     	; 0x145a <DIO_Set_Pin_Direction+0x14>
    1450:	82 30       	cpi	r24, 0x02	; 2
    1452:	c9 f0       	breq	.+50     	; 0x1486 <DIO_Set_Pin_Direction+0x40>
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	11 f1       	breq	.+68     	; 0x149c <DIO_Set_Pin_Direction+0x56>
    1458:	08 95       	ret
    145a:	2a b3       	in	r18, 0x1a	; 26
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_Set_Pin_Direction+0x20>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	6a 95       	dec	r22
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_Set_Pin_Direction+0x1c>
    146a:	82 2b       	or	r24, r18
    146c:	8a bb       	out	0x1a, r24	; 26
    146e:	08 95       	ret
    1470:	27 b3       	in	r18, 0x17	; 23
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_Set_Pin_Direction+0x36>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	6a 95       	dec	r22
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_Set_Pin_Direction+0x32>
    1480:	82 2b       	or	r24, r18
    1482:	87 bb       	out	0x17, r24	; 23
    1484:	08 95       	ret
    1486:	24 b3       	in	r18, 0x14	; 20
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_Set_Pin_Direction+0x4c>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	6a 95       	dec	r22
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_Set_Pin_Direction+0x48>
    1496:	82 2b       	or	r24, r18
    1498:	84 bb       	out	0x14, r24	; 20
    149a:	08 95       	ret
    149c:	21 b3       	in	r18, 0x11	; 17
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_Set_Pin_Direction+0x62>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	6a 95       	dec	r22
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_Set_Pin_Direction+0x5e>
    14ac:	82 2b       	or	r24, r18
    14ae:	81 bb       	out	0x11, r24	; 17
    14b0:	08 95       	ret
    14b2:	41 11       	cpse	r20, r1
    14b4:	37 c0       	rjmp	.+110    	; 0x1524 <DIO_Set_Pin_Direction+0xde>
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 f0       	breq	.+36     	; 0x14de <DIO_Set_Pin_Direction+0x98>
    14ba:	28 f0       	brcs	.+10     	; 0x14c6 <DIO_Set_Pin_Direction+0x80>
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	d9 f0       	breq	.+54     	; 0x14f6 <DIO_Set_Pin_Direction+0xb0>
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	29 f1       	breq	.+74     	; 0x150e <DIO_Set_Pin_Direction+0xc8>
    14c4:	08 95       	ret
    14c6:	2a b3       	in	r18, 0x1a	; 26
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_Set_Pin_Direction+0x8c>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	6a 95       	dec	r22
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_Set_Pin_Direction+0x88>
    14d6:	80 95       	com	r24
    14d8:	82 23       	and	r24, r18
    14da:	8a bb       	out	0x1a, r24	; 26
    14dc:	08 95       	ret
    14de:	27 b3       	in	r18, 0x17	; 23
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_Set_Pin_Direction+0xa4>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	6a 95       	dec	r22
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_Set_Pin_Direction+0xa0>
    14ee:	80 95       	com	r24
    14f0:	82 23       	and	r24, r18
    14f2:	87 bb       	out	0x17, r24	; 23
    14f4:	08 95       	ret
    14f6:	24 b3       	in	r18, 0x14	; 20
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_Set_Pin_Direction+0xbc>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	6a 95       	dec	r22
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_Set_Pin_Direction+0xb8>
    1506:	80 95       	com	r24
    1508:	82 23       	and	r24, r18
    150a:	84 bb       	out	0x14, r24	; 20
    150c:	08 95       	ret
    150e:	21 b3       	in	r18, 0x11	; 17
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_Set_Pin_Direction+0xd4>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	6a 95       	dec	r22
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_Set_Pin_Direction+0xd0>
    151e:	80 95       	com	r24
    1520:	82 23       	and	r24, r18
    1522:	81 bb       	out	0x11, r24	; 17
    1524:	08 95       	ret

00001526 <DIO_Set_Pin_Output>:
		}
	}
}

void DIO_Set_Pin_Output(PORT port,PIN pin,DIO_VALUE Output){
	if(Output == High){
    1526:	41 30       	cpi	r20, 0x01	; 1
    1528:	a1 f5       	brne	.+104    	; 0x1592 <DIO_Set_Pin_Output+0x6c>
		switch(port){
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	89 f0       	breq	.+34     	; 0x1550 <DIO_Set_Pin_Output+0x2a>
    152e:	28 f0       	brcs	.+10     	; 0x153a <DIO_Set_Pin_Output+0x14>
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	c9 f0       	breq	.+50     	; 0x1566 <DIO_Set_Pin_Output+0x40>
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	11 f1       	breq	.+68     	; 0x157c <DIO_Set_Pin_Output+0x56>
    1538:	08 95       	ret
			case PORTAx: Set(PORTA_Reg,pin) ;break;
    153a:	2b b3       	in	r18, 0x1b	; 27
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_Set_Pin_Output+0x20>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	6a 95       	dec	r22
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_Set_Pin_Output+0x1c>
    154a:	82 2b       	or	r24, r18
    154c:	8b bb       	out	0x1b, r24	; 27
    154e:	08 95       	ret
			case PORTBx: Set(PORTB_Reg,pin) ;break;
    1550:	28 b3       	in	r18, 0x18	; 24
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_Set_Pin_Output+0x36>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	6a 95       	dec	r22
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_Set_Pin_Output+0x32>
    1560:	82 2b       	or	r24, r18
    1562:	88 bb       	out	0x18, r24	; 24
    1564:	08 95       	ret
			case PORTCx: Set(PORTC_Reg,pin) ;break;
    1566:	25 b3       	in	r18, 0x15	; 21
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_Set_Pin_Output+0x4c>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	6a 95       	dec	r22
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_Set_Pin_Output+0x48>
    1576:	82 2b       	or	r24, r18
    1578:	85 bb       	out	0x15, r24	; 21
    157a:	08 95       	ret
			case PORTDx: Set(PORTD_Reg,pin) ;break;
    157c:	22 b3       	in	r18, 0x12	; 18
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_Set_Pin_Output+0x62>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	6a 95       	dec	r22
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_Set_Pin_Output+0x5e>
    158c:	82 2b       	or	r24, r18
    158e:	82 bb       	out	0x12, r24	; 18
    1590:	08 95       	ret
			default:break;
		}
	}
	else if(Output == Low){
    1592:	41 11       	cpse	r20, r1
    1594:	38 c0       	rjmp	.+112    	; 0x1606 <DIO_Set_Pin_Output+0xe0>
		switch(port){
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	91 f0       	breq	.+36     	; 0x15be <DIO_Set_Pin_Output+0x98>
    159a:	28 f0       	brcs	.+10     	; 0x15a6 <DIO_Set_Pin_Output+0x80>
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	d9 f0       	breq	.+54     	; 0x15d6 <DIO_Set_Pin_Output+0xb0>
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	29 f1       	breq	.+74     	; 0x15ee <DIO_Set_Pin_Output+0xc8>
    15a4:	08 95       	ret
			case PORTAx: Clear(PORTA_Reg,pin);break;
    15a6:	2b b3       	in	r18, 0x1b	; 27
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_Set_Pin_Output+0x8c>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	6a 95       	dec	r22
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_Set_Pin_Output+0x88>
    15b6:	80 95       	com	r24
    15b8:	82 23       	and	r24, r18
    15ba:	8b bb       	out	0x1b, r24	; 27
    15bc:	08 95       	ret
			case PORTBx: Clear(PORTB_Reg,pin);break;
    15be:	28 b3       	in	r18, 0x18	; 24
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_Set_Pin_Output+0xa4>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	6a 95       	dec	r22
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_Set_Pin_Output+0xa0>
    15ce:	80 95       	com	r24
    15d0:	82 23       	and	r24, r18
    15d2:	88 bb       	out	0x18, r24	; 24
    15d4:	08 95       	ret
			case PORTCx: Clear(PORTC_Reg,pin);break;
    15d6:	25 b3       	in	r18, 0x15	; 21
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_Set_Pin_Output+0xbc>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	6a 95       	dec	r22
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_Set_Pin_Output+0xb8>
    15e6:	80 95       	com	r24
    15e8:	82 23       	and	r24, r18
    15ea:	85 bb       	out	0x15, r24	; 21
    15ec:	08 95       	ret
			case PORTDx: Clear(PORTD_Reg,pin);break;
    15ee:	22 b3       	in	r18, 0x12	; 18
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_Set_Pin_Output+0xd4>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	6a 95       	dec	r22
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_Set_Pin_Output+0xd0>
    15fe:	80 95       	com	r24
    1600:	82 23       	and	r24, r18
    1602:	82 bb       	out	0x12, r24	; 18
    1604:	08 95       	ret
			default:break;
		}
	}
	else if(Output == Toggle){
    1606:	42 30       	cpi	r20, 0x02	; 2
    1608:	99 f5       	brne	.+102    	; 0x1670 <DIO_Set_Pin_Output+0x14a>
		switch(port){
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	89 f0       	breq	.+34     	; 0x1630 <DIO_Set_Pin_Output+0x10a>
    160e:	28 f0       	brcs	.+10     	; 0x161a <DIO_Set_Pin_Output+0xf4>
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	c9 f0       	breq	.+50     	; 0x1646 <DIO_Set_Pin_Output+0x120>
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	11 f1       	breq	.+68     	; 0x165c <DIO_Set_Pin_Output+0x136>
    1618:	08 95       	ret
			case PORTAx: Toggle(PORTA_Reg,pin);break;
    161a:	2b b3       	in	r18, 0x1b	; 27
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_Set_Pin_Output+0x100>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	6a 95       	dec	r22
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_Set_Pin_Output+0xfc>
    162a:	82 27       	eor	r24, r18
    162c:	8b bb       	out	0x1b, r24	; 27
    162e:	08 95       	ret
			case PORTBx: Toggle(PORTB_Reg,pin);break;
    1630:	28 b3       	in	r18, 0x18	; 24
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_Set_Pin_Output+0x116>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	6a 95       	dec	r22
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_Set_Pin_Output+0x112>
    1640:	82 27       	eor	r24, r18
    1642:	88 bb       	out	0x18, r24	; 24
    1644:	08 95       	ret
			case PORTCx: Toggle(PORTC_Reg,pin);break;
    1646:	25 b3       	in	r18, 0x15	; 21
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_Set_Pin_Output+0x12c>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	6a 95       	dec	r22
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_Set_Pin_Output+0x128>
    1656:	82 27       	eor	r24, r18
    1658:	85 bb       	out	0x15, r24	; 21
    165a:	08 95       	ret
			case PORTDx: Toggle(PORTD_Reg,pin);break;
    165c:	22 b3       	in	r18, 0x12	; 18
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_Set_Pin_Output+0x142>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	6a 95       	dec	r22
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_Set_Pin_Output+0x13e>
    166c:	82 27       	eor	r24, r18
    166e:	82 bb       	out	0x12, r24	; 18
    1670:	08 95       	ret

00001672 <DIO_Get_Pin_Value>:
		}			
	}
}

DIO_VALUE DIO_Get_Pin_Value(PORT port,PIN pin){
	switch(port){
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	79 f0       	breq	.+30     	; 0x1694 <DIO_Get_Pin_Value+0x22>
    1676:	28 f0       	brcs	.+10     	; 0x1682 <DIO_Get_Pin_Value+0x10>
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	a9 f0       	breq	.+42     	; 0x16a6 <DIO_Get_Pin_Value+0x34>
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	e1 f0       	breq	.+56     	; 0x16b8 <DIO_Get_Pin_Value+0x46>
    1680:	24 c0       	rjmp	.+72     	; 0x16ca <DIO_Get_Pin_Value+0x58>
		case PORTAx: return Get(PINA_Reg,pin);break;
    1682:	89 b3       	in	r24, 0x19	; 25
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_Get_Pin_Value+0x1a>
    1688:	95 95       	asr	r25
    168a:	87 95       	ror	r24
    168c:	6a 95       	dec	r22
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_Get_Pin_Value+0x16>
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	08 95       	ret
		case PORTBx: return Get(PINB_Reg,pin);break;
    1694:	86 b3       	in	r24, 0x16	; 22
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_Get_Pin_Value+0x2c>
    169a:	95 95       	asr	r25
    169c:	87 95       	ror	r24
    169e:	6a 95       	dec	r22
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_Get_Pin_Value+0x28>
    16a2:	81 70       	andi	r24, 0x01	; 1
    16a4:	08 95       	ret
		case PORTCx: return Get(PINC_Reg,pin);break;
    16a6:	83 b3       	in	r24, 0x13	; 19
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_Get_Pin_Value+0x3e>
    16ac:	95 95       	asr	r25
    16ae:	87 95       	ror	r24
    16b0:	6a 95       	dec	r22
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_Get_Pin_Value+0x3a>
    16b4:	81 70       	andi	r24, 0x01	; 1
    16b6:	08 95       	ret
		case PORTDx: return Get(PIND_Reg,pin);break;
    16b8:	80 b3       	in	r24, 0x10	; 16
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_Get_Pin_Value+0x50>
    16be:	95 95       	asr	r25
    16c0:	87 95       	ror	r24
    16c2:	6a 95       	dec	r22
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_Get_Pin_Value+0x4c>
    16c6:	81 70       	andi	r24, 0x01	; 1
    16c8:	08 95       	ret
		default:return 0;break;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
	}
    16cc:	08 95       	ret

000016ce <GIE_Enable>:
}

void GIE_Enable()
{
	//General Interrupt Enable by Set bit 7 On SREG Register
	Set(SREG_Reg,7);
    16ce:	8f b7       	in	r24, 0x3f	; 63
    16d0:	80 68       	ori	r24, 0x80	; 128
    16d2:	8f bf       	out	0x3f, r24	; 63
    16d4:	08 95       	ret

000016d6 <GIE_Disable>:
}

void GIE_Disable()
{
	//General Interrupt Disable by Set bit 7 On SREG Register
	Clear(SREG_Reg,7);
    16d6:	8f b7       	in	r24, 0x3f	; 63
    16d8:	8f 77       	andi	r24, 0x7F	; 127
    16da:	8f bf       	out	0x3f, r24	; 63
    16dc:	08 95       	ret

000016de <Timer0_Init>:
	#elif (Timer0_OC0_Pin == Timer_COM_Pin_SET)
	Set(TCCR0_Reg,5);  Set(TCCR0_Reg,4);
	#endif
}
void Timer0_Set_TCNT0_Reg(uint8 value)   {    TCNT0_Reg= value;    }//Timer Register
void Timer0_Set_OCR0_Reg(uint8 value)    {    OCR0_Reg = value;    }//Output Compare Register
    16de:	83 b7       	in	r24, 0x33	; 51
    16e0:	8f 7b       	andi	r24, 0xBF	; 191
    16e2:	83 bf       	out	0x33, r24	; 51
    16e4:	83 b7       	in	r24, 0x33	; 51
    16e6:	87 7f       	andi	r24, 0xF7	; 247
    16e8:	83 bf       	out	0x33, r24	; 51
    16ea:	83 b7       	in	r24, 0x33	; 51
    16ec:	8b 7f       	andi	r24, 0xFB	; 251
    16ee:	83 bf       	out	0x33, r24	; 51
    16f0:	83 b7       	in	r24, 0x33	; 51
    16f2:	8d 7f       	andi	r24, 0xFD	; 253
    16f4:	83 bf       	out	0x33, r24	; 51
    16f6:	83 b7       	in	r24, 0x33	; 51
    16f8:	81 60       	ori	r24, 0x01	; 1
    16fa:	83 bf       	out	0x33, r24	; 51
    16fc:	83 b7       	in	r24, 0x33	; 51
    16fe:	8f 7d       	andi	r24, 0xDF	; 223
    1700:	83 bf       	out	0x33, r24	; 51
    1702:	83 b7       	in	r24, 0x33	; 51
    1704:	8f 7e       	andi	r24, 0xEF	; 239
    1706:	83 bf       	out	0x33, r24	; 51
    1708:	08 95       	ret

0000170a <Timer0_Enable_Overflow_Interrupt>:
void Timer0_Enable_Overflow_Interrupt()  {    Set(TIMSK_Reg,0);    }
    170a:	89 b7       	in	r24, 0x39	; 57
    170c:	81 60       	ori	r24, 0x01	; 1
    170e:	89 bf       	out	0x39, r24	; 57
    1710:	08 95       	ret

00001712 <TWI_Init>:
	TWCR_Reg =   (1<<5)  | (1<<2) |(1<<7);
	while(Get(TWCR_Reg ,7)  == 0);//Wait till Send Successfully(INT_FLAG DOWN)
}
void TWI_Set_My_Address(uint8 Address)
{
	TWAR_Reg = (TWAR_Reg & 0x01) | (Address<<1);
    1712:	8a e0       	ldi	r24, 0x0A	; 10
    1714:	80 b9       	out	0x00, r24	; 0
    1716:	81 b1       	in	r24, 0x01	; 1
    1718:	81 60       	ori	r24, 0x01	; 1
    171a:	81 b9       	out	0x01, r24	; 1
    171c:	81 b1       	in	r24, 0x01	; 1
    171e:	8d 7f       	andi	r24, 0xFD	; 253
    1720:	81 b9       	out	0x01, r24	; 1
    1722:	86 b7       	in	r24, 0x36	; 54
    1724:	84 60       	ori	r24, 0x04	; 4
    1726:	86 bf       	out	0x36, r24	; 54
    1728:	08 95       	ret

0000172a <TWI_Check_Status>:
    172a:	21 b1       	in	r18, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	28 7f       	andi	r18, 0xF8	; 248
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	82 17       	cp	r24, r18
    1734:	93 07       	cpc	r25, r19
    1736:	11 f4       	brne	.+4      	; 0x173c <TWI_Check_Status+0x12>
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	08 95       	ret
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	08 95       	ret

00001740 <TWI_Send_Stop>:
    1740:	84 e9       	ldi	r24, 0x94	; 148
    1742:	86 bf       	out	0x36, r24	; 54
    1744:	08 95       	ret

00001746 <TWI_MSTR_Send_Start>:
    1746:	84 ea       	ldi	r24, 0xA4	; 164
    1748:	86 bf       	out	0x36, r24	; 54
    174a:	06 b6       	in	r0, 0x36	; 54
    174c:	07 fe       	sbrs	r0, 7
    174e:	fd cf       	rjmp	.-6      	; 0x174a <TWI_MSTR_Send_Start+0x4>
    1750:	08 95       	ret

00001752 <TWI_Receive_Data>:
}
uint8 TWI_Receive_Data(uint8 ACK_State){
	if(ACK_State == 1)
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	19 f4       	brne	.+6      	; 0x175c <TWI_Receive_Data+0xa>
	Set(TWCR_Reg,6);		//SEND ACK IF Input is 1 for ACK
    1756:	86 b7       	in	r24, 0x36	; 54
    1758:	80 64       	ori	r24, 0x40	; 64
    175a:	86 bf       	out	0x36, r24	; 54
	// 	Set(TWCR_Reg,2);			//Enable TWI
	// 	Set(TWCR_Reg,7);			//Set Interrupt Flag to Clear it
	TWCR_Reg =   (1<<7)| (1<<2);
    175c:	84 e8       	ldi	r24, 0x84	; 132
    175e:	86 bf       	out	0x36, r24	; 54
	while(Get(TWCR_Reg,7)== 0);	//Wait for flag to be 0
    1760:	06 b6       	in	r0, 0x36	; 54
    1762:	07 fe       	sbrs	r0, 7
    1764:	fd cf       	rjmp	.-6      	; 0x1760 <TWI_Receive_Data+0xe>
	return TWDR_Reg;			//Send back DATA Received Value
    1766:	83 b1       	in	r24, 0x03	; 3
}
    1768:	08 95       	ret

0000176a <TWI_Send_Data>:
void TWI_Send_Data(uint8 Data){
	//TWCR_Reg =0;
	TWDR_Reg = Data;
    176a:	83 b9       	out	0x03, r24	; 3
	//Set(TWCR_Reg,2);// Enable TWI
	//Set(TWCR_Reg,7);// Clear Interrupt Flag
	//TWCR_Reg = 0;
	TWCR_Reg =   (1<<7)| (1<<2);
    176c:	84 e8       	ldi	r24, 0x84	; 132
    176e:	86 bf       	out	0x36, r24	; 54
	while(Get(TWCR_Reg,7)== 0);	//Wait for flag to be 0
    1770:	06 b6       	in	r0, 0x36	; 54
    1772:	07 fe       	sbrs	r0, 7
    1774:	fd cf       	rjmp	.-6      	; 0x1770 <TWI_Send_Data+0x6>
    1776:	08 95       	ret

00001778 <UART_Enable_RX_Interrupt>:
}
uint32 UART_Recieve_Number_Polling_32(void){
	uint32 Number;
	Number = 0;
	return Number;
}
    1778:	8a b1       	in	r24, 0x0a	; 10
    177a:	80 68       	ori	r24, 0x80	; 128
    177c:	8a b9       	out	0x0a, r24	; 10
    177e:	08 95       	ret

00001780 <UART_Init>:
    1780:	8a b1       	in	r24, 0x0a	; 10
    1782:	8b 7f       	andi	r24, 0xFB	; 251
    1784:	8a b9       	out	0x0a, r24	; 10
    1786:	80 b5       	in	r24, 0x20	; 32
    1788:	84 60       	ori	r24, 0x04	; 4
    178a:	80 bd       	out	0x20, r24	; 32
    178c:	80 b5       	in	r24, 0x20	; 32
    178e:	82 60       	ori	r24, 0x02	; 2
    1790:	80 bd       	out	0x20, r24	; 32
    1792:	80 b5       	in	r24, 0x20	; 32
    1794:	8f 7b       	andi	r24, 0xBF	; 191
    1796:	80 bd       	out	0x20, r24	; 32
    1798:	80 b5       	in	r24, 0x20	; 32
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	80 bd       	out	0x20, r24	; 32
    179e:	80 b5       	in	r24, 0x20	; 32
    17a0:	8f 7d       	andi	r24, 0xDF	; 223
    17a2:	80 bd       	out	0x20, r24	; 32
    17a4:	80 b5       	in	r24, 0x20	; 32
    17a6:	8f 7e       	andi	r24, 0xEF	; 239
    17a8:	80 bd       	out	0x20, r24	; 32
    17aa:	80 b5       	in	r24, 0x20	; 32
    17ac:	87 7f       	andi	r24, 0xF7	; 247
    17ae:	80 bd       	out	0x20, r24	; 32
    17b0:	10 bc       	out	0x20, r1	; 32
    17b2:	87 e6       	ldi	r24, 0x67	; 103
    17b4:	89 b9       	out	0x09, r24	; 9
    17b6:	8a b1       	in	r24, 0x0a	; 10
    17b8:	80 61       	ori	r24, 0x10	; 16
    17ba:	8a b9       	out	0x0a, r24	; 10
    17bc:	8a b1       	in	r24, 0x0a	; 10
    17be:	88 60       	ori	r24, 0x08	; 8
    17c0:	8a b9       	out	0x0a, r24	; 10
    17c2:	8a b1       	in	r24, 0x0a	; 10
    17c4:	80 68       	ori	r24, 0x80	; 128
    17c6:	8a b9       	out	0x0a, r24	; 10
    17c8:	08 95       	ret

000017ca <UART_Send_Byte_Polling_8>:
    17ca:	5d 9b       	sbis	0x0b, 5	; 11
    17cc:	fe cf       	rjmp	.-4      	; 0x17ca <UART_Send_Byte_Polling_8>
    17ce:	8c b9       	out	0x0c, r24	; 12
    17d0:	08 95       	ret

000017d2 <UART_Send_String_Polling_8>:
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	8c 01       	movw	r16, r24
    17da:	c0 e0       	ldi	r28, 0x00	; 0
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <UART_Send_String_Polling_8+0x12>
    17de:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <UART_Send_Byte_Polling_8>
    17e2:	cf 5f       	subi	r28, 0xFF	; 255
    17e4:	f8 01       	movw	r30, r16
    17e6:	ec 0f       	add	r30, r28
    17e8:	f1 1d       	adc	r31, r1
    17ea:	80 81       	ld	r24, Z
    17ec:	81 11       	cpse	r24, r1
    17ee:	f7 cf       	rjmp	.-18     	; 0x17de <UART_Send_String_Polling_8+0xc>
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <UART_Receive_Byte_8>:
    17f8:	5f 9b       	sbis	0x0b, 7	; 11
    17fa:	fe cf       	rjmp	.-4      	; 0x17f8 <UART_Receive_Byte_8>
    17fc:	8c b1       	in	r24, 0x0c	; 12
    17fe:	08 95       	ret

00001800 <UART_Recieve_String_8>:
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	7c 01       	movw	r14, r24
    180c:	10 e0       	ldi	r17, 0x00	; 0
    180e:	e7 01       	movw	r28, r14
    1810:	c1 0f       	add	r28, r17
    1812:	d1 1d       	adc	r29, r1
    1814:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <UART_Receive_Byte_8>
    1818:	88 83       	st	Y, r24
    181a:	8d 30       	cpi	r24, 0x0D	; 13
    181c:	09 f4       	brne	.+2      	; 0x1820 <UART_Recieve_String_8+0x20>
    181e:	18 82       	st	Y, r1
    1820:	88 81       	ld	r24, Y
    1822:	8a 30       	cpi	r24, 0x0A	; 10
    1824:	11 f4       	brne	.+4      	; 0x182a <UART_Recieve_String_8+0x2a>
    1826:	18 82       	st	Y, r1
    1828:	02 c0       	rjmp	.+4      	; 0x182e <UART_Recieve_String_8+0x2e>
    182a:	1f 5f       	subi	r17, 0xFF	; 255
    182c:	f0 cf       	rjmp	.-32     	; 0x180e <UART_Recieve_String_8+0xe>
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	08 95       	ret

0000183a <UART_Show_Request_UserID>:




void UART_Show_Request_UserID(){
	UART_Send_String_Polling_8(" Enter UserID:(1~99)\n");
    183a:	80 ed       	ldi	r24, 0xD0	; 208
    183c:	93 e0       	ldi	r25, 0x03	; 3
    183e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    1842:	08 95       	ret

00001844 <UART_Show_Request_Password>:
}
void UART_Show_Request_Password(){
	UART_Send_String_Polling_8(" Enter Password:\n");
    1844:	86 ee       	ldi	r24, 0xE6	; 230
    1846:	93 e0       	ldi	r25, 0x03	; 3
    1848:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    184c:	08 95       	ret

0000184e <UART_Show_Invalid>:
}
void UART_Show_Invalid(){
	UART_Send_String_Polling_8("Invalid input  try Again \n");
    184e:	88 ef       	ldi	r24, 0xF8	; 248
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    1856:	08 95       	ret

00001858 <UART_Show_MainMenu>:
}
void UART_Show_MainMenu(){
	UART_Send_String_Polling_8("Choose Option: \n");
    1858:	83 e1       	ldi	r24, 0x13	; 19
    185a:	94 e0       	ldi	r25, 0x04	; 4
    185c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(1) Control Led \n");
    1860:	84 e2       	ldi	r24, 0x24	; 36
    1862:	94 e0       	ldi	r25, 0x04	; 4
    1864:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(2) Control AC \n");
    1868:	86 e3       	ldi	r24, 0x36	; 54
    186a:	94 e0       	ldi	r25, 0x04	; 4
    186c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(3) Control Door \n");
    1870:	87 e4       	ldi	r24, 0x47	; 71
    1872:	94 e0       	ldi	r25, 0x04	; 4
    1874:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(4) Control Dimmer \n");
    1878:	8a e5       	ldi	r24, 0x5A	; 90
    187a:	94 e0       	ldi	r25, 0x04	; 4
    187c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(5) Show Users list \n");
    1880:	8f e6       	ldi	r24, 0x6F	; 111
    1882:	94 e0       	ldi	r25, 0x04	; 4
    1884:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(6) Create New User \n");
    1888:	85 e8       	ldi	r24, 0x85	; 133
    188a:	94 e0       	ldi	r25, 0x04	; 4
    188c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(7) Delete User \n");
    1890:	8b e9       	ldi	r24, 0x9B	; 155
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    1898:	08 95       	ret

0000189a <UART_Show_Control_Leds>:
}
void UART_Show_Control_Leds(){
	UART_Send_String_Polling_8("(1) Toggle Led 1 \n");
    189a:	8d ea       	ldi	r24, 0xAD	; 173
    189c:	94 e0       	ldi	r25, 0x04	; 4
    189e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(2) Toggle Led 2 \n");
    18a2:	80 ec       	ldi	r24, 0xC0	; 192
    18a4:	94 e0       	ldi	r25, 0x04	; 4
    18a6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(3) Toggle Led 3 \n");
    18aa:	83 ed       	ldi	r24, 0xD3	; 211
    18ac:	94 e0       	ldi	r25, 0x04	; 4
    18ae:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(4) Toggle Led 4 \n");
    18b2:	86 ee       	ldi	r24, 0xE6	; 230
    18b4:	94 e0       	ldi	r25, 0x04	; 4
    18b6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(5) Toggle Led 5 \n");
    18ba:	89 ef       	ldi	r24, 0xF9	; 249
    18bc:	94 e0       	ldi	r25, 0x04	; 4
    18be:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(0) Back \n");
    18c2:	8c e0       	ldi	r24, 0x0C	; 12
    18c4:	95 e0       	ldi	r25, 0x05	; 5
    18c6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    18ca:	08 95       	ret

000018cc <UART_Show_Control_AC>:
}
void UART_Show_Control_AC(){
	UART_Send_String_Polling_8("(1) AC Auto \n");
    18cc:	87 e1       	ldi	r24, 0x17	; 23
    18ce:	95 e0       	ldi	r25, 0x05	; 5
    18d0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(2) AC Manual Turn Off \n");
    18d4:	85 e2       	ldi	r24, 0x25	; 37
    18d6:	95 e0       	ldi	r25, 0x05	; 5
    18d8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(3) AC Manual Turn On  \n");
    18dc:	8e e3       	ldi	r24, 0x3E	; 62
    18de:	95 e0       	ldi	r25, 0x05	; 5
    18e0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(0) Back \n");
    18e4:	8c e0       	ldi	r24, 0x0C	; 12
    18e6:	95 e0       	ldi	r25, 0x05	; 5
    18e8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    18ec:	08 95       	ret

000018ee <UART_Show_Control_Door>:
}
void UART_Show_Control_Door(){
	UART_Send_String_Polling_8("(1) Open Door Lock \n");
    18ee:	87 e5       	ldi	r24, 0x57	; 87
    18f0:	95 e0       	ldi	r25, 0x05	; 5
    18f2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(2) Close Door Lock \n");
    18f6:	8c e6       	ldi	r24, 0x6C	; 108
    18f8:	95 e0       	ldi	r25, 0x05	; 5
    18fa:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(0) Back \n");
    18fe:	8c e0       	ldi	r24, 0x0C	; 12
    1900:	95 e0       	ldi	r25, 0x05	; 5
    1902:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    1906:	08 95       	ret

00001908 <UART_Show_Control_Dimmer>:

}
void UART_Show_Control_Dimmer(){
	UART_Send_String_Polling_8("(1) Dimmer Up \n");
    1908:	82 e8       	ldi	r24, 0x82	; 130
    190a:	95 e0       	ldi	r25, 0x05	; 5
    190c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(2) Dimmer Down \n");
    1910:	82 e9       	ldi	r24, 0x92	; 146
    1912:	95 e0       	ldi	r25, 0x05	; 5
    1914:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(3) Dimmer Off \n");
    1918:	84 ea       	ldi	r24, 0xA4	; 164
    191a:	95 e0       	ldi	r25, 0x05	; 5
    191c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(4) Dimmer On \n");
    1920:	85 eb       	ldi	r24, 0xB5	; 181
    1922:	95 e0       	ldi	r25, 0x05	; 5
    1924:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_String_Polling_8("(0) Back \n");
    1928:	8c e0       	ldi	r24, 0x0C	; 12
    192a:	95 e0       	ldi	r25, 0x05	; 5
    192c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    1930:	08 95       	ret

00001932 <UART_Show_User_List>:

}

void UART_Show_User_List(){
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	28 97       	sbiw	r28, 0x08	; 8
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
	sint8 Usernamex[8];
	for(uint8 id = 1;id<MAX_Users_Count;id++){
    1948:	11 e0       	ldi	r17, 0x01	; 1
    194a:	21 c0       	rjmp	.+66     	; 0x198e <UART_Show_User_List+0x5c>
		if(EEPROM_Read_UserID_Exist(id)){
    194c:	81 2f       	mov	r24, r17
    194e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <EEPROM_Read_UserID_Exist>
    1952:	88 23       	and	r24, r24
    1954:	d9 f0       	breq	.+54     	; 0x198c <UART_Show_User_List+0x5a>
			UART_Send_String_Polling_8("UserID: ");
    1956:	85 ec       	ldi	r24, 0xC5	; 197
    1958:	95 e0       	ldi	r25, 0x05	; 5
    195a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			UART_Send_Byte_Polling_8(id + 48);
    195e:	80 e3       	ldi	r24, 0x30	; 48
    1960:	81 0f       	add	r24, r17
    1962:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <UART_Send_Byte_Polling_8>
			UART_Send_String_Polling_8(" Username: ");
    1966:	8e eb       	ldi	r24, 0xBE	; 190
    1968:	93 e0       	ldi	r25, 0x03	; 3
    196a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			EEPROM_Read_8Data(id,Usernamex,2);
    196e:	42 e0       	ldi	r20, 0x02	; 2
    1970:	be 01       	movw	r22, r28
    1972:	6f 5f       	subi	r22, 0xFF	; 255
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	81 2f       	mov	r24, r17
    1978:	0e 94 dd 02 	call	0x5ba	; 0x5ba <EEPROM_Read_8Data>
			UART_Send_String_Polling_8(Usernamex);
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
			UART_Send_String_Polling_8("\n");
    1984:	85 e5       	ldi	r24, 0x55	; 85
    1986:	95 e0       	ldi	r25, 0x05	; 5
    1988:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>

}

void UART_Show_User_List(){
	sint8 Usernamex[8];
	for(uint8 id = 1;id<MAX_Users_Count;id++){
    198c:	1f 5f       	subi	r17, 0xFF	; 255
    198e:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <MAX_Users_Count>
    1992:	18 17       	cp	r17, r24
    1994:	d8 f2       	brcs	.-74     	; 0x194c <UART_Show_User_List+0x1a>
			EEPROM_Read_8Data(id,Usernamex,2);
			UART_Send_String_Polling_8(Usernamex);
			UART_Send_String_Polling_8("\n");
 		}
	}
}
    1996:	28 96       	adiw	r28, 0x08	; 8
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	08 95       	ret

000019aa <UART_Show_Delete_ID>:


void UART_Show_Delete_ID(){
	UART_Send_String_Polling_8("Enter UserID To Delete : \n");
    19aa:	8e ec       	ldi	r24, 0xCE	; 206
    19ac:	95 e0       	ldi	r25, 0x05	; 5
    19ae:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    19b2:	08 95       	ret

000019b4 <UART_Show_Request_NewUsername>:
}
void UART_Show_Request_NewUsername(){
	UART_Send_String_Polling_8("Enter The NewUser Username: \n");
    19b4:	89 ee       	ldi	r24, 0xE9	; 233
    19b6:	95 e0       	ldi	r25, 0x05	; 5
    19b8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    19bc:	08 95       	ret

000019be <UART_Show_Request_NewUserPassword>:
}
void UART_Show_Request_NewUserPassword(){
	UART_Send_String_Polling_8("Enter The NewUser Password: \n");
    19be:	87 e0       	ldi	r24, 0x07	; 7
    19c0:	96 e0       	ldi	r25, 0x06	; 6
    19c2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    19c6:	08 95       	ret

000019c8 <UART_Logged_OFF>:
}

void UART_Logged_OFF(){
	UART_Send_String_Polling_8("Logged off Success! \n");
    19c8:	85 e2       	ldi	r24, 0x25	; 37
    19ca:	96 e0       	ldi	r25, 0x06	; 6
    19cc:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Show_Request_UserID();
    19d0:	0e 94 1d 0c 	call	0x183a	; 0x183a <UART_Show_Request_UserID>
    19d4:	08 95       	ret

000019d6 <UART_Choice_Handler_1>:
}
void UART_Choice_Handler_1(uint8 g_choice_1){
	switch(g_choice_1){
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	fc 01       	movw	r30, r24
    19da:	31 97       	sbiw	r30, 0x01	; 1
    19dc:	e8 30       	cpi	r30, 0x08	; 8
    19de:	f1 05       	cpc	r31, r1
    19e0:	d8 f4       	brcc	.+54     	; 0x1a18 <UART_Choice_Handler_1+0x42>
    19e2:	ef 5c       	subi	r30, 0xCF	; 207
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__tablejump2__>
		case 1:UART_Show_Control_Leds();break;		//NEXT EXIST
    19ea:	0e 94 4d 0c 	call	0x189a	; 0x189a <UART_Show_Control_Leds>
    19ee:	08 95       	ret
		case 2:UART_Show_Control_AC();	break;		//NEXT EXIST
    19f0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <UART_Show_Control_AC>
    19f4:	08 95       	ret
		case 3:UART_Show_Control_Door();break;		//NEXT EXIST
    19f6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_Show_Control_Door>
    19fa:	08 95       	ret
		case 4:UART_Show_Control_Dimmer();break;		//NEXT EXIST
    19fc:	0e 94 84 0c 	call	0x1908	; 0x1908 <UART_Show_Control_Dimmer>
    1a00:	08 95       	ret
		case 5:UART_Show_User_List();break;				// NO NEXT
    1a02:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_Show_User_List>
    1a06:	08 95       	ret
		case 6:UART_Show_Request_NewUsername();break;	//NEXT EXIST
    1a08:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <UART_Show_Request_NewUsername>
    1a0c:	08 95       	ret
		case 7:UART_Show_Delete_ID();break;				//NEXT EXIST
    1a0e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <UART_Show_Delete_ID>
    1a12:	08 95       	ret
		case 8:UART_Logged_OFF();break;					//NO NEXT
    1a14:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <UART_Logged_OFF>
    1a18:	08 95       	ret

00001a1a <UART_Show_Login_Failed>:
	}
}


void UART_Show_Login_Failed(){
	UART_Send_String_Polling_8("Login Failed, Try again! ");
    1a1a:	8b e3       	ldi	r24, 0x3B	; 59
    1a1c:	96 e0       	ldi	r25, 0x06	; 6
    1a1e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
	UART_Send_Byte_Polling_8(FailCount + 48);
    1a22:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <FailCount>
    1a26:	80 5d       	subi	r24, 0xD0	; 208
    1a28:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <UART_Send_Byte_Polling_8>
	UART_Send_String_Polling_8(" \n");
    1a2c:	84 e5       	ldi	r24, 0x54	; 84
    1a2e:	95 e0       	ldi	r25, 0x05	; 5
    1a30:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <UART_Send_String_Polling_8>
    1a34:	08 95       	ret

00001a36 <__tablejump2__>:
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	05 90       	lpm	r0, Z+
    1a3c:	f4 91       	lpm	r31, Z
    1a3e:	e0 2d       	mov	r30, r0
    1a40:	09 94       	ijmp

00001a42 <atoi>:
    1a42:	fc 01       	movw	r30, r24
    1a44:	88 27       	eor	r24, r24
    1a46:	99 27       	eor	r25, r25
    1a48:	e8 94       	clt
    1a4a:	21 91       	ld	r18, Z+
    1a4c:	20 32       	cpi	r18, 0x20	; 32
    1a4e:	e9 f3       	breq	.-6      	; 0x1a4a <atoi+0x8>
    1a50:	29 30       	cpi	r18, 0x09	; 9
    1a52:	10 f0       	brcs	.+4      	; 0x1a58 <atoi+0x16>
    1a54:	2e 30       	cpi	r18, 0x0E	; 14
    1a56:	c8 f3       	brcs	.-14     	; 0x1a4a <atoi+0x8>
    1a58:	2b 32       	cpi	r18, 0x2B	; 43
    1a5a:	41 f0       	breq	.+16     	; 0x1a6c <atoi+0x2a>
    1a5c:	2d 32       	cpi	r18, 0x2D	; 45
    1a5e:	39 f4       	brne	.+14     	; 0x1a6e <atoi+0x2c>
    1a60:	68 94       	set
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <atoi+0x2a>
    1a64:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulhi_const_10>
    1a68:	82 0f       	add	r24, r18
    1a6a:	91 1d       	adc	r25, r1
    1a6c:	21 91       	ld	r18, Z+
    1a6e:	20 53       	subi	r18, 0x30	; 48
    1a70:	2a 30       	cpi	r18, 0x0A	; 10
    1a72:	c0 f3       	brcs	.-16     	; 0x1a64 <atoi+0x22>
    1a74:	1e f4       	brtc	.+6      	; 0x1a7c <atoi+0x3a>
    1a76:	90 95       	com	r25
    1a78:	81 95       	neg	r24
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	08 95       	ret

00001a7e <strcmp>:
    1a7e:	fb 01       	movw	r30, r22
    1a80:	dc 01       	movw	r26, r24
    1a82:	8d 91       	ld	r24, X+
    1a84:	01 90       	ld	r0, Z+
    1a86:	80 19       	sub	r24, r0
    1a88:	01 10       	cpse	r0, r1
    1a8a:	d9 f3       	breq	.-10     	; 0x1a82 <strcmp+0x4>
    1a8c:	99 0b       	sbc	r25, r25
    1a8e:	08 95       	ret

00001a90 <strcpy>:
    1a90:	fb 01       	movw	r30, r22
    1a92:	dc 01       	movw	r26, r24
    1a94:	01 90       	ld	r0, Z+
    1a96:	0d 92       	st	X+, r0
    1a98:	00 20       	and	r0, r0
    1a9a:	e1 f7       	brne	.-8      	; 0x1a94 <strcpy+0x4>
    1a9c:	08 95       	ret

00001a9e <__mulhi_const_10>:
    1a9e:	7a e0       	ldi	r23, 0x0A	; 10
    1aa0:	97 9f       	mul	r25, r23
    1aa2:	90 2d       	mov	r25, r0
    1aa4:	87 9f       	mul	r24, r23
    1aa6:	80 2d       	mov	r24, r0
    1aa8:	91 0d       	add	r25, r1
    1aaa:	11 24       	eor	r1, r1
    1aac:	08 95       	ret

00001aae <_exit>:
    1aae:	f8 94       	cli

00001ab0 <__stop_program>:
    1ab0:	ff cf       	rjmp	.-2      	; 0x1ab0 <__stop_program>
