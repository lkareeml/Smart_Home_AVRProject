
Smart_Home_D66.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000482  00800060  00000f38  00000fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  008004e2  008004e2  0000144e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e07  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b6  00000000  00000000  000058c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000244d  00000000  00000000  00006a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d68  00000000  00000000  00008ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000148b  00000000  00000000  00009c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e8c  00000000  00000000  0000b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  0000cf47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3e       	cpi	r26, 0xE2	; 226
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	25 e0       	ldi	r18, 0x05	; 5
  78:	a2 ee       	ldi	r26, 0xE2	; 226
  7a:	b4 e0       	ldi	r27, 0x04	; 4
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 31       	cpi	r26, 0x13	; 19
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 04 	call	0x97e	; 0x97e <main>
  8a:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AC_Initialization>:
uint8 AC_State_Auto = 0;
uint8 AC_State = 0;

void AC_Initialization()
{
	DIO_Set_Pin_Direction(AC_Port,AC_Pin,Out);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
  9c:	08 95       	ret

0000009e <AC_On>:
}
void AC_On(){
	DIO_Set_Pin_Output(AC_Port,AC_Pin,High);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
  a8:	08 95       	ret

000000aa <AC_Off>:
}
void AC_Off(){
	DIO_Set_Pin_Output(AC_Port,AC_Pin,Low);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
  b4:	08 95       	ret

000000b6 <AC_Feedback>:

void AC_Feedback(uint8 New_Feed){
	//1 Means Turn Automatic AC
	//2 Means Turn Off AC Manual
	//3 Means Turn On AC Manual
	switch(New_Feed){
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	c9 f0       	breq	.+50     	; 0xec <AC_Feedback+0x36>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	71 f1       	breq	.+92     	; 0x11a <AC_Feedback+0x64>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	09 f0       	breq	.+2      	; 0xc4 <AC_Feedback+0xe>
  c2:	43 c0       	rjmp	.+134    	; 0x14a <AC_Feedback+0x94>
		case 1:
			switch(AC_State_Auto){
  c4:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <AC_State_Auto>
  c8:	88 23       	and	r24, r24
  ca:	19 f0       	breq	.+6      	; 0xd2 <AC_Feedback+0x1c>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	49 f0       	breq	.+18     	; 0xe2 <AC_Feedback+0x2c>
  d0:	08 95       	ret
				case 0 :
				AC_State_Auto = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <AC_State_Auto>
				UART_Send_String_Polling_8("AC Auto Success!");
  d8:	81 e8       	ldi	r24, 0x81	; 129
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
				break;
  e0:	08 95       	ret
				case 1:
				UART_Send_String_Polling_8("AC is Already Auto!");
  e2:	82 e9       	ldi	r24, 0x92	; 146
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
				break;
  ea:	08 95       	ret
			}
			break;
		case 2:
			switch(AC_State){
  ec:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <__data_end>
  f0:	88 23       	and	r24, r24
  f2:	19 f0       	breq	.+6      	; 0xfa <AC_Feedback+0x44>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	31 f0       	breq	.+12     	; 0x104 <AC_Feedback+0x4e>
  f8:	08 95       	ret
				case 0 :
					UART_Send_String_Polling_8("AC is Already Closed!");
  fa:	86 ea       	ldi	r24, 0xA6	; 166
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					break;
 102:	08 95       	ret
				case 1:
					AC_Off();
 104:	0e 94 55 00 	call	0xaa	; 0xaa <AC_Off>
					AC_State = 0;
 108:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <__data_end>
					AC_State_Auto = 0;
 10c:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <AC_State_Auto>
					UART_Send_String_Polling_8("AC Turned Off Success!");
 110:	8c eb       	ldi	r24, 0xBC	; 188
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					break;
 118:	08 95       	ret
			}
			break;
		case 3:
			switch(AC_State){
 11a:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <__data_end>
 11e:	88 23       	and	r24, r24
 120:	19 f0       	breq	.+6      	; 0x128 <AC_Feedback+0x72>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	69 f0       	breq	.+26     	; 0x140 <AC_Feedback+0x8a>
 126:	08 95       	ret
				case 0 :
					AC_On();
 128:	0e 94 4f 00 	call	0x9e	; 0x9e <AC_On>
					AC_State = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <__data_end>
					AC_State_Auto = 0;
 132:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <AC_State_Auto>
					UART_Send_String_Polling_8("AC Turned On Success!");
 136:	83 ed       	ldi	r24, 0xD3	; 211
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					break;
 13e:	08 95       	ret
				case 1:
					UART_Send_String_Polling_8("AC Already Turned ON!");
 140:	89 ee       	ldi	r24, 0xE9	; 233
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					break;
 148:	08 95       	ret
			}
			break;
		default:UART_Show_Invalid();break;
 14a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_Show_Invalid>
 14e:	08 95       	ret

00000150 <BUZZER_On>:
	DIO_Set_Pin_Output(PORTAx,Pin3,High);
}

void BUZZER_Off()
{
	DIO_Set_Pin_Output(PORTAx,Pin3,Low);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	63 e0       	ldi	r22, 0x03	; 3
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 15a:	08 95       	ret

0000015c <BUZZER_ALARM_TILL_RESET>:
}

void BUZZER_ALARM_TILL_RESET()
{
	GIE_Disable();
 15c:	0e 94 13 06 	call	0xc26	; 0xc26 <GIE_Disable>
	BUZZER_On();
 160:	0e 94 a8 00 	call	0x150	; 0x150 <BUZZER_On>
 164:	ff cf       	rjmp	.-2      	; 0x164 <BUZZER_ALARM_TILL_RESET+0x8>

00000166 <__vector_11>:
	if(G_Dimmer_Value >= 50){
		G_Dimmer_Value--;
	}
}
void Dimmer_On(){
	G_Dimmer_Value = 50;	
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
 188:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <Dimmercounter.1763>
 18c:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <G_Dimmer_Value>
 190:	98 17       	cp	r25, r24
 192:	30 f4       	brcc	.+12     	; 0x1a0 <__vector_11+0x3a>
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	63 e0       	ldi	r22, 0x03	; 3
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <__vector_11+0x48>
 1a0:	98 17       	cp	r25, r24
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <__vector_11+0x48>
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 1ae:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <Dimmercounter.1763>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <Dimmercounter.1763>
 1b8:	8e 3f       	cpi	r24, 0xFE	; 254
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <__vector_11+0x5a>
 1bc:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <Dimmercounter.1763>
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <Dimmer_Init>:
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
 1ec:	0e 94 17 06 	call	0xc2e	; 0xc2e <Timer0_Init>
 1f0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Timer0_Enable_Overflow_Interrupt>
 1f4:	08 95       	ret

000001f6 <Dimmer_Feedback>:
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	e9 f0       	breq	.+58     	; 0x234 <Dimmer_Feedback+0x3e>
 1fa:	18 f4       	brcc	.+6      	; 0x202 <Dimmer_Feedback+0xc>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	31 f0       	breq	.+12     	; 0x20c <Dimmer_Feedback+0x16>
 200:	08 95       	ret
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	51 f1       	breq	.+84     	; 0x25a <Dimmer_Feedback+0x64>
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	d1 f1       	breq	.+116    	; 0x27e <Dimmer_Feedback+0x88>
 20a:	08 95       	ret
 20c:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <G_Dimmer_Value>
 210:	8a 3f       	cpi	r24, 0xFA	; 250
 212:	29 f4       	brne	.+10     	; 0x21e <Dimmer_Feedback+0x28>
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 21c:	08 95       	ret
 21e:	8a 3f       	cpi	r24, 0xFA	; 250
 220:	08 f0       	brcs	.+2      	; 0x224 <Dimmer_Feedback+0x2e>
 222:	3f c0       	rjmp	.+126    	; 0x2a2 <Dimmer_Feedback+0xac>
 224:	8e 5c       	subi	r24, 0xCE	; 206
 226:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <G_Dimmer_Value>
 22a:	8c e0       	ldi	r24, 0x0C	; 12
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 232:	08 95       	ret
 234:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <G_Dimmer_Value>
 238:	81 11       	cpse	r24, r1
 23a:	05 c0       	rjmp	.+10     	; 0x246 <Dimmer_Feedback+0x50>
 23c:	8e e1       	ldi	r24, 0x1E	; 30
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 244:	08 95       	ret
 246:	88 23       	and	r24, r24
 248:	61 f1       	breq	.+88     	; 0x2a2 <Dimmer_Feedback+0xac>
 24a:	82 53       	subi	r24, 0x32	; 50
 24c:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <G_Dimmer_Value>
 250:	8b e2       	ldi	r24, 0x2B	; 43
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 258:	08 95       	ret
 25a:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <G_Dimmer_Value>
 25e:	81 11       	cpse	r24, r1
 260:	05 c0       	rjmp	.+10     	; 0x26c <Dimmer_Feedback+0x76>
 262:	8d e3       	ldi	r24, 0x3D	; 61
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 26a:	08 95       	ret
 26c:	88 23       	and	r24, r24
 26e:	c9 f0       	breq	.+50     	; 0x2a2 <Dimmer_Feedback+0xac>
 270:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <G_Dimmer_Value>
 274:	8a e4       	ldi	r24, 0x4A	; 74
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 27c:	08 95       	ret
 27e:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <G_Dimmer_Value>
 282:	81 11       	cpse	r24, r1
 284:	08 c0       	rjmp	.+16     	; 0x296 <Dimmer_Feedback+0xa0>
 286:	8e 5c       	subi	r24, 0xCE	; 206
 288:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <G_Dimmer_Value>
 28c:	8c e5       	ldi	r24, 0x5C	; 92
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 294:	08 95       	ret
 296:	88 23       	and	r24, r24
 298:	21 f0       	breq	.+8      	; 0x2a2 <Dimmer_Feedback+0xac>
 29a:	8d e6       	ldi	r24, 0x6D	; 109
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 2a2:	08 95       	ret

000002a4 <Dimmer_Off>:
}
void Dimmer_Off(){
	G_Dimmer_Value = 0;
 2a4:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <G_Dimmer_Value>
 2a8:	08 95       	ret

000002aa <Door_Feedback>:
*/

uint8 door_state = 0;// 0 is closed, 1 is open

void Door_Feedback(uint8 New_Feed){
	switch(New_Feed){
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	a9 f0       	breq	.+42     	; 0x2d8 <Door_Feedback+0x2e>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	31 f5       	brne	.+76     	; 0x2fe <Door_Feedback+0x54>
		case 2: 
			switch(door_state)
 2b2:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <door_state>
 2b6:	88 23       	and	r24, r24
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <Door_Feedback+0x16>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	31 f0       	breq	.+12     	; 0x2ca <Door_Feedback+0x20>
 2be:	08 95       	ret
			{
				case 0 :
					UART_Send_String_Polling_8("Door is Already Closed!");
 2c0:	89 e7       	ldi	r24, 0x79	; 121
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					break;
 2c8:	08 95       	ret
				case 1:
					door_state = 0;
 2ca:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <door_state>
					UART_Send_String_Polling_8("Door Closed Success!");
 2ce:	81 e9       	ldi	r24, 0x91	; 145
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					break;
 2d6:	08 95       	ret
			}
			break;
		case 1:
			switch(door_state)
 2d8:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <door_state>
 2dc:	88 23       	and	r24, r24
 2de:	19 f0       	breq	.+6      	; 0x2e6 <Door_Feedback+0x3c>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	49 f0       	breq	.+18     	; 0x2f6 <Door_Feedback+0x4c>
 2e4:	08 95       	ret
			{
				case 0 :
					door_state = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <door_state>
					UART_Send_String_Polling_8("Door Opened Success!");
 2ec:	86 ea       	ldi	r24, 0xA6	; 166
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					break;
 2f4:	08 95       	ret
				case 1:
					
					UART_Send_String_Polling_8("Door is Already Opened!");
 2f6:	8b eb       	ldi	r24, 0xBB	; 187
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 2fe:	08 95       	ret

00000300 <__vector_7>:
			break;	
	}
}

ISR(TIMER1_COMPA_vect) // Timer1 compare match interrupt
{
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	static uint8 counter = 0;
	// Start if counter = 0 by making Servo Pin high
	if(counter==0){DIO_Set_Pin_Output(PORTDx,Pin7,High);}
 322:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <counter.1902>
 326:	81 11       	cpse	r24, r1
 328:	06 c0       	rjmp	.+12     	; 0x336 <__vector_7+0x36>
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	67 e0       	ldi	r22, 0x07	; 7
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 334:	17 c0       	rjmp	.+46     	; 0x364 <__vector_7+0x64>
	else if(counter == 1){
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	51 f4       	brne	.+20     	; 0x34e <__vector_7+0x4e>
		if(door_state == 0){
 33a:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <door_state>
 33e:	81 11       	cpse	r24, r1
 340:	11 c0       	rjmp	.+34     	; 0x364 <__vector_7+0x64>
			DIO_Set_Pin_Output(PORTDx,Pin7,Low);
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	67 e0       	ldi	r22, 0x07	; 7
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 34c:	0b c0       	rjmp	.+22     	; 0x364 <__vector_7+0x64>
		}
	}
	else if(counter == 5){
 34e:	85 30       	cpi	r24, 0x05	; 5
 350:	49 f4       	brne	.+18     	; 0x364 <__vector_7+0x64>
		if(door_state == 1){
 352:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <door_state>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	29 f4       	brne	.+10     	; 0x364 <__vector_7+0x64>
			DIO_Set_Pin_Output(PORTDx,Pin7,Low);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	67 e0       	ldi	r22, 0x07	; 7
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
		}
	}
	if(counter<40){counter++;}
 364:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <counter.1902>
 368:	88 32       	cpi	r24, 0x28	; 40
 36a:	20 f4       	brcc	.+8      	; 0x374 <__vector_7+0x74>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <counter.1902>
 372:	02 c0       	rjmp	.+4      	; 0x378 <__vector_7+0x78>
	else {counter = 0;}
 374:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <counter.1902>
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <Servo_Init>:


void Servo_Init(){
	DIO_Set_Pin_Direction(PORTDx,Pin7,Out);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	67 e0       	ldi	r22, 0x07	; 7
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Output(PORTDx,Pin7,Low);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	67 e0       	ldi	r22, 0x07	; 7
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
	// Set the Prescaler to 8
	// Set WGM12 to enable CTC mode
	TCCR1B_Reg |= (1 << WGM12) | (1 << CS11);
 3ae:	8e b5       	in	r24, 0x2e	; 46
 3b0:	8a 60       	ori	r24, 0x0A	; 10
 3b2:	8e bd       	out	0x2e, r24	; 46
	// Set OCR1A to generate an interrupt every 0.5 ms
	// Set TOP value for 0.5ms period
	// Set OCR1A to 1000
	OCR1AH_Reg = 0x03; // High byte 00000011
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	8b bd       	out	0x2b, r24	; 43
	OCR1AL_Reg = 0xE8; // Low byte 11101000    0000001111101000
 3b8:	88 ee       	ldi	r24, 0xE8	; 232
 3ba:	8a bd       	out	0x2a, r24	; 42
	// Enable Timer/Counter1 Output Compare Match A interrupt
	TIMSK_Reg |= (1 << OCIE1A);
 3bc:	89 b7       	in	r24, 0x39	; 57
 3be:	80 61       	ori	r24, 0x10	; 16
 3c0:	89 bf       	out	0x39, r24	; 57
	GIE_Enable(); // Enable global interrupts
 3c2:	0e 94 0f 06 	call	0xc1e	; 0xc1e <GIE_Enable>
 3c6:	08 95       	ret

000003c8 <EEPROM_Init>:
			EEPROM_Write_Byte(Address,0);
		}
		EEPROM_Write_String((Marker+10),Username);
		return 1;// Means User Successfully Change Password
	}
}
 3c8:	0e 94 31 06 	call	0xc62	; 0xc62 <TWI_Init>
 3cc:	08 95       	ret

000003ce <EEPROM_Read_Byte>:
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	8c 01       	movw	r16, r24
 3d8:	17 70       	andi	r17, 0x07	; 7
 3da:	12 fb       	bst	r17, 2
 3dc:	cc 27       	eor	r28, r28
 3de:	c0 f9       	bld	r28, 0
 3e0:	cc 0f       	add	r28, r28
 3e2:	cc 0f       	add	r28, r28
 3e4:	cc 0f       	add	r28, r28
 3e6:	11 fb       	bst	r17, 1
 3e8:	88 27       	eor	r24, r24
 3ea:	80 f9       	bld	r24, 0
 3ec:	88 0f       	add	r24, r24
 3ee:	88 0f       	add	r24, r24
 3f0:	c8 2b       	or	r28, r24
 3f2:	81 2f       	mov	r24, r17
 3f4:	81 70       	andi	r24, 0x01	; 1
 3f6:	88 0f       	add	r24, r24
 3f8:	c8 2b       	or	r28, r24
 3fa:	c0 6a       	ori	r28, 0xA0	; 160
 3fc:	d1 e0       	ldi	r29, 0x01	; 1
 3fe:	dc 0f       	add	r29, r28
 400:	0e 94 4b 06 	call	0xc96	; 0xc96 <TWI_MSTR_Send_Start>
 404:	88 e0       	ldi	r24, 0x08	; 8
 406:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	31 f5       	brne	.+76     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 40e:	8c 2f       	mov	r24, r28
 410:	0e 94 5d 06 	call	0xcba	; 0xcba <TWI_Send_Data>
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	01 f5       	brne	.+64     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 41e:	80 2f       	mov	r24, r16
 420:	0e 94 5d 06 	call	0xcba	; 0xcba <TWI_Send_Data>
 424:	88 e2       	ldi	r24, 0x28	; 40
 426:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	d1 f4       	brne	.+52     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 42e:	0e 94 4b 06 	call	0xc96	; 0xc96 <TWI_MSTR_Send_Start>
 432:	80 e1       	ldi	r24, 0x10	; 16
 434:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	a9 f4       	brne	.+42     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 43c:	8d 2f       	mov	r24, r29
 43e:	0e 94 5d 06 	call	0xcba	; 0xcba <TWI_Send_Data>
 442:	80 e4       	ldi	r24, 0x40	; 64
 444:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	79 f4       	brne	.+30     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 51 06 	call	0xca2	; 0xca2 <TWI_Receive_Data>
 452:	c8 2f       	mov	r28, r24
 454:	0e 94 48 06 	call	0xc90	; 0xc90 <TWI_Send_Stop>
 458:	09 c0       	rjmp	.+18     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 45a:	c0 e0       	ldi	r28, 0x00	; 0
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	05 c0       	rjmp	.+10     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 462:	c0 e0       	ldi	r28, 0x00	; 0
 464:	03 c0       	rjmp	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 466:	c0 e0       	ldi	r28, 0x00	; 0
 468:	01 c0       	rjmp	.+2      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46a:	c0 e0       	ldi	r28, 0x00	; 0
 46c:	8f e1       	ldi	r24, 0x1F	; 31
 46e:	9e e4       	ldi	r25, 0x4E	; 78
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 476:	00 00       	nop
 478:	8c 2f       	mov	r24, r28
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	08 95       	ret

00000484 <EEPROM_Write_Byte>:
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	d8 2f       	mov	r29, r24
 48c:	16 2f       	mov	r17, r22
 48e:	92 fb       	bst	r25, 2
 490:	88 27       	eor	r24, r24
 492:	80 f9       	bld	r24, 0
 494:	28 2f       	mov	r18, r24
 496:	22 0f       	add	r18, r18
 498:	22 0f       	add	r18, r18
 49a:	22 0f       	add	r18, r18
 49c:	91 fb       	bst	r25, 1
 49e:	88 27       	eor	r24, r24
 4a0:	80 f9       	bld	r24, 0
 4a2:	88 0f       	add	r24, r24
 4a4:	88 0f       	add	r24, r24
 4a6:	82 2b       	or	r24, r18
 4a8:	91 70       	andi	r25, 0x01	; 1
 4aa:	99 0f       	add	r25, r25
 4ac:	98 2b       	or	r25, r24
 4ae:	c9 2f       	mov	r28, r25
 4b0:	c0 6a       	ori	r28, 0xA0	; 160
 4b2:	0e 94 4b 06 	call	0xc96	; 0xc96 <TWI_MSTR_Send_Start>
 4b6:	88 e0       	ldi	r24, 0x08	; 8
 4b8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	01 f5       	brne	.+64     	; 0x500 <EEPROM_Write_Byte+0x7c>
 4c0:	8c 2f       	mov	r24, r28
 4c2:	0e 94 5d 06 	call	0xcba	; 0xcba <TWI_Send_Data>
 4c6:	88 e1       	ldi	r24, 0x18	; 24
 4c8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	c1 f4       	brne	.+48     	; 0x500 <EEPROM_Write_Byte+0x7c>
 4d0:	8d 2f       	mov	r24, r29
 4d2:	0e 94 5d 06 	call	0xcba	; 0xcba <TWI_Send_Data>
 4d6:	88 e2       	ldi	r24, 0x28	; 40
 4d8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 4dc:	88 23       	and	r24, r24
 4de:	81 f0       	breq	.+32     	; 0x500 <EEPROM_Write_Byte+0x7c>
 4e0:	81 2f       	mov	r24, r17
 4e2:	0e 94 5d 06 	call	0xcba	; 0xcba <TWI_Send_Data>
 4e6:	88 e2       	ldi	r24, 0x28	; 40
 4e8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_Check_Status>
 4ec:	88 23       	and	r24, r24
 4ee:	41 f0       	breq	.+16     	; 0x500 <EEPROM_Write_Byte+0x7c>
 4f0:	0e 94 48 06 	call	0xc90	; 0xc90 <TWI_Send_Stop>
 4f4:	8f e1       	ldi	r24, 0x1F	; 31
 4f6:	9e e4       	ldi	r25, 0x4E	; 78
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <EEPROM_Write_Byte+0x74>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <EEPROM_Write_Byte+0x7a>
 4fe:	00 00       	nop
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	08 95       	ret

00000508 <EEPROM_Write_String>:
 508:	ef 92       	push	r14
 50a:	ff 92       	push	r15
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	8c 01       	movw	r16, r24
 514:	7b 01       	movw	r14, r22
 516:	c0 e0       	ldi	r28, 0x00	; 0
 518:	05 c0       	rjmp	.+10     	; 0x524 <EEPROM_Write_String+0x1c>
 51a:	80 0f       	add	r24, r16
 51c:	91 1f       	adc	r25, r17
 51e:	0e 94 42 02 	call	0x484	; 0x484 <EEPROM_Write_Byte>
 522:	cf 5f       	subi	r28, 0xFF	; 255
 524:	8c 2f       	mov	r24, r28
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	f7 01       	movw	r30, r14
 52a:	e8 0f       	add	r30, r24
 52c:	f9 1f       	adc	r31, r25
 52e:	60 81       	ld	r22, Z
 530:	61 11       	cpse	r22, r1
 532:	f3 cf       	rjmp	.-26     	; 0x51a <EEPROM_Write_String+0x12>
 534:	80 0f       	add	r24, r16
 536:	91 1f       	adc	r25, r17
 538:	0e 94 42 02 	call	0x484	; 0x484 <EEPROM_Write_Byte>
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	08 95       	ret

00000548 <EEPROM_Read_String>:
 548:	cf 92       	push	r12
 54a:	df 92       	push	r13
 54c:	ef 92       	push	r14
 54e:	ff 92       	push	r15
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	6c 01       	movw	r12, r24
 558:	7b 01       	movw	r14, r22
 55a:	10 e0       	ldi	r17, 0x00	; 0
 55c:	06 c0       	rjmp	.+12     	; 0x56a <EEPROM_Read_String+0x22>
 55e:	8c 0d       	add	r24, r12
 560:	9d 1d       	adc	r25, r13
 562:	0e 94 e7 01 	call	0x3ce	; 0x3ce <EEPROM_Read_Byte>
 566:	88 83       	st	Y, r24
 568:	1f 5f       	subi	r17, 0xFF	; 255
 56a:	81 2f       	mov	r24, r17
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	e7 01       	movw	r28, r14
 570:	c8 0f       	add	r28, r24
 572:	d9 1f       	adc	r29, r25
 574:	28 81       	ld	r18, Y
 576:	21 11       	cpse	r18, r1
 578:	f2 cf       	rjmp	.-28     	; 0x55e <EEPROM_Read_String+0x16>
 57a:	18 82       	st	Y, r1
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	cf 90       	pop	r12
 58a:	08 95       	ret

0000058c <EEPROM_Read_Data>:


void EEPROM_Read_Data(uint8 UserID,sint8 * Data, uint8 DataType){	
	//DataType = 1 -- Password + 1 //DataType = 2 -- Username +10
	uint16 Marker = 0;
	if(UserID == 99){
 58c:	83 36       	cpi	r24, 0x63	; 99
 58e:	31 f0       	breq	.+12     	; 0x59c <EEPROM_Read_Data+0x10>
		Marker = 10;
	}else{
		Marker = (UserID*20) + 10;
 590:	24 e1       	ldi	r18, 0x14	; 20
 592:	82 9f       	mul	r24, r18
 594:	c0 01       	movw	r24, r0
 596:	11 24       	eor	r1, r1
 598:	0a 96       	adiw	r24, 0x0a	; 10
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <EEPROM_Read_Data+0x14>

void EEPROM_Read_Data(uint8 UserID,sint8 * Data, uint8 DataType){	
	//DataType = 1 -- Password + 1 //DataType = 2 -- Username +10
	uint16 Marker = 0;
	if(UserID == 99){
		Marker = 10;
 59c:	8a e0       	ldi	r24, 0x0A	; 10
 59e:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		Marker = (UserID*20) + 10;
	}
	switch(DataType){
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	19 f0       	breq	.+6      	; 0x5aa <EEPROM_Read_Data+0x1e>
 5a4:	42 30       	cpi	r20, 0x02	; 2
 5a6:	29 f0       	breq	.+10     	; 0x5b2 <EEPROM_Read_Data+0x26>
 5a8:	08 95       	ret
		case 1: EEPROM_Read_String(Marker+1,Data); break;
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0e 94 a4 02 	call	0x548	; 0x548 <EEPROM_Read_String>
 5b0:	08 95       	ret
		case 2: EEPROM_Read_String(Marker+10,Data); break;
 5b2:	0a 96       	adiw	r24, 0x0a	; 10
 5b4:	0e 94 a4 02 	call	0x548	; 0x548 <EEPROM_Read_String>
 5b8:	08 95       	ret

000005ba <EEPROM_Read_UserID_Exist>:
	}
}

uint8 EEPROM_Read_UserID_Exist(uint8 UserID){
	uint16 Marker = 0;
	if(UserID == 99){
 5ba:	83 36       	cpi	r24, 0x63	; 99
 5bc:	31 f0       	breq	.+12     	; 0x5ca <EEPROM_Read_UserID_Exist+0x10>
		Marker = 10;
	}else{
		Marker = (UserID*20) + 10;
 5be:	24 e1       	ldi	r18, 0x14	; 20
 5c0:	82 9f       	mul	r24, r18
 5c2:	c0 01       	movw	r24, r0
 5c4:	11 24       	eor	r1, r1
 5c6:	0a 96       	adiw	r24, 0x0a	; 10
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <EEPROM_Read_UserID_Exist+0x14>
}

uint8 EEPROM_Read_UserID_Exist(uint8 UserID){
	uint16 Marker = 0;
	if(UserID == 99){
		Marker = 10;
 5ca:	8a e0       	ldi	r24, 0x0A	; 10
 5cc:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		Marker = (UserID*20) + 10;
	}	
	return EEPROM_Read_Byte(Marker);
 5ce:	0e 94 e7 01 	call	0x3ce	; 0x3ce <EEPROM_Read_Byte>
}
 5d2:	08 95       	ret

000005d4 <LED_Init_All>:

void LED_0_On(){DIO_Set_Pin_Output(Led0_Port,Led0_Pin,High);}
void LED_1_On(){DIO_Set_Pin_Output(Led1_Port,Led1_Pin,High);}
void LED_2_On(){DIO_Set_Pin_Output(Led2_Port,Led2_Pin,High);}
void LED_3_On(){DIO_Set_Pin_Output(Led3_Port,Led3_Pin,High);}
void LED_4_On(){DIO_Set_Pin_Output(Led4_Port,Led4_Pin,High);}
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	62 e0       	ldi	r22, 0x02	; 2
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	67 e0       	ldi	r22, 0x07	; 7
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	63 e0       	ldi	r22, 0x03	; 3
 5ec:	83 e0       	ldi	r24, 0x03	; 3
 5ee:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	65 e0       	ldi	r22, 0x05	; 5
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
 5fc:	41 e0       	ldi	r20, 0x01	; 1
 5fe:	64 e0       	ldi	r22, 0x04	; 4
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_Set_Pin_Direction>
 610:	08 95       	ret

00000612 <LED_0_Off>:

void LED_0_Off(){DIO_Set_Pin_Output(Led0_Port,Led0_Pin,Low);}
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	62 e0       	ldi	r22, 0x02	; 2
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 61c:	08 95       	ret

0000061e <LED_1_Off>:
void LED_1_Off(){DIO_Set_Pin_Output(Led1_Port,Led1_Pin,Low);}
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	67 e0       	ldi	r22, 0x07	; 7
 622:	82 e0       	ldi	r24, 0x02	; 2
 624:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 628:	08 95       	ret

0000062a <LED_2_Off>:
void LED_2_Off(){DIO_Set_Pin_Output(Led2_Port,Led2_Pin,Low);}
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	63 e0       	ldi	r22, 0x03	; 3
 62e:	83 e0       	ldi	r24, 0x03	; 3
 630:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 634:	08 95       	ret

00000636 <LED_3_Off>:
void LED_3_Off(){DIO_Set_Pin_Output(Led3_Port,Led3_Pin,Low);}
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	65 e0       	ldi	r22, 0x05	; 5
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 640:	08 95       	ret

00000642 <LED_4_Off>:
void LED_4_Off(){DIO_Set_Pin_Output(Led4_Port,Led4_Pin,Low);}
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	64 e0       	ldi	r22, 0x04	; 4
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 64c:	08 95       	ret

0000064e <LED_0_Toggle>:

void LED_0_Toggle(){DIO_Set_Pin_Output(Led0_Port,Led0_Pin,Toggle);}
 64e:	42 e0       	ldi	r20, 0x02	; 2
 650:	62 e0       	ldi	r22, 0x02	; 2
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 658:	08 95       	ret

0000065a <LED_1_Toggle>:
void LED_1_Toggle(){DIO_Set_Pin_Output(Led1_Port,Led1_Pin,Toggle);}
 65a:	42 e0       	ldi	r20, 0x02	; 2
 65c:	67 e0       	ldi	r22, 0x07	; 7
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 664:	08 95       	ret

00000666 <LED_2_Toggle>:
void LED_2_Toggle(){DIO_Set_Pin_Output(Led2_Port,Led2_Pin,Toggle);}
 666:	42 e0       	ldi	r20, 0x02	; 2
 668:	63 e0       	ldi	r22, 0x03	; 3
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 670:	08 95       	ret

00000672 <LED_3_Toggle>:
void LED_3_Toggle(){DIO_Set_Pin_Output(Led3_Port,Led3_Pin,Toggle);}
 672:	42 e0       	ldi	r20, 0x02	; 2
 674:	65 e0       	ldi	r22, 0x05	; 5
 676:	83 e0       	ldi	r24, 0x03	; 3
 678:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 67c:	08 95       	ret

0000067e <LED_4_Toggle>:
void LED_4_Toggle(){DIO_Set_Pin_Output(Led4_Port,Led4_Pin,Toggle);}
 67e:	42 e0       	ldi	r20, 0x02	; 2
 680:	64 e0       	ldi	r22, 0x04	; 4
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_Set_Pin_Output>
 688:	08 95       	ret

0000068a <Smart_Initialization>:
volatile static uint8 AC_State_Auto = 1; // Automatic 1 is on , 0 off allow manual
volatile static uint8 AC_State = 0; // 0 means off 1 means on
	
	
void Smart_Initialization(){
	LED_Init_All();
 68a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED_Init_All>
	LED_1_Off();LED_2_Off();LED_3_Off();LED_4_Off();LED_0_Off();
 68e:	0e 94 0f 03 	call	0x61e	; 0x61e <LED_1_Off>
 692:	0e 94 15 03 	call	0x62a	; 0x62a <LED_2_Off>
 696:	0e 94 1b 03 	call	0x636	; 0x636 <LED_3_Off>
 69a:	0e 94 21 03 	call	0x642	; 0x642 <LED_4_Off>
 69e:	0e 94 09 03 	call	0x612	; 0x612 <LED_0_Off>
	AC_Initialization();
 6a2:	0e 94 49 00 	call	0x92	; 0x92 <AC_Initialization>
	Servo_Init();
 6a6:	0e 94 cd 01 	call	0x39a	; 0x39a <Servo_Init>
	Dimmer_Init();Dimmer_Off();
 6aa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Dimmer_Init>
 6ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Dimmer_Off>
	EEPROM_Init();
 6b2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <EEPROM_Init>
	UART_Init();
 6b6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_Init>
	UART_Enable_RX_Interrupt();// PIE
 6ba:	0e 94 64 06 	call	0xcc8	; 0xcc8 <UART_Enable_RX_Interrupt>
	GIE_Enable(); // GIE
 6be:	0e 94 0f 06 	call	0xc1e	; 0xc1e <GIE_Enable>
 6c2:	08 95       	ret

000006c4 <__vector_13>:
}
ISR(USART_RXC_vect){
 6c4:	1f 92       	push	r1
 6c6:	0f 92       	push	r0
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	0f 92       	push	r0
 6cc:	11 24       	eor	r1, r1
 6ce:	2f 93       	push	r18
 6d0:	3f 93       	push	r19
 6d2:	4f 93       	push	r20
 6d4:	5f 93       	push	r21
 6d6:	6f 93       	push	r22
 6d8:	7f 93       	push	r23
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
 6e2:	ef 93       	push	r30
 6e4:	ff 93       	push	r31
	UART_Recieve_String_8(Buffer);
 6e6:	8b e0       	ldi	r24, 0x0B	; 11
 6e8:	95 e0       	ldi	r25, 0x05	; 5
 6ea:	0e 94 a8 06 	call	0xd50	; 0xd50 <UART_Recieve_String_8>
	UART_Flag_Received = 1;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <UART_Flag_Received>
}
 6f4:	ff 91       	pop	r31
 6f6:	ef 91       	pop	r30
 6f8:	bf 91       	pop	r27
 6fa:	af 91       	pop	r26
 6fc:	9f 91       	pop	r25
 6fe:	8f 91       	pop	r24
 700:	7f 91       	pop	r23
 702:	6f 91       	pop	r22
 704:	5f 91       	pop	r21
 706:	4f 91       	pop	r20
 708:	3f 91       	pop	r19
 70a:	2f 91       	pop	r18
 70c:	0f 90       	pop	r0
 70e:	0f be       	out	0x3f, r0	; 63
 710:	0f 90       	pop	r0
 712:	1f 90       	pop	r1
 714:	18 95       	reti

00000716 <Clear_Buffer>:
void Clear_Buffer(sint8 * Buffer){
 716:	9c 01       	movw	r18, r24
	for(uint8 i = 0; i < sizeof(*Buffer); ++i) Buffer[i] = 0;
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	05 c0       	rjmp	.+10     	; 0x726 <Clear_Buffer+0x10>
 71c:	f9 01       	movw	r30, r18
 71e:	e9 0f       	add	r30, r25
 720:	f1 1d       	adc	r31, r1
 722:	10 82       	st	Z, r1
 724:	9f 5f       	subi	r25, 0xFF	; 255
 726:	99 23       	and	r25, r25
 728:	c9 f3       	breq	.-14     	; 0x71c <Clear_Buffer+0x6>
}
 72a:	08 95       	ret

0000072c <Go_Back>:
void Go_Back(){
	UART_Send_String_Polling_8("Going Back!\n");
 72c:	83 ed       	ldi	r24, 0xD3	; 211
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
	UART_Show_MainMenu();
 734:	0e 94 d4 06 	call	0xda8	; 0xda8 <UART_Show_MainMenu>
	global_Flag--;
 738:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <global_Flag>
 73c:	81 50       	subi	r24, 0x01	; 1
 73e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <global_Flag>
 742:	08 95       	ret

00000744 <Go_Next>:
}

void Go_Next(){
	UART_Flag_Received = 0;
 744:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <UART_Flag_Received>
	Clear_Buffer(Buffer);
 748:	8b e0       	ldi	r24, 0x0B	; 11
 74a:	95 e0       	ldi	r25, 0x05	; 5
 74c:	0e 94 8b 03 	call	0x716	; 0x716 <Clear_Buffer>
	global_Flag++;
 750:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <global_Flag>
 754:	8f 5f       	subi	r24, 0xFF	; 255
 756:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <global_Flag>
 75a:	08 95       	ret

0000075c <Go_To>:
}

void Go_To(uint8 Flag){
 75c:	cf 93       	push	r28
 75e:	c8 2f       	mov	r28, r24
	UART_Flag_Received = 0;
 760:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <UART_Flag_Received>
	Clear_Buffer(Buffer);
 764:	8b e0       	ldi	r24, 0x0B	; 11
 766:	95 e0       	ldi	r25, 0x05	; 5
 768:	0e 94 8b 03 	call	0x716	; 0x716 <Clear_Buffer>
	global_Flag = Flag;
 76c:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <global_Flag>
}
 770:	cf 91       	pop	r28
 772:	08 95       	ret

00000774 <UART_Login_Failed>:
void UART_Login_Failed(){
	UART_Send_String_Polling_8("Login Failed, Try again! ");
 774:	80 ee       	ldi	r24, 0xE0	; 224
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
	UART_Send_Byte_Polling_8(FailCount + 48);
 77c:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <FailCount>
 780:	80 5d       	subi	r24, 0xD0	; 208
 782:	0e 94 8d 06 	call	0xd1a	; 0xd1a <UART_Send_Byte_Polling_8>
	UART_Send_String_Polling_8(" \n");
 786:	87 e1       	ldi	r24, 0x17	; 23
 788:	94 e0       	ldi	r25, 0x04	; 4
 78a:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 78e:	08 95       	ret

00000790 <UART_Process>:
}

void UART_Process(){
 790:	cf 93       	push	r28
	switch(global_Flag){
 792:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <global_Flag>
 796:	83 30       	cpi	r24, 0x03	; 3
 798:	e9 f0       	breq	.+58     	; 0x7d4 <UART_Process+0x44>
 79a:	28 f4       	brcc	.+10     	; 0x7a6 <UART_Process+0x16>
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	51 f0       	breq	.+20     	; 0x7b4 <UART_Process+0x24>
 7a0:	82 30       	cpi	r24, 0x02	; 2
 7a2:	69 f0       	breq	.+26     	; 0x7be <UART_Process+0x2e>
 7a4:	ea c0       	rjmp	.+468    	; 0x97a <__stack+0x11b>
 7a6:	84 30       	cpi	r24, 0x04	; 4
 7a8:	09 f4       	brne	.+2      	; 0x7ac <UART_Process+0x1c>
 7aa:	5b c0       	rjmp	.+182    	; 0x862 <__stack+0x3>
 7ac:	85 30       	cpi	r24, 0x05	; 5
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <UART_Process+0x22>
 7b0:	73 c0       	rjmp	.+230    	; 0x898 <__stack+0x39>
 7b2:	e3 c0       	rjmp	.+454    	; 0x97a <__stack+0x11b>
		case 1://Just Started, User Not loggedIn, user sent anything
			UART_Show_Request_UserID();
 7b4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <UART_Show_Request_UserID>
			Go_Next();
 7b8:	0e 94 a2 03 	call	0x744	; 0x744 <Go_Next>
			break;
 7bc:	de c0       	rjmp	.+444    	; 0x97a <__stack+0x11b>
		case 2: // we got user input for userID now we validate it
			strcpy(UART_UserID,Buffer);// Copy Buffer To USERID
 7be:	6b e0       	ldi	r22, 0x0B	; 11
 7c0:	75 e0       	ldi	r23, 0x05	; 5
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	95 e0       	ldi	r25, 0x05	; 5
 7c6:	0e 94 8b 07 	call	0xf16	; 0xf16 <strcpy>
			UART_Show_Request_Password();
 7ca:	0e 94 ca 06 	call	0xd94	; 0xd94 <UART_Show_Request_Password>
			Go_Next();
 7ce:	0e 94 a2 03 	call	0x744	; 0x744 <Go_Next>
			break;
 7d2:	d3 c0       	rjmp	.+422    	; 0x97a <__stack+0x11b>
		case 3:
//				login Process
			strcpy(UART_Password,Buffer);// Copy Buffer to Password
 7d4:	6b e0       	ldi	r22, 0x0B	; 11
 7d6:	75 e0       	ldi	r23, 0x05	; 5
 7d8:	89 ef       	ldi	r24, 0xF9	; 249
 7da:	94 e0       	ldi	r25, 0x04	; 4
 7dc:	0e 94 8b 07 	call	0xf16	; 0xf16 <strcpy>
//			atoi ascii to integer || itoa integer to ascii
			uint8 X_ID = atoi(UART_UserID);
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	95 e0       	ldi	r25, 0x05	; 5
 7e4:	0e 94 64 07 	call	0xec8	; 0xec8 <atoi>
 7e8:	c8 2f       	mov	r28, r24
			//Check if User Exists
			if(EEPROM_Read_UserID_Exist(X_ID)){
 7ea:	0e 94 dd 02 	call	0x5ba	; 0x5ba <EEPROM_Read_UserID_Exist>
 7ee:	88 23       	and	r24, r24
 7f0:	61 f0       	breq	.+24     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				// Get Username and Password
				EEPROM_Read_Data(X_ID,EEPROM_Username,2);
 7f2:	42 e0       	ldi	r20, 0x02	; 2
 7f4:	68 e6       	ldi	r22, 0x68	; 104
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	8c 2f       	mov	r24, r28
 7fa:	0e 94 c6 02 	call	0x58c	; 0x58c <EEPROM_Read_Data>
				EEPROM_Read_Data(X_ID,EEPROM_Password,1);				
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	60 e6       	ldi	r22, 0x60	; 96
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	8c 2f       	mov	r24, r28
 806:	0e 94 c6 02 	call	0x58c	; 0x58c <EEPROM_Read_Data>
			}
			// User and password Compare!
			if(strcmp(EEPROM_Password,UART_Password)==0){
 80a:	69 ef       	ldi	r22, 0xF9	; 249
 80c:	74 e0       	ldi	r23, 0x04	; 4
 80e:	80 e6       	ldi	r24, 0x60	; 96
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 82 07 	call	0xf04	; 0xf04 <strcmp>
 816:	89 2b       	or	r24, r25
 818:	89 f4       	brne	.+34     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
				UART_Send_String_Polling_8("Welcome Back! ");
 81a:	8a ef       	ldi	r24, 0xFA	; 250
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
				UART_Send_String_Polling_8(EEPROM_Username);
 822:	88 e6       	ldi	r24, 0x68	; 104
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
				UART_Send_String_Polling_8("\n");
 82a:	88 e1       	ldi	r24, 0x18	; 24
 82c:	94 e0       	ldi	r25, 0x04	; 4
 82e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
				UART_Show_MainMenu();
 832:	0e 94 d4 06 	call	0xda8	; 0xda8 <UART_Show_MainMenu>
				login_Fail = 0;
				Go_Next();
 836:	0e 94 a2 03 	call	0x744	; 0x744 <Go_Next>
 83a:	9f c0       	rjmp	.+318    	; 0x97a <__stack+0x11b>
			}else{
//				If Login Fail, Count Failure, Lock Sys
				FailCount++;
 83c:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <FailCount>
 840:	8f 5f       	subi	r24, 0xFF	; 255
 842:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <FailCount>
				if(FailCount >= Max_Failure_Login_Count){
 846:	83 30       	cpi	r24, 0x03	; 3
 848:	30 f0       	brcs	.+12     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
					UART_Send_String_Polling_8("Login Failed, \nSystem Locked! \n");
 84a:	89 e0       	ldi	r24, 0x09	; 9
 84c:	92 e0       	ldi	r25, 0x02	; 2
 84e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					BUZZER_ALARM_TILL_RESET();
 852:	0e 94 ae 00 	call	0x15c	; 0x15c <BUZZER_ALARM_TILL_RESET>
				}
				UART_Login_Failed();
 856:	0e 94 ba 03 	call	0x774	; 0x774 <UART_Login_Failed>
				Go_To(1);
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	0e 94 ae 03 	call	0x75c	; 0x75c <Go_To>
 860:	8c c0       	rjmp	.+280    	; 0x97a <__stack+0x11b>
			}
			break;			
		case 4:
			// User Logged success, Process choice 1 from MainMenu
			strcpy(UART_Choice_1,Buffer);// Copy Buffer To Choice_1
 862:	6b e0       	ldi	r22, 0x0B	; 11
 864:	75 e0       	ldi	r23, 0x05	; 5
 866:	81 ef       	ldi	r24, 0xF1	; 241
 868:	94 e0       	ldi	r25, 0x04	; 4
 86a:	0e 94 8b 07 	call	0xf16	; 0xf16 <strcpy>
			g_choice_1 = atoi(UART_Choice_1);
 86e:	81 ef       	ldi	r24, 0xF1	; 241
 870:	94 e0       	ldi	r25, 0x04	; 4
 872:	0e 94 64 07 	call	0xec8	; 0xec8 <atoi>
 876:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <g_choice_1>
			if(g_choice_1 <= 9){
 87a:	8a 30       	cpi	r24, 0x0A	; 10
 87c:	28 f4       	brcc	.+10     	; 0x888 <__stack+0x29>
				UART_Choice_Handler_1(g_choice_1);
 87e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_Choice_Handler_1>
				Go_Next();
 882:	0e 94 a2 03 	call	0x744	; 0x744 <Go_Next>
				break;
 886:	79 c0       	rjmp	.+242    	; 0x97a <__stack+0x11b>
			}
			UART_Show_Invalid();
 888:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_Show_Invalid>
			UART_Show_MainMenu();
 88c:	0e 94 d4 06 	call	0xda8	; 0xda8 <UART_Show_MainMenu>
			Go_To(4);
 890:	84 e0       	ldi	r24, 0x04	; 4
 892:	0e 94 ae 03 	call	0x75c	; 0x75c <Go_To>
			break;
 896:	71 c0       	rjmp	.+226    	; 0x97a <__stack+0x11b>
		case 5:
			// User Logged success, Process choice 1 from MainMenu
			strcpy(UART_Choice_2,Buffer);// Copy Buffer To Choice_2
 898:	6b e0       	ldi	r22, 0x0B	; 11
 89a:	75 e0       	ldi	r23, 0x05	; 5
 89c:	88 ee       	ldi	r24, 0xE8	; 232
 89e:	94 e0       	ldi	r25, 0x04	; 4
 8a0:	0e 94 8b 07 	call	0xf16	; 0xf16 <strcpy>
			UART_Flag_Received = 0;
 8a4:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <UART_Flag_Received>
			g_choice_2 = (UART_Choice_2[0]-48);
 8a8:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <UART_Choice_2>
 8ac:	80 53       	subi	r24, 0x30	; 48
			//5,8,9 Invalid as no next step
			if(g_choice_1 == 6){
 8ae:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <g_choice_1>
 8b2:	96 30       	cpi	r25, 0x06	; 6
 8b4:	49 f4       	brne	.+18     	; 0x8c8 <__stack+0x69>
				// Create New User Handler 
				// Allow Only Admin To Create User!
				if(UART_UserID[0]-48 != 99){
 8b6:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <UART_UserID>
 8ba:	23 39       	cpi	r18, 0x93	; 147
 8bc:	29 f0       	breq	.+10     	; 0x8c8 <__stack+0x69>
					UART_Send_String_Polling_8("Auth Denied, Ask Admin! \n");
 8be:	89 e2       	ldi	r24, 0x29	; 41
 8c0:	92 e0       	ldi	r25, 0x02	; 2
 8c2:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
					break;//Break from Main Case 5
 8c6:	59 c0       	rjmp	.+178    	; 0x97a <__stack+0x11b>
				}
			}
			
		if(g_choice_1 >= 5 || g_choice_2 > 5){
 8c8:	95 30       	cpi	r25, 0x05	; 5
 8ca:	10 f4       	brcc	.+4      	; 0x8d0 <__stack+0x71>
 8cc:	86 30       	cpi	r24, 0x06	; 6
 8ce:	18 f0       	brcs	.+6      	; 0x8d6 <__stack+0x77>
			UART_Show_Invalid();break;//Break from Main Case 5
 8d0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_Show_Invalid>
 8d4:	52 c0       	rjmp	.+164    	; 0x97a <__stack+0x11b>
		}
		// Handle Invalid Choice Out of range
		if( (g_choice_2 > 9 && g_choice_2 < 0) || (UART_Choice_2[1] != 0) ){
 8d6:	20 91 e9 04 	lds	r18, 0x04E9	; 0x8004e9 <UART_Choice_2+0x1>
 8da:	22 23       	and	r18, r18
 8dc:	59 f0       	breq	.+22     	; 0x8f4 <__stack+0x95>
			UART_Show_Invalid();
 8de:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_Show_Invalid>
			UART_Choice_Handler_1(g_choice_1);
 8e2:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <g_choice_1>
 8e6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_Choice_Handler_1>
			Clear_Buffer(UART_Choice_2);
 8ea:	88 ee       	ldi	r24, 0xE8	; 232
 8ec:	94 e0       	ldi	r25, 0x04	; 4
 8ee:	0e 94 8b 03 	call	0x716	; 0x716 <Clear_Buffer>
			break;
 8f2:	43 c0       	rjmp	.+134    	; 0x97a <__stack+0x11b>
		}
		switch(g_choice_1){
 8f4:	92 30       	cpi	r25, 0x02	; 2
 8f6:	49 f1       	breq	.+82     	; 0x94a <__stack+0xeb>
 8f8:	18 f4       	brcc	.+6      	; 0x900 <__stack+0xa1>
 8fa:	91 30       	cpi	r25, 0x01	; 1
 8fc:	31 f0       	breq	.+12     	; 0x90a <__stack+0xab>
 8fe:	3d c0       	rjmp	.+122    	; 0x97a <__stack+0x11b>
 900:	93 30       	cpi	r25, 0x03	; 3
 902:	59 f1       	breq	.+86     	; 0x95a <__stack+0xfb>
 904:	94 30       	cpi	r25, 0x04	; 4
 906:	91 f1       	breq	.+100    	; 0x96c <__stack+0x10d>
 908:	38 c0       	rjmp	.+112    	; 0x97a <__stack+0x11b>
			case 1:
				// LED Controller
				switch(g_choice_2){
 90a:	82 30       	cpi	r24, 0x02	; 2
 90c:	79 f0       	breq	.+30     	; 0x92c <__stack+0xcd>
 90e:	28 f4       	brcc	.+10     	; 0x91a <__stack+0xbb>
 910:	88 23       	and	r24, r24
 912:	c1 f0       	breq	.+48     	; 0x944 <__stack+0xe5>
 914:	81 30       	cpi	r24, 0x01	; 1
 916:	39 f0       	breq	.+14     	; 0x926 <__stack+0xc7>
 918:	30 c0       	rjmp	.+96     	; 0x97a <__stack+0x11b>
 91a:	84 30       	cpi	r24, 0x04	; 4
 91c:	69 f0       	breq	.+26     	; 0x938 <__stack+0xd9>
 91e:	48 f0       	brcs	.+18     	; 0x932 <__stack+0xd3>
 920:	85 30       	cpi	r24, 0x05	; 5
 922:	69 f0       	breq	.+26     	; 0x93e <__stack+0xdf>
 924:	2a c0       	rjmp	.+84     	; 0x97a <__stack+0x11b>
					case 1: // Toggle Led 0
					LED_0_Toggle();break;
 926:	0e 94 27 03 	call	0x64e	; 0x64e <LED_0_Toggle>
 92a:	27 c0       	rjmp	.+78     	; 0x97a <__stack+0x11b>
					case 2: // Toggle Led 1
					LED_1_Toggle();break;
 92c:	0e 94 2d 03 	call	0x65a	; 0x65a <LED_1_Toggle>
 930:	24 c0       	rjmp	.+72     	; 0x97a <__stack+0x11b>
					case 3: // Toggle Led 2
					LED_2_Toggle();break;
 932:	0e 94 33 03 	call	0x666	; 0x666 <LED_2_Toggle>
 936:	21 c0       	rjmp	.+66     	; 0x97a <__stack+0x11b>
					case 4: // Toggle Led 3
					LED_3_Toggle();break;
 938:	0e 94 39 03 	call	0x672	; 0x672 <LED_3_Toggle>
 93c:	1e c0       	rjmp	.+60     	; 0x97a <__stack+0x11b>
					case 5: // Toggle Led 4
					LED_4_Toggle();break;
 93e:	0e 94 3f 03 	call	0x67e	; 0x67e <LED_4_Toggle>
 942:	1b c0       	rjmp	.+54     	; 0x97a <__stack+0x11b>
					case 0: // Go Back
					Go_Back();break;
 944:	0e 94 96 03 	call	0x72c	; 0x72c <Go_Back>
 948:	18 c0       	rjmp	.+48     	; 0x97a <__stack+0x11b>
				}
				break;
			case 2:
				// Air Conditioner Controller
				if(g_choice_2 == 0) Go_Back();
 94a:	81 11       	cpse	r24, r1
 94c:	03 c0       	rjmp	.+6      	; 0x954 <__stack+0xf5>
 94e:	0e 94 96 03 	call	0x72c	; 0x72c <Go_Back>
 952:	13 c0       	rjmp	.+38     	; 0x97a <__stack+0x11b>
				else AC_Feedback(g_choice_2);
 954:	0e 94 5b 00 	call	0xb6	; 0xb6 <AC_Feedback>
 958:	10 c0       	rjmp	.+32     	; 0x97a <__stack+0x11b>
				// Door Controller
// 				if(UART_UserID[0]-48 != 99){
// 					UART_Send_String_Polling_8("Auth Denied, Ask Admin! \n");
// 					break;//Break from Main Case 5
// 				}
				if(g_choice_2 == 0) Go_Back();
 95a:	81 11       	cpse	r24, r1
 95c:	03 c0       	rjmp	.+6      	; 0x964 <__stack+0x105>
 95e:	0e 94 96 03 	call	0x72c	; 0x72c <Go_Back>
 962:	0b c0       	rjmp	.+22     	; 0x97a <__stack+0x11b>
				else Door_Feedback(g_choice_2);
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 55 01 	call	0x2aa	; 0x2aa <Door_Feedback>
 96a:	07 c0       	rjmp	.+14     	; 0x97a <__stack+0x11b>
				break;
			case 4:
				//Dimmer Controller
				if(g_choice_2 == 0) Go_Back();
 96c:	81 11       	cpse	r24, r1
 96e:	03 c0       	rjmp	.+6      	; 0x976 <__stack+0x117>
 970:	0e 94 96 03 	call	0x72c	; 0x72c <Go_Back>
 974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x11b>
				else Dimmer_Feedback(g_choice_2);
 976:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Dimmer_Feedback>
				break;
		}
		//global_Flag++;
		break;
	}
}
 97a:	cf 91       	pop	r28
 97c:	08 95       	ret

0000097e <main>:


int main(void)
{
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
 986:	60 97       	sbiw	r28, 0x10	; 16
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	f8 94       	cli
 98c:	de bf       	out	0x3e, r29	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	cd bf       	out	0x3d, r28	; 61
	Smart_Initialization();
 992:	0e 94 45 03 	call	0x68a	; 0x68a <Smart_Initialization>
	
	//Initialize Default Users, Admin
	
	//Admin Initialize :
	sint8 Admin_username[8] = "Kareem\0";
 996:	88 e0       	ldi	r24, 0x08	; 8
 998:	e1 e7       	ldi	r30, 0x71	; 113
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	de 01       	movw	r26, r28
 99e:	11 96       	adiw	r26, 0x01	; 1
 9a0:	01 90       	ld	r0, Z+
 9a2:	0d 92       	st	X+, r0
 9a4:	8a 95       	dec	r24
 9a6:	e1 f7       	brne	.-8      	; 0x9a0 <main+0x22>
	sint8 Admin_password[8] = "1234\0";
 9a8:	86 e0       	ldi	r24, 0x06	; 6
 9aa:	e9 e7       	ldi	r30, 0x79	; 121
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	de 01       	movw	r26, r28
 9b0:	19 96       	adiw	r26, 0x09	; 9
 9b2:	01 90       	ld	r0, Z+
 9b4:	0d 92       	st	X+, r0
 9b6:	8a 95       	dec	r24
 9b8:	e1 f7       	brne	.-8      	; 0x9b2 <main+0x34>
 9ba:	18 8a       	std	Y+16, r1	; 0x10
 9bc:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 Admin_UserID = 99;
	EEPROM_Write_Byte(10,Admin_UserID);
 9be:	63 e6       	ldi	r22, 0x63	; 99
 9c0:	8a e0       	ldi	r24, 0x0A	; 10
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 42 02 	call	0x484	; 0x484 <EEPROM_Write_Byte>
	EEPROM_Write_String(11,Admin_password);
 9c8:	be 01       	movw	r22, r28
 9ca:	67 5f       	subi	r22, 0xF7	; 247
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8b e0       	ldi	r24, 0x0B	; 11
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 84 02 	call	0x508	; 0x508 <EEPROM_Write_String>
	EEPROM_Write_String(20,Admin_username);
 9d6:	be 01       	movw	r22, r28
 9d8:	6f 5f       	subi	r22, 0xFF	; 255
 9da:	7f 4f       	sbci	r23, 0xFF	; 255
 9dc:	84 e1       	ldi	r24, 0x14	; 20
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 84 02 	call	0x508	; 0x508 <EEPROM_Write_String>
				
				
	while (1) 
    {
		if(UART_Flag_Received == 1){
 9e4:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <UART_Flag_Received>
 9e8:	81 30       	cpi	r24, 0x01	; 1
 9ea:	e1 f7       	brne	.-8      	; 0x9e4 <main+0x66>
			UART_Process();
 9ec:	0e 94 c8 03 	call	0x790	; 0x790 <UART_Process>
 9f0:	f9 cf       	rjmp	.-14     	; 0x9e4 <main+0x66>

000009f2 <DIO_Set_Pin_Direction>:
		}else if(Output == Low){
		switch(port){
			case PORTAx:PORTA_Reg=0x00;break;
			case PORTBx:PORTB_Reg=0x00;break;
			case PORTCx:PORTC_Reg=0x00;break;
			case PORTDx:PORTD_Reg=0x00;break;
 9f2:	41 30       	cpi	r20, 0x01	; 1
 9f4:	a1 f5       	brne	.+104    	; 0xa5e <DIO_Set_Pin_Direction+0x6c>
 9f6:	81 30       	cpi	r24, 0x01	; 1
 9f8:	89 f0       	breq	.+34     	; 0xa1c <DIO_Set_Pin_Direction+0x2a>
 9fa:	28 f0       	brcs	.+10     	; 0xa06 <DIO_Set_Pin_Direction+0x14>
 9fc:	82 30       	cpi	r24, 0x02	; 2
 9fe:	c9 f0       	breq	.+50     	; 0xa32 <DIO_Set_Pin_Direction+0x40>
 a00:	83 30       	cpi	r24, 0x03	; 3
 a02:	11 f1       	breq	.+68     	; 0xa48 <DIO_Set_Pin_Direction+0x56>
 a04:	08 95       	ret
 a06:	2a b3       	in	r18, 0x1a	; 26
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <DIO_Set_Pin_Direction+0x20>
 a0e:	88 0f       	add	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	6a 95       	dec	r22
 a14:	e2 f7       	brpl	.-8      	; 0xa0e <DIO_Set_Pin_Direction+0x1c>
 a16:	82 2b       	or	r24, r18
 a18:	8a bb       	out	0x1a, r24	; 26
 a1a:	08 95       	ret
 a1c:	27 b3       	in	r18, 0x17	; 23
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <DIO_Set_Pin_Direction+0x36>
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	6a 95       	dec	r22
 a2a:	e2 f7       	brpl	.-8      	; 0xa24 <DIO_Set_Pin_Direction+0x32>
 a2c:	82 2b       	or	r24, r18
 a2e:	87 bb       	out	0x17, r24	; 23
 a30:	08 95       	ret
 a32:	24 b3       	in	r18, 0x14	; 20
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <DIO_Set_Pin_Direction+0x4c>
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	6a 95       	dec	r22
 a40:	e2 f7       	brpl	.-8      	; 0xa3a <DIO_Set_Pin_Direction+0x48>
 a42:	82 2b       	or	r24, r18
 a44:	84 bb       	out	0x14, r24	; 20
 a46:	08 95       	ret
 a48:	21 b3       	in	r18, 0x11	; 17
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_Set_Pin_Direction+0x62>
 a50:	88 0f       	add	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	6a 95       	dec	r22
 a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_Set_Pin_Direction+0x5e>
 a58:	82 2b       	or	r24, r18
 a5a:	81 bb       	out	0x11, r24	; 17
 a5c:	08 95       	ret
 a5e:	41 11       	cpse	r20, r1
 a60:	37 c0       	rjmp	.+110    	; 0xad0 <DIO_Set_Pin_Direction+0xde>
 a62:	81 30       	cpi	r24, 0x01	; 1
 a64:	91 f0       	breq	.+36     	; 0xa8a <DIO_Set_Pin_Direction+0x98>
 a66:	28 f0       	brcs	.+10     	; 0xa72 <DIO_Set_Pin_Direction+0x80>
 a68:	82 30       	cpi	r24, 0x02	; 2
 a6a:	d9 f0       	breq	.+54     	; 0xaa2 <DIO_Set_Pin_Direction+0xb0>
 a6c:	83 30       	cpi	r24, 0x03	; 3
 a6e:	29 f1       	breq	.+74     	; 0xaba <DIO_Set_Pin_Direction+0xc8>
 a70:	08 95       	ret
 a72:	2a b3       	in	r18, 0x1a	; 26
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_Set_Pin_Direction+0x8c>
 a7a:	88 0f       	add	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	6a 95       	dec	r22
 a80:	e2 f7       	brpl	.-8      	; 0xa7a <DIO_Set_Pin_Direction+0x88>
 a82:	80 95       	com	r24
 a84:	82 23       	and	r24, r18
 a86:	8a bb       	out	0x1a, r24	; 26
 a88:	08 95       	ret
 a8a:	27 b3       	in	r18, 0x17	; 23
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <DIO_Set_Pin_Direction+0xa4>
 a92:	88 0f       	add	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	6a 95       	dec	r22
 a98:	e2 f7       	brpl	.-8      	; 0xa92 <DIO_Set_Pin_Direction+0xa0>
 a9a:	80 95       	com	r24
 a9c:	82 23       	and	r24, r18
 a9e:	87 bb       	out	0x17, r24	; 23
 aa0:	08 95       	ret
 aa2:	24 b3       	in	r18, 0x14	; 20
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <DIO_Set_Pin_Direction+0xbc>
 aaa:	88 0f       	add	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	6a 95       	dec	r22
 ab0:	e2 f7       	brpl	.-8      	; 0xaaa <DIO_Set_Pin_Direction+0xb8>
 ab2:	80 95       	com	r24
 ab4:	82 23       	and	r24, r18
 ab6:	84 bb       	out	0x14, r24	; 20
 ab8:	08 95       	ret
 aba:	21 b3       	in	r18, 0x11	; 17
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_Set_Pin_Direction+0xd4>
 ac2:	88 0f       	add	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	6a 95       	dec	r22
 ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_Set_Pin_Direction+0xd0>
 aca:	80 95       	com	r24
 acc:	82 23       	and	r24, r18
 ace:	81 bb       	out	0x11, r24	; 17
 ad0:	08 95       	ret

00000ad2 <DIO_Set_Pin_Output>:
		}
	}
}

void DIO_Set_Pin_Output(PORT port,PIN pin,DIO_VALUE Output){
	if(Output == High){
 ad2:	41 30       	cpi	r20, 0x01	; 1
 ad4:	a1 f5       	brne	.+104    	; 0xb3e <DIO_Set_Pin_Output+0x6c>
		switch(port){
 ad6:	81 30       	cpi	r24, 0x01	; 1
 ad8:	89 f0       	breq	.+34     	; 0xafc <DIO_Set_Pin_Output+0x2a>
 ada:	28 f0       	brcs	.+10     	; 0xae6 <DIO_Set_Pin_Output+0x14>
 adc:	82 30       	cpi	r24, 0x02	; 2
 ade:	c9 f0       	breq	.+50     	; 0xb12 <DIO_Set_Pin_Output+0x40>
 ae0:	83 30       	cpi	r24, 0x03	; 3
 ae2:	11 f1       	breq	.+68     	; 0xb28 <DIO_Set_Pin_Output+0x56>
 ae4:	08 95       	ret
			case PORTAx: Set(PORTA_Reg,pin) ;break;
 ae6:	2b b3       	in	r18, 0x1b	; 27
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <DIO_Set_Pin_Output+0x20>
 aee:	88 0f       	add	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	6a 95       	dec	r22
 af4:	e2 f7       	brpl	.-8      	; 0xaee <DIO_Set_Pin_Output+0x1c>
 af6:	82 2b       	or	r24, r18
 af8:	8b bb       	out	0x1b, r24	; 27
 afa:	08 95       	ret
			case PORTBx: Set(PORTB_Reg,pin) ;break;
 afc:	28 b3       	in	r18, 0x18	; 24
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <DIO_Set_Pin_Output+0x36>
 b04:	88 0f       	add	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	6a 95       	dec	r22
 b0a:	e2 f7       	brpl	.-8      	; 0xb04 <DIO_Set_Pin_Output+0x32>
 b0c:	82 2b       	or	r24, r18
 b0e:	88 bb       	out	0x18, r24	; 24
 b10:	08 95       	ret
			case PORTCx: Set(PORTC_Reg,pin) ;break;
 b12:	25 b3       	in	r18, 0x15	; 21
 b14:	81 e0       	ldi	r24, 0x01	; 1
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <DIO_Set_Pin_Output+0x4c>
 b1a:	88 0f       	add	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	6a 95       	dec	r22
 b20:	e2 f7       	brpl	.-8      	; 0xb1a <DIO_Set_Pin_Output+0x48>
 b22:	82 2b       	or	r24, r18
 b24:	85 bb       	out	0x15, r24	; 21
 b26:	08 95       	ret
			case PORTDx: Set(PORTD_Reg,pin) ;break;
 b28:	22 b3       	in	r18, 0x12	; 18
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_Set_Pin_Output+0x62>
 b30:	88 0f       	add	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	6a 95       	dec	r22
 b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_Set_Pin_Output+0x5e>
 b38:	82 2b       	or	r24, r18
 b3a:	82 bb       	out	0x12, r24	; 18
 b3c:	08 95       	ret
			default:break;
		}
	}
	else if(Output == Low){
 b3e:	41 11       	cpse	r20, r1
 b40:	38 c0       	rjmp	.+112    	; 0xbb2 <DIO_Set_Pin_Output+0xe0>
		switch(port){
 b42:	81 30       	cpi	r24, 0x01	; 1
 b44:	91 f0       	breq	.+36     	; 0xb6a <DIO_Set_Pin_Output+0x98>
 b46:	28 f0       	brcs	.+10     	; 0xb52 <DIO_Set_Pin_Output+0x80>
 b48:	82 30       	cpi	r24, 0x02	; 2
 b4a:	d9 f0       	breq	.+54     	; 0xb82 <DIO_Set_Pin_Output+0xb0>
 b4c:	83 30       	cpi	r24, 0x03	; 3
 b4e:	29 f1       	breq	.+74     	; 0xb9a <DIO_Set_Pin_Output+0xc8>
 b50:	08 95       	ret
			case PORTAx: Clear(PORTA_Reg,pin);break;
 b52:	2b b3       	in	r18, 0x1b	; 27
 b54:	81 e0       	ldi	r24, 0x01	; 1
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <DIO_Set_Pin_Output+0x8c>
 b5a:	88 0f       	add	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	6a 95       	dec	r22
 b60:	e2 f7       	brpl	.-8      	; 0xb5a <DIO_Set_Pin_Output+0x88>
 b62:	80 95       	com	r24
 b64:	82 23       	and	r24, r18
 b66:	8b bb       	out	0x1b, r24	; 27
 b68:	08 95       	ret
			case PORTBx: Clear(PORTB_Reg,pin);break;
 b6a:	28 b3       	in	r18, 0x18	; 24
 b6c:	81 e0       	ldi	r24, 0x01	; 1
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_Set_Pin_Output+0xa4>
 b72:	88 0f       	add	r24, r24
 b74:	99 1f       	adc	r25, r25
 b76:	6a 95       	dec	r22
 b78:	e2 f7       	brpl	.-8      	; 0xb72 <DIO_Set_Pin_Output+0xa0>
 b7a:	80 95       	com	r24
 b7c:	82 23       	and	r24, r18
 b7e:	88 bb       	out	0x18, r24	; 24
 b80:	08 95       	ret
			case PORTCx: Clear(PORTC_Reg,pin);break;
 b82:	25 b3       	in	r18, 0x15	; 21
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <DIO_Set_Pin_Output+0xbc>
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	6a 95       	dec	r22
 b90:	e2 f7       	brpl	.-8      	; 0xb8a <DIO_Set_Pin_Output+0xb8>
 b92:	80 95       	com	r24
 b94:	82 23       	and	r24, r18
 b96:	85 bb       	out	0x15, r24	; 21
 b98:	08 95       	ret
			case PORTDx: Clear(PORTD_Reg,pin);break;
 b9a:	22 b3       	in	r18, 0x12	; 18
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <DIO_Set_Pin_Output+0xd4>
 ba2:	88 0f       	add	r24, r24
 ba4:	99 1f       	adc	r25, r25
 ba6:	6a 95       	dec	r22
 ba8:	e2 f7       	brpl	.-8      	; 0xba2 <DIO_Set_Pin_Output+0xd0>
 baa:	80 95       	com	r24
 bac:	82 23       	and	r24, r18
 bae:	82 bb       	out	0x12, r24	; 18
 bb0:	08 95       	ret
			default:break;
		}
	}
	else if(Output == Toggle){
 bb2:	42 30       	cpi	r20, 0x02	; 2
 bb4:	99 f5       	brne	.+102    	; 0xc1c <DIO_Set_Pin_Output+0x14a>
		switch(port){
 bb6:	81 30       	cpi	r24, 0x01	; 1
 bb8:	89 f0       	breq	.+34     	; 0xbdc <DIO_Set_Pin_Output+0x10a>
 bba:	28 f0       	brcs	.+10     	; 0xbc6 <DIO_Set_Pin_Output+0xf4>
 bbc:	82 30       	cpi	r24, 0x02	; 2
 bbe:	c9 f0       	breq	.+50     	; 0xbf2 <DIO_Set_Pin_Output+0x120>
 bc0:	83 30       	cpi	r24, 0x03	; 3
 bc2:	11 f1       	breq	.+68     	; 0xc08 <DIO_Set_Pin_Output+0x136>
 bc4:	08 95       	ret
			case PORTAx: Toggle(PORTA_Reg,pin);break;
 bc6:	2b b3       	in	r18, 0x1b	; 27
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_Set_Pin_Output+0x100>
 bce:	88 0f       	add	r24, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	6a 95       	dec	r22
 bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_Set_Pin_Output+0xfc>
 bd6:	82 27       	eor	r24, r18
 bd8:	8b bb       	out	0x1b, r24	; 27
 bda:	08 95       	ret
			case PORTBx: Toggle(PORTB_Reg,pin);break;
 bdc:	28 b3       	in	r18, 0x18	; 24
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	02 c0       	rjmp	.+4      	; 0xbe8 <DIO_Set_Pin_Output+0x116>
 be4:	88 0f       	add	r24, r24
 be6:	99 1f       	adc	r25, r25
 be8:	6a 95       	dec	r22
 bea:	e2 f7       	brpl	.-8      	; 0xbe4 <DIO_Set_Pin_Output+0x112>
 bec:	82 27       	eor	r24, r18
 bee:	88 bb       	out	0x18, r24	; 24
 bf0:	08 95       	ret
			case PORTCx: Toggle(PORTC_Reg,pin);break;
 bf2:	25 b3       	in	r18, 0x15	; 21
 bf4:	81 e0       	ldi	r24, 0x01	; 1
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	02 c0       	rjmp	.+4      	; 0xbfe <DIO_Set_Pin_Output+0x12c>
 bfa:	88 0f       	add	r24, r24
 bfc:	99 1f       	adc	r25, r25
 bfe:	6a 95       	dec	r22
 c00:	e2 f7       	brpl	.-8      	; 0xbfa <DIO_Set_Pin_Output+0x128>
 c02:	82 27       	eor	r24, r18
 c04:	85 bb       	out	0x15, r24	; 21
 c06:	08 95       	ret
			case PORTDx: Toggle(PORTD_Reg,pin);break;
 c08:	22 b3       	in	r18, 0x12	; 18
 c0a:	81 e0       	ldi	r24, 0x01	; 1
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_Set_Pin_Output+0x142>
 c10:	88 0f       	add	r24, r24
 c12:	99 1f       	adc	r25, r25
 c14:	6a 95       	dec	r22
 c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_Set_Pin_Output+0x13e>
 c18:	82 27       	eor	r24, r18
 c1a:	82 bb       	out	0x12, r24	; 18
 c1c:	08 95       	ret

00000c1e <GIE_Enable>:
}

void GIE_Enable()
{
	//General Interrupt Enable by Set bit 7 On SREG Register
	Set(SREG_Reg,7);
 c1e:	8f b7       	in	r24, 0x3f	; 63
 c20:	80 68       	ori	r24, 0x80	; 128
 c22:	8f bf       	out	0x3f, r24	; 63
 c24:	08 95       	ret

00000c26 <GIE_Disable>:
}

void GIE_Disable()
{
	//General Interrupt Disable by Set bit 7 On SREG Register
	Clear(SREG_Reg,7);
 c26:	8f b7       	in	r24, 0x3f	; 63
 c28:	8f 77       	andi	r24, 0x7F	; 127
 c2a:	8f bf       	out	0x3f, r24	; 63
 c2c:	08 95       	ret

00000c2e <Timer0_Init>:
	#elif (Timer0_OC0_Pin == Timer_COM_Pin_SET)
	Set(TCCR0_Reg,5);  Set(TCCR0_Reg,4);
	#endif
}
void Timer0_Set_TCNT0_Reg(uint8 value)   {    TCNT0_Reg= value;    }//Timer Register
void Timer0_Set_OCR0_Reg(uint8 value)    {    OCR0_Reg = value;    }//Output Compare Register
 c2e:	83 b7       	in	r24, 0x33	; 51
 c30:	8f 7b       	andi	r24, 0xBF	; 191
 c32:	83 bf       	out	0x33, r24	; 51
 c34:	83 b7       	in	r24, 0x33	; 51
 c36:	87 7f       	andi	r24, 0xF7	; 247
 c38:	83 bf       	out	0x33, r24	; 51
 c3a:	83 b7       	in	r24, 0x33	; 51
 c3c:	8b 7f       	andi	r24, 0xFB	; 251
 c3e:	83 bf       	out	0x33, r24	; 51
 c40:	83 b7       	in	r24, 0x33	; 51
 c42:	8d 7f       	andi	r24, 0xFD	; 253
 c44:	83 bf       	out	0x33, r24	; 51
 c46:	83 b7       	in	r24, 0x33	; 51
 c48:	81 60       	ori	r24, 0x01	; 1
 c4a:	83 bf       	out	0x33, r24	; 51
 c4c:	83 b7       	in	r24, 0x33	; 51
 c4e:	8f 7d       	andi	r24, 0xDF	; 223
 c50:	83 bf       	out	0x33, r24	; 51
 c52:	83 b7       	in	r24, 0x33	; 51
 c54:	8f 7e       	andi	r24, 0xEF	; 239
 c56:	83 bf       	out	0x33, r24	; 51
 c58:	08 95       	ret

00000c5a <Timer0_Enable_Overflow_Interrupt>:
void Timer0_Enable_Overflow_Interrupt()  {    Set(TIMSK_Reg,0);    }
 c5a:	89 b7       	in	r24, 0x39	; 57
 c5c:	81 60       	ori	r24, 0x01	; 1
 c5e:	89 bf       	out	0x39, r24	; 57
 c60:	08 95       	ret

00000c62 <TWI_Init>:
	TWCR_Reg =   (1<<5)  | (1<<2) |(1<<7);
	while(Get(TWCR_Reg ,7)  == 0);//Wait till Send Successfully(INT_FLAG DOWN)
}
void TWI_Set_My_Address(uint8 Address)
{
	TWAR_Reg = (TWAR_Reg & 0x01) | (Address<<1);
 c62:	8a e0       	ldi	r24, 0x0A	; 10
 c64:	80 b9       	out	0x00, r24	; 0
 c66:	81 b1       	in	r24, 0x01	; 1
 c68:	81 60       	ori	r24, 0x01	; 1
 c6a:	81 b9       	out	0x01, r24	; 1
 c6c:	81 b1       	in	r24, 0x01	; 1
 c6e:	8d 7f       	andi	r24, 0xFD	; 253
 c70:	81 b9       	out	0x01, r24	; 1
 c72:	86 b7       	in	r24, 0x36	; 54
 c74:	84 60       	ori	r24, 0x04	; 4
 c76:	86 bf       	out	0x36, r24	; 54
 c78:	08 95       	ret

00000c7a <TWI_Check_Status>:
 c7a:	21 b1       	in	r18, 0x01	; 1
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	28 7f       	andi	r18, 0xF8	; 248
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	82 17       	cp	r24, r18
 c84:	93 07       	cpc	r25, r19
 c86:	11 f4       	brne	.+4      	; 0xc8c <TWI_Check_Status+0x12>
 c88:	81 e0       	ldi	r24, 0x01	; 1
 c8a:	08 95       	ret
 c8c:	80 e0       	ldi	r24, 0x00	; 0
 c8e:	08 95       	ret

00000c90 <TWI_Send_Stop>:
 c90:	84 e9       	ldi	r24, 0x94	; 148
 c92:	86 bf       	out	0x36, r24	; 54
 c94:	08 95       	ret

00000c96 <TWI_MSTR_Send_Start>:
 c96:	84 ea       	ldi	r24, 0xA4	; 164
 c98:	86 bf       	out	0x36, r24	; 54
 c9a:	06 b6       	in	r0, 0x36	; 54
 c9c:	07 fe       	sbrs	r0, 7
 c9e:	fd cf       	rjmp	.-6      	; 0xc9a <TWI_MSTR_Send_Start+0x4>
 ca0:	08 95       	ret

00000ca2 <TWI_Receive_Data>:
}
uint8 TWI_Receive_Data(uint8 ACK_State){
	if(ACK_State == 1)
 ca2:	81 30       	cpi	r24, 0x01	; 1
 ca4:	19 f4       	brne	.+6      	; 0xcac <TWI_Receive_Data+0xa>
	Set(TWCR_Reg,6);		//SEND ACK IF Input is 1 for ACK
 ca6:	86 b7       	in	r24, 0x36	; 54
 ca8:	80 64       	ori	r24, 0x40	; 64
 caa:	86 bf       	out	0x36, r24	; 54
	// 	Set(TWCR_Reg,2);			//Enable TWI
	// 	Set(TWCR_Reg,7);			//Set Interrupt Flag to Clear it
	TWCR_Reg =   (1<<7)| (1<<2);
 cac:	84 e8       	ldi	r24, 0x84	; 132
 cae:	86 bf       	out	0x36, r24	; 54
	while(Get(TWCR_Reg,7)== 0);	//Wait for flag to be 0
 cb0:	06 b6       	in	r0, 0x36	; 54
 cb2:	07 fe       	sbrs	r0, 7
 cb4:	fd cf       	rjmp	.-6      	; 0xcb0 <TWI_Receive_Data+0xe>
	return TWDR_Reg;			//Send back DATA Received Value
 cb6:	83 b1       	in	r24, 0x03	; 3
}
 cb8:	08 95       	ret

00000cba <TWI_Send_Data>:
void TWI_Send_Data(uint8 Data){
	//TWCR_Reg =0;
	TWDR_Reg = Data;
 cba:	83 b9       	out	0x03, r24	; 3
	//Set(TWCR_Reg,2);// Enable TWI
	//Set(TWCR_Reg,7);// Clear Interrupt Flag
	//TWCR_Reg = 0;
	TWCR_Reg =   (1<<7)| (1<<2);
 cbc:	84 e8       	ldi	r24, 0x84	; 132
 cbe:	86 bf       	out	0x36, r24	; 54
	while(Get(TWCR_Reg,7)== 0);	//Wait for flag to be 0
 cc0:	06 b6       	in	r0, 0x36	; 54
 cc2:	07 fe       	sbrs	r0, 7
 cc4:	fd cf       	rjmp	.-6      	; 0xcc0 <TWI_Send_Data+0x6>
 cc6:	08 95       	ret

00000cc8 <UART_Enable_RX_Interrupt>:
// 			UART_Send_String_Polling_8(" Username: ");
// 			UART_Send_String_Polling_8(Username);
// 			UART_Send_String_Polling_8("/n");
// 		}
	}
}
 cc8:	8a b1       	in	r24, 0x0a	; 10
 cca:	80 68       	ori	r24, 0x80	; 128
 ccc:	8a b9       	out	0x0a, r24	; 10
 cce:	08 95       	ret

00000cd0 <UART_Init>:
 cd0:	8a b1       	in	r24, 0x0a	; 10
 cd2:	8b 7f       	andi	r24, 0xFB	; 251
 cd4:	8a b9       	out	0x0a, r24	; 10
 cd6:	80 b5       	in	r24, 0x20	; 32
 cd8:	84 60       	ori	r24, 0x04	; 4
 cda:	80 bd       	out	0x20, r24	; 32
 cdc:	80 b5       	in	r24, 0x20	; 32
 cde:	82 60       	ori	r24, 0x02	; 2
 ce0:	80 bd       	out	0x20, r24	; 32
 ce2:	80 b5       	in	r24, 0x20	; 32
 ce4:	8f 7b       	andi	r24, 0xBF	; 191
 ce6:	80 bd       	out	0x20, r24	; 32
 ce8:	80 b5       	in	r24, 0x20	; 32
 cea:	80 68       	ori	r24, 0x80	; 128
 cec:	80 bd       	out	0x20, r24	; 32
 cee:	80 b5       	in	r24, 0x20	; 32
 cf0:	8f 7d       	andi	r24, 0xDF	; 223
 cf2:	80 bd       	out	0x20, r24	; 32
 cf4:	80 b5       	in	r24, 0x20	; 32
 cf6:	8f 7e       	andi	r24, 0xEF	; 239
 cf8:	80 bd       	out	0x20, r24	; 32
 cfa:	80 b5       	in	r24, 0x20	; 32
 cfc:	87 7f       	andi	r24, 0xF7	; 247
 cfe:	80 bd       	out	0x20, r24	; 32
 d00:	10 bc       	out	0x20, r1	; 32
 d02:	87 e6       	ldi	r24, 0x67	; 103
 d04:	89 b9       	out	0x09, r24	; 9
 d06:	8a b1       	in	r24, 0x0a	; 10
 d08:	80 61       	ori	r24, 0x10	; 16
 d0a:	8a b9       	out	0x0a, r24	; 10
 d0c:	8a b1       	in	r24, 0x0a	; 10
 d0e:	88 60       	ori	r24, 0x08	; 8
 d10:	8a b9       	out	0x0a, r24	; 10
 d12:	8a b1       	in	r24, 0x0a	; 10
 d14:	80 68       	ori	r24, 0x80	; 128
 d16:	8a b9       	out	0x0a, r24	; 10
 d18:	08 95       	ret

00000d1a <UART_Send_Byte_Polling_8>:
 d1a:	5d 9b       	sbis	0x0b, 5	; 11
 d1c:	fe cf       	rjmp	.-4      	; 0xd1a <UART_Send_Byte_Polling_8>
 d1e:	8c b9       	out	0x0c, r24	; 12
 d20:	08 95       	ret

00000d22 <UART_Send_String_Polling_8>:
 d22:	0f 93       	push	r16
 d24:	1f 93       	push	r17
 d26:	cf 93       	push	r28
 d28:	8c 01       	movw	r16, r24
 d2a:	c0 e0       	ldi	r28, 0x00	; 0
 d2c:	03 c0       	rjmp	.+6      	; 0xd34 <UART_Send_String_Polling_8+0x12>
 d2e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <UART_Send_Byte_Polling_8>
 d32:	cf 5f       	subi	r28, 0xFF	; 255
 d34:	f8 01       	movw	r30, r16
 d36:	ec 0f       	add	r30, r28
 d38:	f1 1d       	adc	r31, r1
 d3a:	80 81       	ld	r24, Z
 d3c:	81 11       	cpse	r24, r1
 d3e:	f7 cf       	rjmp	.-18     	; 0xd2e <UART_Send_String_Polling_8+0xc>
 d40:	cf 91       	pop	r28
 d42:	1f 91       	pop	r17
 d44:	0f 91       	pop	r16
 d46:	08 95       	ret

00000d48 <UART_Receive_Byte_8>:
 d48:	5f 9b       	sbis	0x0b, 7	; 11
 d4a:	fe cf       	rjmp	.-4      	; 0xd48 <UART_Receive_Byte_8>
 d4c:	8c b1       	in	r24, 0x0c	; 12
 d4e:	08 95       	ret

00000d50 <UART_Recieve_String_8>:
 d50:	ef 92       	push	r14
 d52:	ff 92       	push	r15
 d54:	1f 93       	push	r17
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	7c 01       	movw	r14, r24
 d5c:	10 e0       	ldi	r17, 0x00	; 0
 d5e:	e7 01       	movw	r28, r14
 d60:	c1 0f       	add	r28, r17
 d62:	d1 1d       	adc	r29, r1
 d64:	0e 94 a4 06 	call	0xd48	; 0xd48 <UART_Receive_Byte_8>
 d68:	88 83       	st	Y, r24
 d6a:	8d 30       	cpi	r24, 0x0D	; 13
 d6c:	09 f4       	brne	.+2      	; 0xd70 <UART_Recieve_String_8+0x20>
 d6e:	18 82       	st	Y, r1
 d70:	88 81       	ld	r24, Y
 d72:	8a 30       	cpi	r24, 0x0A	; 10
 d74:	11 f4       	brne	.+4      	; 0xd7a <UART_Recieve_String_8+0x2a>
 d76:	18 82       	st	Y, r1
 d78:	02 c0       	rjmp	.+4      	; 0xd7e <UART_Recieve_String_8+0x2e>
 d7a:	1f 5f       	subi	r17, 0xFF	; 255
 d7c:	f0 cf       	rjmp	.-32     	; 0xd5e <UART_Recieve_String_8+0xe>
 d7e:	df 91       	pop	r29
 d80:	cf 91       	pop	r28
 d82:	1f 91       	pop	r17
 d84:	ff 90       	pop	r15
 d86:	ef 90       	pop	r14
 d88:	08 95       	ret

00000d8a <UART_Show_Request_UserID>:
 d8a:	87 e4       	ldi	r24, 0x47	; 71
 d8c:	92 e0       	ldi	r25, 0x02	; 2
 d8e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 d92:	08 95       	ret

00000d94 <UART_Show_Request_Password>:
 d94:	83 e6       	ldi	r24, 0x63	; 99
 d96:	92 e0       	ldi	r25, 0x02	; 2
 d98:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 d9c:	08 95       	ret

00000d9e <UART_Show_Invalid>:
 d9e:	8b e7       	ldi	r24, 0x7B	; 123
 da0:	92 e0       	ldi	r25, 0x02	; 2
 da2:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 da6:	08 95       	ret

00000da8 <UART_Show_MainMenu>:
 da8:	8c e9       	ldi	r24, 0x9C	; 156
 daa:	92 e0       	ldi	r25, 0x02	; 2
 dac:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 db0:	8d ea       	ldi	r24, 0xAD	; 173
 db2:	92 e0       	ldi	r25, 0x02	; 2
 db4:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 db8:	80 ec       	ldi	r24, 0xC0	; 192
 dba:	92 e0       	ldi	r25, 0x02	; 2
 dbc:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 dc0:	81 ed       	ldi	r24, 0xD1	; 209
 dc2:	92 e0       	ldi	r25, 0x02	; 2
 dc4:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 dc8:	84 ee       	ldi	r24, 0xE4	; 228
 dca:	92 e0       	ldi	r25, 0x02	; 2
 dcc:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 dd0:	89 ef       	ldi	r24, 0xF9	; 249
 dd2:	92 e0       	ldi	r25, 0x02	; 2
 dd4:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 dd8:	8f e0       	ldi	r24, 0x0F	; 15
 dda:	93 e0       	ldi	r25, 0x03	; 3
 ddc:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 de0:	85 e2       	ldi	r24, 0x25	; 37
 de2:	93 e0       	ldi	r25, 0x03	; 3
 de4:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 de8:	87 e3       	ldi	r24, 0x37	; 55
 dea:	93 e0       	ldi	r25, 0x03	; 3
 dec:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 df0:	8e e4       	ldi	r24, 0x4E	; 78
 df2:	93 e0       	ldi	r25, 0x03	; 3
 df4:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 df8:	82 e6       	ldi	r24, 0x62	; 98
 dfa:	93 e0       	ldi	r25, 0x03	; 3
 dfc:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e00:	08 95       	ret

00000e02 <UART_Show_Control_Leds>:
 e02:	80 e7       	ldi	r24, 0x70	; 112
 e04:	93 e0       	ldi	r25, 0x03	; 3
 e06:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e0a:	83 e8       	ldi	r24, 0x83	; 131
 e0c:	93 e0       	ldi	r25, 0x03	; 3
 e0e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e12:	86 e9       	ldi	r24, 0x96	; 150
 e14:	93 e0       	ldi	r25, 0x03	; 3
 e16:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e1a:	89 ea       	ldi	r24, 0xA9	; 169
 e1c:	93 e0       	ldi	r25, 0x03	; 3
 e1e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e22:	8c eb       	ldi	r24, 0xBC	; 188
 e24:	93 e0       	ldi	r25, 0x03	; 3
 e26:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e2a:	8f ec       	ldi	r24, 0xCF	; 207
 e2c:	93 e0       	ldi	r25, 0x03	; 3
 e2e:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e32:	08 95       	ret

00000e34 <UART_Show_Control_AC>:
 e34:	8a ed       	ldi	r24, 0xDA	; 218
 e36:	93 e0       	ldi	r25, 0x03	; 3
 e38:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e3c:	88 ee       	ldi	r24, 0xE8	; 232
 e3e:	93 e0       	ldi	r25, 0x03	; 3
 e40:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e44:	81 e0       	ldi	r24, 0x01	; 1
 e46:	94 e0       	ldi	r25, 0x04	; 4
 e48:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e4c:	8f ec       	ldi	r24, 0xCF	; 207
 e4e:	93 e0       	ldi	r25, 0x03	; 3
 e50:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e54:	08 95       	ret

00000e56 <UART_Show_Control_Door>:
 e56:	8a e1       	ldi	r24, 0x1A	; 26
 e58:	94 e0       	ldi	r25, 0x04	; 4
 e5a:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e5e:	8f e2       	ldi	r24, 0x2F	; 47
 e60:	94 e0       	ldi	r25, 0x04	; 4
 e62:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e66:	8f ec       	ldi	r24, 0xCF	; 207
 e68:	93 e0       	ldi	r25, 0x03	; 3
 e6a:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e6e:	08 95       	ret

00000e70 <UART_Show_Control_Dimmer>:
 e70:	85 e4       	ldi	r24, 0x45	; 69
 e72:	94 e0       	ldi	r25, 0x04	; 4
 e74:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e78:	85 e5       	ldi	r24, 0x55	; 85
 e7a:	94 e0       	ldi	r25, 0x04	; 4
 e7c:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e80:	87 e6       	ldi	r24, 0x67	; 103
 e82:	94 e0       	ldi	r25, 0x04	; 4
 e84:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e88:	88 e7       	ldi	r24, 0x78	; 120
 e8a:	94 e0       	ldi	r25, 0x04	; 4
 e8c:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e90:	8f ec       	ldi	r24, 0xCF	; 207
 e92:	93 e0       	ldi	r25, 0x03	; 3
 e94:	0e 94 91 06 	call	0xd22	; 0xd22 <UART_Send_String_Polling_8>
 e98:	08 95       	ret

00000e9a <UART_Choice_Handler_1>:

void UART_Choice_Handler_1(uint8 g_choice_1){
	switch(g_choice_1){
 e9a:	82 30       	cpi	r24, 0x02	; 2
 e9c:	61 f0       	breq	.+24     	; 0xeb6 <UART_Choice_Handler_1+0x1c>
 e9e:	18 f4       	brcc	.+6      	; 0xea6 <UART_Choice_Handler_1+0xc>
 ea0:	81 30       	cpi	r24, 0x01	; 1
 ea2:	31 f0       	breq	.+12     	; 0xeb0 <UART_Choice_Handler_1+0x16>
 ea4:	08 95       	ret
 ea6:	83 30       	cpi	r24, 0x03	; 3
 ea8:	49 f0       	breq	.+18     	; 0xebc <UART_Choice_Handler_1+0x22>
 eaa:	84 30       	cpi	r24, 0x04	; 4
 eac:	51 f0       	breq	.+20     	; 0xec2 <UART_Choice_Handler_1+0x28>
 eae:	08 95       	ret
		case 1:UART_Show_Control_Leds();break;
 eb0:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_Show_Control_Leds>
 eb4:	08 95       	ret
		case 2:UART_Show_Control_AC();	break;
 eb6:	0e 94 1a 07 	call	0xe34	; 0xe34 <UART_Show_Control_AC>
 eba:	08 95       	ret
		case 3:UART_Show_Control_Door();break;
 ebc:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_Show_Control_Door>
 ec0:	08 95       	ret
		case 4:UART_Show_Control_Dimmer();break;
 ec2:	0e 94 38 07 	call	0xe70	; 0xe70 <UART_Show_Control_Dimmer>
 ec6:	08 95       	ret

00000ec8 <atoi>:
 ec8:	fc 01       	movw	r30, r24
 eca:	88 27       	eor	r24, r24
 ecc:	99 27       	eor	r25, r25
 ece:	e8 94       	clt
 ed0:	21 91       	ld	r18, Z+
 ed2:	20 32       	cpi	r18, 0x20	; 32
 ed4:	e9 f3       	breq	.-6      	; 0xed0 <atoi+0x8>
 ed6:	29 30       	cpi	r18, 0x09	; 9
 ed8:	10 f0       	brcs	.+4      	; 0xede <atoi+0x16>
 eda:	2e 30       	cpi	r18, 0x0E	; 14
 edc:	c8 f3       	brcs	.-14     	; 0xed0 <atoi+0x8>
 ede:	2b 32       	cpi	r18, 0x2B	; 43
 ee0:	41 f0       	breq	.+16     	; 0xef2 <atoi+0x2a>
 ee2:	2d 32       	cpi	r18, 0x2D	; 45
 ee4:	39 f4       	brne	.+14     	; 0xef4 <atoi+0x2c>
 ee6:	68 94       	set
 ee8:	04 c0       	rjmp	.+8      	; 0xef2 <atoi+0x2a>
 eea:	0e 94 92 07 	call	0xf24	; 0xf24 <__mulhi_const_10>
 eee:	82 0f       	add	r24, r18
 ef0:	91 1d       	adc	r25, r1
 ef2:	21 91       	ld	r18, Z+
 ef4:	20 53       	subi	r18, 0x30	; 48
 ef6:	2a 30       	cpi	r18, 0x0A	; 10
 ef8:	c0 f3       	brcs	.-16     	; 0xeea <atoi+0x22>
 efa:	1e f4       	brtc	.+6      	; 0xf02 <atoi+0x3a>
 efc:	90 95       	com	r25
 efe:	81 95       	neg	r24
 f00:	9f 4f       	sbci	r25, 0xFF	; 255
 f02:	08 95       	ret

00000f04 <strcmp>:
 f04:	fb 01       	movw	r30, r22
 f06:	dc 01       	movw	r26, r24
 f08:	8d 91       	ld	r24, X+
 f0a:	01 90       	ld	r0, Z+
 f0c:	80 19       	sub	r24, r0
 f0e:	01 10       	cpse	r0, r1
 f10:	d9 f3       	breq	.-10     	; 0xf08 <strcmp+0x4>
 f12:	99 0b       	sbc	r25, r25
 f14:	08 95       	ret

00000f16 <strcpy>:
 f16:	fb 01       	movw	r30, r22
 f18:	dc 01       	movw	r26, r24
 f1a:	01 90       	ld	r0, Z+
 f1c:	0d 92       	st	X+, r0
 f1e:	00 20       	and	r0, r0
 f20:	e1 f7       	brne	.-8      	; 0xf1a <strcpy+0x4>
 f22:	08 95       	ret

00000f24 <__mulhi_const_10>:
 f24:	7a e0       	ldi	r23, 0x0A	; 10
 f26:	97 9f       	mul	r25, r23
 f28:	90 2d       	mov	r25, r0
 f2a:	87 9f       	mul	r24, r23
 f2c:	80 2d       	mov	r24, r0
 f2e:	91 0d       	add	r25, r1
 f30:	11 24       	eor	r1, r1
 f32:	08 95       	ret

00000f34 <_exit>:
 f34:	f8 94       	cli

00000f36 <__stop_program>:
 f36:	ff cf       	rjmp	.-2      	; 0xf36 <__stop_program>
