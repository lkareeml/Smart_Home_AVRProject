
Smart_Home_D66.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000470  00800060  00000f52  00000fe6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008004d0  008004d0  00001456  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e0  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b0a  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001119  00000000  00000000  000055ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000228e  00000000  00000000  000066c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cb8  00000000  00000000  00008958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001422  00000000  00000000  00009610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cfe  00000000  00000000  0000aa32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000538  00000000  00000000  0000c730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3d       	cpi	r26, 0xD0	; 208
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a0 ed       	ldi	r26, 0xD0	; 208
  7a:	b4 e0       	ldi	r27, 0x04	; 4
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3e       	cpi	r26, 0xEA	; 234
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <main>
  8a:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AC_Initialization>:
uint8 AC_State_Auto = 0;
uint8 AC_State = 0;

void AC_Initialization()
{
	DIO_Set_Pin_Direction(AC_Port,AC_Pin,Out);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
  9c:	08 95       	ret

0000009e <AC_On>:
}
void AC_On(){
	DIO_Set_Pin_Output(AC_Port,AC_Pin,High);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
  a8:	08 95       	ret

000000aa <AC_Off>:
}
void AC_Off(){
	DIO_Set_Pin_Output(AC_Port,AC_Pin,Low);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
  b4:	08 95       	ret

000000b6 <AC_Feedback>:

void AC_Feedback(uint8 New_Feed){
	//1 Means Turn Automatic AC
	//2 Means Turn Off AC Manual
	//3 Means Turn On AC Manual
	switch(New_Feed){
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	c9 f0       	breq	.+50     	; 0xec <AC_Feedback+0x36>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	71 f1       	breq	.+92     	; 0x11a <AC_Feedback+0x64>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	09 f0       	breq	.+2      	; 0xc4 <AC_Feedback+0xe>
  c2:	43 c0       	rjmp	.+134    	; 0x14a <AC_Feedback+0x94>
		case 1:
			switch(AC_State_Auto){
  c4:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <AC_State_Auto>
  c8:	88 23       	and	r24, r24
  ca:	19 f0       	breq	.+6      	; 0xd2 <AC_Feedback+0x1c>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	49 f0       	breq	.+18     	; 0xe2 <AC_Feedback+0x2c>
  d0:	08 95       	ret
				case 0 :
				AC_State_Auto = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <AC_State_Auto>
				UART_Send_String_Polling_8("AC Auto Success!");
  d8:	8a e9       	ldi	r24, 0x9A	; 154
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
				break;
  e0:	08 95       	ret
				case 1:
				UART_Send_String_Polling_8("AC is Already Auto!");
  e2:	8b ea       	ldi	r24, 0xAB	; 171
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
				break;
  ea:	08 95       	ret
			}
			break;
		case 2:
			switch(AC_State){
  ec:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <__data_end>
  f0:	88 23       	and	r24, r24
  f2:	19 f0       	breq	.+6      	; 0xfa <AC_Feedback+0x44>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	31 f0       	breq	.+12     	; 0x104 <AC_Feedback+0x4e>
  f8:	08 95       	ret
				case 0 :
					UART_Send_String_Polling_8("AC is Already Closed!");
  fa:	8f eb       	ldi	r24, 0xBF	; 191
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
					break;
 102:	08 95       	ret
				case 1:
					AC_Off();
 104:	0e 94 55 00 	call	0xaa	; 0xaa <AC_Off>
					AC_State = 0;
 108:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <__data_end>
					AC_State_Auto = 0;
 10c:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <AC_State_Auto>
					UART_Send_String_Polling_8("AC Turned Off Success!");
 110:	85 ed       	ldi	r24, 0xD5	; 213
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
					break;
 118:	08 95       	ret
			}
			break;
		case 3:
			switch(AC_State){
 11a:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <__data_end>
 11e:	88 23       	and	r24, r24
 120:	19 f0       	breq	.+6      	; 0x128 <AC_Feedback+0x72>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	69 f0       	breq	.+26     	; 0x140 <AC_Feedback+0x8a>
 126:	08 95       	ret
				case 0 :
					AC_On();
 128:	0e 94 4f 00 	call	0x9e	; 0x9e <AC_On>
					AC_State = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <__data_end>
					AC_State_Auto = 0;
 132:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <AC_State_Auto>
					UART_Send_String_Polling_8("AC Turned On Success!");
 136:	8c ee       	ldi	r24, 0xEC	; 236
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
					break;
 13e:	08 95       	ret
				case 1:
					UART_Send_String_Polling_8("AC Already Turned ON!");
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
					break;
 148:	08 95       	ret
			}
			break;
		default:UART_Show_Invalid();break;
 14a:	0e 94 ac 06 	call	0xd58	; 0xd58 <UART_Show_Invalid>
 14e:	08 95       	ret

00000150 <BUZZER_On>:
	DIO_Set_Pin_Output(PORTAx,Pin3,High);
}

void BUZZER_Off()
{
	DIO_Set_Pin_Output(PORTAx,Pin3,Low);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	63 e0       	ldi	r22, 0x03	; 3
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 15a:	08 95       	ret

0000015c <BUZZER_ALARM_TILL_RESET>:
}

void BUZZER_ALARM_TILL_RESET()
{
	GIE_Disable();
 15c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GIE_Disable>
	BUZZER_On();
 160:	0e 94 a8 00 	call	0x150	; 0x150 <BUZZER_On>
 164:	ff cf       	rjmp	.-2      	; 0x164 <BUZZER_ALARM_TILL_RESET+0x8>

00000166 <__vector_11>:
	if(G_Dimmer_Value >= 50){
		G_Dimmer_Value--;
	}
}
void Dimmer_On(){
	G_Dimmer_Value = 50;	
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
 188:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <Dimmercounter.1765>
 18c:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <G_Dimmer_Value>
 190:	98 17       	cp	r25, r24
 192:	30 f4       	brcc	.+12     	; 0x1a0 <__vector_11+0x3a>
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	63 e0       	ldi	r22, 0x03	; 3
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <__vector_11+0x48>
 1a0:	98 17       	cp	r25, r24
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <__vector_11+0x48>
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 1ae:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <Dimmercounter.1765>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <Dimmercounter.1765>
 1b8:	8e 3f       	cpi	r24, 0xFE	; 254
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <__vector_11+0x5a>
 1bc:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <Dimmercounter.1765>
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <Dimmer_Init>:
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
 1ec:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <Timer0_Init>
 1f0:	0e 94 0a 06 	call	0xc14	; 0xc14 <Timer0_Enable_Overflow_Interrupt>
 1f4:	08 95       	ret

000001f6 <Dimmer_Feedback>:
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	e9 f0       	breq	.+58     	; 0x234 <Dimmer_Feedback+0x3e>
 1fa:	18 f4       	brcc	.+6      	; 0x202 <Dimmer_Feedback+0xc>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	31 f0       	breq	.+12     	; 0x20c <Dimmer_Feedback+0x16>
 200:	08 95       	ret
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	51 f1       	breq	.+84     	; 0x25a <Dimmer_Feedback+0x64>
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	d1 f1       	breq	.+116    	; 0x27e <Dimmer_Feedback+0x88>
 20a:	08 95       	ret
 20c:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <G_Dimmer_Value>
 210:	8a 3f       	cpi	r24, 0xFA	; 250
 212:	29 f4       	brne	.+10     	; 0x21e <Dimmer_Feedback+0x28>
 214:	88 e1       	ldi	r24, 0x18	; 24
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 21c:	08 95       	ret
 21e:	8a 3f       	cpi	r24, 0xFA	; 250
 220:	08 f0       	brcs	.+2      	; 0x224 <Dimmer_Feedback+0x2e>
 222:	3f c0       	rjmp	.+126    	; 0x2a2 <Dimmer_Feedback+0xac>
 224:	8e 5c       	subi	r24, 0xCE	; 206
 226:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <G_Dimmer_Value>
 22a:	85 e2       	ldi	r24, 0x25	; 37
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 232:	08 95       	ret
 234:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <G_Dimmer_Value>
 238:	81 11       	cpse	r24, r1
 23a:	05 c0       	rjmp	.+10     	; 0x246 <Dimmer_Feedback+0x50>
 23c:	87 e3       	ldi	r24, 0x37	; 55
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 244:	08 95       	ret
 246:	88 23       	and	r24, r24
 248:	61 f1       	breq	.+88     	; 0x2a2 <Dimmer_Feedback+0xac>
 24a:	82 53       	subi	r24, 0x32	; 50
 24c:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <G_Dimmer_Value>
 250:	84 e4       	ldi	r24, 0x44	; 68
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 258:	08 95       	ret
 25a:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <G_Dimmer_Value>
 25e:	81 11       	cpse	r24, r1
 260:	05 c0       	rjmp	.+10     	; 0x26c <Dimmer_Feedback+0x76>
 262:	86 e5       	ldi	r24, 0x56	; 86
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 26a:	08 95       	ret
 26c:	88 23       	and	r24, r24
 26e:	c9 f0       	breq	.+50     	; 0x2a2 <Dimmer_Feedback+0xac>
 270:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <G_Dimmer_Value>
 274:	83 e6       	ldi	r24, 0x63	; 99
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 27c:	08 95       	ret
 27e:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <G_Dimmer_Value>
 282:	81 11       	cpse	r24, r1
 284:	08 c0       	rjmp	.+16     	; 0x296 <Dimmer_Feedback+0xa0>
 286:	8e 5c       	subi	r24, 0xCE	; 206
 288:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <G_Dimmer_Value>
 28c:	85 e7       	ldi	r24, 0x75	; 117
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 294:	08 95       	ret
 296:	88 23       	and	r24, r24
 298:	21 f0       	breq	.+8      	; 0x2a2 <Dimmer_Feedback+0xac>
 29a:	86 e8       	ldi	r24, 0x86	; 134
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 2a2:	08 95       	ret

000002a4 <Dimmer_Off>:
}
void Dimmer_Off(){
	G_Dimmer_Value = 0;
 2a4:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <G_Dimmer_Value>
 2a8:	08 95       	ret

000002aa <Door_Feedback>:
*/

uint8 door_state = 0;// 0 is closed, 1 is open

void Door_Feedback(uint8 New_Feed){
	switch(New_Feed){
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	a9 f0       	breq	.+42     	; 0x2d8 <Door_Feedback+0x2e>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	31 f5       	brne	.+76     	; 0x2fe <Door_Feedback+0x54>
		case 2: 
			switch(door_state)
 2b2:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <door_state>
 2b6:	88 23       	and	r24, r24
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <Door_Feedback+0x16>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	31 f0       	breq	.+12     	; 0x2ca <Door_Feedback+0x20>
 2be:	08 95       	ret
			{
				case 0 :
					UART_Send_String_Polling_8("Door is Already Closed!");
 2c0:	82 e9       	ldi	r24, 0x92	; 146
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
					break;
 2c8:	08 95       	ret
				case 1:
					door_state = 0;
 2ca:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <door_state>
					UART_Send_String_Polling_8("Door Closed Success!");
 2ce:	8a ea       	ldi	r24, 0xAA	; 170
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
					break;
 2d6:	08 95       	ret
			}
			break;
		case 1:
			switch(door_state)
 2d8:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <door_state>
 2dc:	88 23       	and	r24, r24
 2de:	19 f0       	breq	.+6      	; 0x2e6 <Door_Feedback+0x3c>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	49 f0       	breq	.+18     	; 0x2f6 <Door_Feedback+0x4c>
 2e4:	08 95       	ret
			{
				case 0 :
					door_state = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <door_state>
					UART_Send_String_Polling_8("Door Opened Success!");
 2ec:	8f eb       	ldi	r24, 0xBF	; 191
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
					break;
 2f4:	08 95       	ret
				case 1:
					
					UART_Send_String_Polling_8("Door is Already Opened!");
 2f6:	84 ed       	ldi	r24, 0xD4	; 212
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 2fe:	08 95       	ret

00000300 <__vector_7>:
			break;	
	}
}

ISR(TIMER1_COMPA_vect) // Timer1 compare match interrupt
{
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	static uint8 counter = 0;
	// Start if counter = 0 by making Servo Pin high
	if(counter==0){DIO_Set_Pin_Output(PORTDx,Pin7,High);}
 322:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <counter.1904>
 326:	81 11       	cpse	r24, r1
 328:	06 c0       	rjmp	.+12     	; 0x336 <__vector_7+0x36>
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	67 e0       	ldi	r22, 0x07	; 7
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 334:	17 c0       	rjmp	.+46     	; 0x364 <__vector_7+0x64>
	else if(counter == 1){
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	51 f4       	brne	.+20     	; 0x34e <__vector_7+0x4e>
		if(door_state == 0){
 33a:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <door_state>
 33e:	81 11       	cpse	r24, r1
 340:	11 c0       	rjmp	.+34     	; 0x364 <__vector_7+0x64>
			DIO_Set_Pin_Output(PORTDx,Pin7,Low);
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	67 e0       	ldi	r22, 0x07	; 7
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 34c:	0b c0       	rjmp	.+22     	; 0x364 <__vector_7+0x64>
		}
	}
	else if(counter == 5){
 34e:	85 30       	cpi	r24, 0x05	; 5
 350:	49 f4       	brne	.+18     	; 0x364 <__vector_7+0x64>
		if(door_state == 1){
 352:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <door_state>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	29 f4       	brne	.+10     	; 0x364 <__vector_7+0x64>
			DIO_Set_Pin_Output(PORTDx,Pin7,Low);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	67 e0       	ldi	r22, 0x07	; 7
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
		}
	}
	if(counter<40){counter++;}
 364:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <counter.1904>
 368:	88 32       	cpi	r24, 0x28	; 40
 36a:	20 f4       	brcc	.+8      	; 0x374 <__vector_7+0x74>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <counter.1904>
 372:	02 c0       	rjmp	.+4      	; 0x378 <__vector_7+0x78>
	else {counter = 0;}
 374:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <counter.1904>
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <Servo_Init>:


void Servo_Init(){
	DIO_Set_Pin_Direction(PORTDx,Pin7,Out);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	67 e0       	ldi	r22, 0x07	; 7
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Output(PORTDx,Pin7,Low);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	67 e0       	ldi	r22, 0x07	; 7
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
	// Set the Prescaler to 8
	// Set WGM12 to enable CTC mode
	TCCR1B_Reg |= (1 << WGM12) | (1 << CS11);
 3ae:	8e b5       	in	r24, 0x2e	; 46
 3b0:	8a 60       	ori	r24, 0x0A	; 10
 3b2:	8e bd       	out	0x2e, r24	; 46
	// Set OCR1A to generate an interrupt every 0.5 ms
	// Set TOP value for 0.5ms period
	// Set OCR1A to 1000
	OCR1AH_Reg = 0x03; // High byte 00000011
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	8b bd       	out	0x2b, r24	; 43
	OCR1AL_Reg = 0xE8; // Low byte 11101000    0000001111101000
 3b8:	88 ee       	ldi	r24, 0xE8	; 232
 3ba:	8a bd       	out	0x2a, r24	; 42
	// Enable Timer/Counter1 Output Compare Match A interrupt
	TIMSK_Reg |= (1 << OCIE1A);
 3bc:	89 b7       	in	r24, 0x39	; 57
 3be:	80 61       	ori	r24, 0x10	; 16
 3c0:	89 bf       	out	0x39, r24	; 57
	GIE_Enable(); // Enable global interrupts
 3c2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <GIE_Enable>
 3c6:	08 95       	ret

000003c8 <EEPROM_Init>:
	uint32 Number = 0;
	for(int i =0;i<4;i++){
		Number |= (uint32)(EEPROM_Read_Byte(Address+i)<<((3-i)*8));
	}
	return Number;
}
 3c8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <TWI_Init>
 3cc:	08 95       	ret

000003ce <EEPROM_Read_Byte>:
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	8c 01       	movw	r16, r24
 3d8:	17 70       	andi	r17, 0x07	; 7
 3da:	12 fb       	bst	r17, 2
 3dc:	cc 27       	eor	r28, r28
 3de:	c0 f9       	bld	r28, 0
 3e0:	cc 0f       	add	r28, r28
 3e2:	cc 0f       	add	r28, r28
 3e4:	cc 0f       	add	r28, r28
 3e6:	11 fb       	bst	r17, 1
 3e8:	88 27       	eor	r24, r24
 3ea:	80 f9       	bld	r24, 0
 3ec:	88 0f       	add	r24, r24
 3ee:	88 0f       	add	r24, r24
 3f0:	c8 2b       	or	r28, r24
 3f2:	81 2f       	mov	r24, r17
 3f4:	81 70       	andi	r24, 0x01	; 1
 3f6:	88 0f       	add	r24, r24
 3f8:	c8 2b       	or	r28, r24
 3fa:	c0 6a       	ori	r28, 0xA0	; 160
 3fc:	d1 e0       	ldi	r29, 0x01	; 1
 3fe:	dc 0f       	add	r29, r28
 400:	0e 94 28 06 	call	0xc50	; 0xc50 <TWI_MSTR_Send_Start>
 404:	88 e0       	ldi	r24, 0x08	; 8
 406:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	31 f5       	brne	.+76     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 40e:	8c 2f       	mov	r24, r28
 410:	0e 94 3a 06 	call	0xc74	; 0xc74 <TWI_Send_Data>
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	01 f5       	brne	.+64     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 41e:	80 2f       	mov	r24, r16
 420:	0e 94 3a 06 	call	0xc74	; 0xc74 <TWI_Send_Data>
 424:	88 e2       	ldi	r24, 0x28	; 40
 426:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	d1 f4       	brne	.+52     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 42e:	0e 94 28 06 	call	0xc50	; 0xc50 <TWI_MSTR_Send_Start>
 432:	80 e1       	ldi	r24, 0x10	; 16
 434:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	a9 f4       	brne	.+42     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 43c:	8d 2f       	mov	r24, r29
 43e:	0e 94 3a 06 	call	0xc74	; 0xc74 <TWI_Send_Data>
 442:	80 e4       	ldi	r24, 0x40	; 64
 444:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	79 f4       	brne	.+30     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <TWI_Receive_Data>
 452:	c8 2f       	mov	r28, r24
 454:	0e 94 25 06 	call	0xc4a	; 0xc4a <TWI_Send_Stop>
 458:	09 c0       	rjmp	.+18     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 45a:	c0 e0       	ldi	r28, 0x00	; 0
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	05 c0       	rjmp	.+10     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 462:	c0 e0       	ldi	r28, 0x00	; 0
 464:	03 c0       	rjmp	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 466:	c0 e0       	ldi	r28, 0x00	; 0
 468:	01 c0       	rjmp	.+2      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46a:	c0 e0       	ldi	r28, 0x00	; 0
 46c:	8f e1       	ldi	r24, 0x1F	; 31
 46e:	9e e4       	ldi	r25, 0x4E	; 78
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 476:	00 00       	nop
 478:	8c 2f       	mov	r24, r28
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	08 95       	ret

00000484 <EEPROM_Write_Byte>:
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	d8 2f       	mov	r29, r24
 48c:	16 2f       	mov	r17, r22
 48e:	92 fb       	bst	r25, 2
 490:	88 27       	eor	r24, r24
 492:	80 f9       	bld	r24, 0
 494:	28 2f       	mov	r18, r24
 496:	22 0f       	add	r18, r18
 498:	22 0f       	add	r18, r18
 49a:	22 0f       	add	r18, r18
 49c:	91 fb       	bst	r25, 1
 49e:	88 27       	eor	r24, r24
 4a0:	80 f9       	bld	r24, 0
 4a2:	88 0f       	add	r24, r24
 4a4:	88 0f       	add	r24, r24
 4a6:	82 2b       	or	r24, r18
 4a8:	91 70       	andi	r25, 0x01	; 1
 4aa:	99 0f       	add	r25, r25
 4ac:	98 2b       	or	r25, r24
 4ae:	c9 2f       	mov	r28, r25
 4b0:	c0 6a       	ori	r28, 0xA0	; 160
 4b2:	0e 94 28 06 	call	0xc50	; 0xc50 <TWI_MSTR_Send_Start>
 4b6:	88 e0       	ldi	r24, 0x08	; 8
 4b8:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	01 f5       	brne	.+64     	; 0x500 <EEPROM_Write_Byte+0x7c>
 4c0:	8c 2f       	mov	r24, r28
 4c2:	0e 94 3a 06 	call	0xc74	; 0xc74 <TWI_Send_Data>
 4c6:	88 e1       	ldi	r24, 0x18	; 24
 4c8:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	c1 f4       	brne	.+48     	; 0x500 <EEPROM_Write_Byte+0x7c>
 4d0:	8d 2f       	mov	r24, r29
 4d2:	0e 94 3a 06 	call	0xc74	; 0xc74 <TWI_Send_Data>
 4d6:	88 e2       	ldi	r24, 0x28	; 40
 4d8:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 4dc:	88 23       	and	r24, r24
 4de:	81 f0       	breq	.+32     	; 0x500 <EEPROM_Write_Byte+0x7c>
 4e0:	81 2f       	mov	r24, r17
 4e2:	0e 94 3a 06 	call	0xc74	; 0xc74 <TWI_Send_Data>
 4e6:	88 e2       	ldi	r24, 0x28	; 40
 4e8:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_Check_Status>
 4ec:	88 23       	and	r24, r24
 4ee:	41 f0       	breq	.+16     	; 0x500 <EEPROM_Write_Byte+0x7c>
 4f0:	0e 94 25 06 	call	0xc4a	; 0xc4a <TWI_Send_Stop>
 4f4:	8f e1       	ldi	r24, 0x1F	; 31
 4f6:	9e e4       	ldi	r25, 0x4E	; 78
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <EEPROM_Write_Byte+0x74>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <EEPROM_Write_Byte+0x7a>
 4fe:	00 00       	nop
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	08 95       	ret

00000508 <EEPROM_Write_String>:
 508:	ef 92       	push	r14
 50a:	ff 92       	push	r15
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	8c 01       	movw	r16, r24
 514:	7b 01       	movw	r14, r22
 516:	c0 e0       	ldi	r28, 0x00	; 0
 518:	05 c0       	rjmp	.+10     	; 0x524 <EEPROM_Write_String+0x1c>
 51a:	80 0f       	add	r24, r16
 51c:	91 1f       	adc	r25, r17
 51e:	0e 94 42 02 	call	0x484	; 0x484 <EEPROM_Write_Byte>
 522:	cf 5f       	subi	r28, 0xFF	; 255
 524:	8c 2f       	mov	r24, r28
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	f7 01       	movw	r30, r14
 52a:	e8 0f       	add	r30, r24
 52c:	f9 1f       	adc	r31, r25
 52e:	60 81       	ld	r22, Z
 530:	61 11       	cpse	r22, r1
 532:	f3 cf       	rjmp	.-26     	; 0x51a <EEPROM_Write_String+0x12>
 534:	80 0f       	add	r24, r16
 536:	91 1f       	adc	r25, r17
 538:	0e 94 42 02 	call	0x484	; 0x484 <EEPROM_Write_Byte>
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	08 95       	ret

00000548 <EEPROM_Read_String>:
 548:	cf 92       	push	r12
 54a:	df 92       	push	r13
 54c:	ef 92       	push	r14
 54e:	ff 92       	push	r15
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	6c 01       	movw	r12, r24
 558:	7b 01       	movw	r14, r22
 55a:	10 e0       	ldi	r17, 0x00	; 0
 55c:	06 c0       	rjmp	.+12     	; 0x56a <EEPROM_Read_String+0x22>
 55e:	8c 0d       	add	r24, r12
 560:	9d 1d       	adc	r25, r13
 562:	0e 94 e7 01 	call	0x3ce	; 0x3ce <EEPROM_Read_Byte>
 566:	88 83       	st	Y, r24
 568:	1f 5f       	subi	r17, 0xFF	; 255
 56a:	81 2f       	mov	r24, r17
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	e7 01       	movw	r28, r14
 570:	c8 0f       	add	r28, r24
 572:	d9 1f       	adc	r29, r25
 574:	28 81       	ld	r18, Y
 576:	21 11       	cpse	r18, r1
 578:	f2 cf       	rjmp	.-28     	; 0x55e <EEPROM_Read_String+0x16>
 57a:	18 82       	st	Y, r1
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	cf 90       	pop	r12
 58a:	08 95       	ret

0000058c <EEPROM_Read_Data>:


void EEPROM_Read_Data(uint8 UserID,sint8 * Data, uint8 DataType){	
	//DataType = 1 -- Password + 1 //DataType = 2 -- Username +10
	uint16 Marker = 0;
	if(UserID == 99) Marker = 10;
 58c:	83 36       	cpi	r24, 0x63	; 99
 58e:	31 f0       	breq	.+12     	; 0x59c <EEPROM_Read_Data+0x10>
	else Marker = (UserID*20) + 10;
 590:	24 e1       	ldi	r18, 0x14	; 20
 592:	82 9f       	mul	r24, r18
 594:	c0 01       	movw	r24, r0
 596:	11 24       	eor	r1, r1
 598:	0a 96       	adiw	r24, 0x0a	; 10
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <EEPROM_Read_Data+0x14>


void EEPROM_Read_Data(uint8 UserID,sint8 * Data, uint8 DataType){	
	//DataType = 1 -- Password + 1 //DataType = 2 -- Username +10
	uint16 Marker = 0;
	if(UserID == 99) Marker = 10;
 59c:	8a e0       	ldi	r24, 0x0A	; 10
 59e:	90 e0       	ldi	r25, 0x00	; 0
	else Marker = (UserID*20) + 10;
	
	switch(DataType){
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	19 f0       	breq	.+6      	; 0x5aa <EEPROM_Read_Data+0x1e>
 5a4:	42 30       	cpi	r20, 0x02	; 2
 5a6:	29 f0       	breq	.+10     	; 0x5b2 <EEPROM_Read_Data+0x26>
 5a8:	08 95       	ret
		case 1: EEPROM_Read_String(Marker+1,Data); break;
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0e 94 a4 02 	call	0x548	; 0x548 <EEPROM_Read_String>
 5b0:	08 95       	ret
		case 2: EEPROM_Read_String(Marker+10,Data); break;
 5b2:	0a 96       	adiw	r24, 0x0a	; 10
 5b4:	0e 94 a4 02 	call	0x548	; 0x548 <EEPROM_Read_String>
 5b8:	08 95       	ret

000005ba <EEPROM_Read_UserID_Exist>:
	}
}
uint8 EEPROM_Read_UserID_Exist(uint8 UserID){
	uint16 Marker = 0;
	if(UserID == 99){
 5ba:	83 36       	cpi	r24, 0x63	; 99
 5bc:	31 f0       	breq	.+12     	; 0x5ca <EEPROM_Read_UserID_Exist+0x10>
		Marker = 10;
	}else{
		Marker = (UserID*20) + 10;
 5be:	24 e1       	ldi	r18, 0x14	; 20
 5c0:	82 9f       	mul	r24, r18
 5c2:	c0 01       	movw	r24, r0
 5c4:	11 24       	eor	r1, r1
 5c6:	0a 96       	adiw	r24, 0x0a	; 10
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <EEPROM_Read_UserID_Exist+0x14>
	}
}
uint8 EEPROM_Read_UserID_Exist(uint8 UserID){
	uint16 Marker = 0;
	if(UserID == 99){
		Marker = 10;
 5ca:	8a e0       	ldi	r24, 0x0A	; 10
 5cc:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		Marker = (UserID*20) + 10;
	}	
	return EEPROM_Read_Byte(Marker);
 5ce:	0e 94 e7 01 	call	0x3ce	; 0x3ce <EEPROM_Read_Byte>
}
 5d2:	08 95       	ret

000005d4 <LED_Init_All>:

void LED_0_On(){DIO_Set_Pin_Output(Led0_Port,Led0_Pin,High);}
void LED_1_On(){DIO_Set_Pin_Output(Led1_Port,Led1_Pin,High);}
void LED_2_On(){DIO_Set_Pin_Output(Led2_Port,Led2_Pin,High);}
void LED_3_On(){DIO_Set_Pin_Output(Led3_Port,Led3_Pin,High);}
void LED_4_On(){DIO_Set_Pin_Output(Led4_Port,Led4_Pin,High);}
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	62 e0       	ldi	r22, 0x02	; 2
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	67 e0       	ldi	r22, 0x07	; 7
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	63 e0       	ldi	r22, 0x03	; 3
 5ec:	83 e0       	ldi	r24, 0x03	; 3
 5ee:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	65 e0       	ldi	r22, 0x05	; 5
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
 5fc:	41 e0       	ldi	r20, 0x01	; 1
 5fe:	64 e0       	ldi	r22, 0x04	; 4
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_Set_Pin_Direction>
 610:	08 95       	ret

00000612 <LED_0_Off>:

void LED_0_Off(){DIO_Set_Pin_Output(Led0_Port,Led0_Pin,Low);}
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	62 e0       	ldi	r22, 0x02	; 2
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 61c:	08 95       	ret

0000061e <LED_1_Off>:
void LED_1_Off(){DIO_Set_Pin_Output(Led1_Port,Led1_Pin,Low);}
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	67 e0       	ldi	r22, 0x07	; 7
 622:	82 e0       	ldi	r24, 0x02	; 2
 624:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 628:	08 95       	ret

0000062a <LED_2_Off>:
void LED_2_Off(){DIO_Set_Pin_Output(Led2_Port,Led2_Pin,Low);}
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	63 e0       	ldi	r22, 0x03	; 3
 62e:	83 e0       	ldi	r24, 0x03	; 3
 630:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 634:	08 95       	ret

00000636 <LED_3_Off>:
void LED_3_Off(){DIO_Set_Pin_Output(Led3_Port,Led3_Pin,Low);}
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	65 e0       	ldi	r22, 0x05	; 5
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 640:	08 95       	ret

00000642 <LED_4_Off>:
void LED_4_Off(){DIO_Set_Pin_Output(Led4_Port,Led4_Pin,Low);}
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	64 e0       	ldi	r22, 0x04	; 4
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 64c:	08 95       	ret

0000064e <LED_0_Toggle>:

void LED_0_Toggle(){DIO_Set_Pin_Output(Led0_Port,Led0_Pin,Toggle);}
 64e:	42 e0       	ldi	r20, 0x02	; 2
 650:	62 e0       	ldi	r22, 0x02	; 2
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 658:	08 95       	ret

0000065a <LED_1_Toggle>:
void LED_1_Toggle(){DIO_Set_Pin_Output(Led1_Port,Led1_Pin,Toggle);}
 65a:	42 e0       	ldi	r20, 0x02	; 2
 65c:	67 e0       	ldi	r22, 0x07	; 7
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 664:	08 95       	ret

00000666 <LED_2_Toggle>:
void LED_2_Toggle(){DIO_Set_Pin_Output(Led2_Port,Led2_Pin,Toggle);}
 666:	42 e0       	ldi	r20, 0x02	; 2
 668:	63 e0       	ldi	r22, 0x03	; 3
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 670:	08 95       	ret

00000672 <LED_3_Toggle>:
void LED_3_Toggle(){DIO_Set_Pin_Output(Led3_Port,Led3_Pin,Toggle);}
 672:	42 e0       	ldi	r20, 0x02	; 2
 674:	65 e0       	ldi	r22, 0x05	; 5
 676:	83 e0       	ldi	r24, 0x03	; 3
 678:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 67c:	08 95       	ret

0000067e <LED_4_Toggle>:
void LED_4_Toggle(){DIO_Set_Pin_Output(Led4_Port,Led4_Pin,Toggle);}
 67e:	42 e0       	ldi	r20, 0x02	; 2
 680:	64 e0       	ldi	r22, 0x04	; 4
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	0e 94 46 05 	call	0xa8c	; 0xa8c <DIO_Set_Pin_Output>
 688:	08 95       	ret

0000068a <Smart_Initialization>:
	UART_Flag_Received = 0;
}
void Go_Back(){
	UART_Send_String_Polling_8("Going Back!\n");
	UART_Show_MainMenu();
	global_Flag--;
 68a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED_Init_All>
 68e:	0e 94 0f 03 	call	0x61e	; 0x61e <LED_1_Off>
 692:	0e 94 15 03 	call	0x62a	; 0x62a <LED_2_Off>
 696:	0e 94 1b 03 	call	0x636	; 0x636 <LED_3_Off>
 69a:	0e 94 21 03 	call	0x642	; 0x642 <LED_4_Off>
 69e:	0e 94 09 03 	call	0x612	; 0x612 <LED_0_Off>
 6a2:	0e 94 49 00 	call	0x92	; 0x92 <AC_Initialization>
 6a6:	0e 94 cd 01 	call	0x39a	; 0x39a <Servo_Init>
 6aa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Dimmer_Init>
 6ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Dimmer_Off>
 6b2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <EEPROM_Init>
 6b6:	0e 94 45 06 	call	0xc8a	; 0xc8a <UART_Init>
 6ba:	0e 94 41 06 	call	0xc82	; 0xc82 <UART_Enable_RX_Interrupt>
 6be:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <GIE_Enable>
 6c2:	08 95       	ret

000006c4 <__vector_13>:
 6c4:	1f 92       	push	r1
 6c6:	0f 92       	push	r0
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	0f 92       	push	r0
 6cc:	11 24       	eor	r1, r1
 6ce:	2f 93       	push	r18
 6d0:	3f 93       	push	r19
 6d2:	4f 93       	push	r20
 6d4:	5f 93       	push	r21
 6d6:	6f 93       	push	r22
 6d8:	7f 93       	push	r23
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
 6e2:	ef 93       	push	r30
 6e4:	ff 93       	push	r31
 6e6:	82 ee       	ldi	r24, 0xE2	; 226
 6e8:	94 e0       	ldi	r25, 0x04	; 4
 6ea:	0e 94 85 06 	call	0xd0a	; 0xd0a <UART_Recieve_String_8>
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <UART_Flag_Received>
 6f4:	ff 91       	pop	r31
 6f6:	ef 91       	pop	r30
 6f8:	bf 91       	pop	r27
 6fa:	af 91       	pop	r26
 6fc:	9f 91       	pop	r25
 6fe:	8f 91       	pop	r24
 700:	7f 91       	pop	r23
 702:	6f 91       	pop	r22
 704:	5f 91       	pop	r21
 706:	4f 91       	pop	r20
 708:	3f 91       	pop	r19
 70a:	2f 91       	pop	r18
 70c:	0f 90       	pop	r0
 70e:	0f be       	out	0x3f, r0	; 63
 710:	0f 90       	pop	r0
 712:	1f 90       	pop	r1
 714:	18 95       	reti

00000716 <Clear_Token>:
 716:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <UART_Flag_Received>
 71a:	08 95       	ret

0000071c <Go_Next>:
}
void Go_Next(){
	Clear_Token();
 71c:	0e 94 8b 03 	call	0x716	; 0x716 <Clear_Token>
	global_Flag++;
 720:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <global_Flag>
 724:	8f 5f       	subi	r24, 0xFF	; 255
 726:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <global_Flag>
 72a:	08 95       	ret

0000072c <Go_To>:
}

void Go_To(uint8 Flag){
 72c:	cf 93       	push	r28
 72e:	c8 2f       	mov	r28, r24
	Clear_Token();
 730:	0e 94 8b 03 	call	0x716	; 0x716 <Clear_Token>
	global_Flag = Flag;
 734:	c0 93 79 00 	sts	0x0079, r28	; 0x800079 <global_Flag>
}
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <UART_Login_Failed>:
void UART_Login_Failed(){
	UART_Send_String_Polling_8("Login Failed, Try again! ");
 73c:	89 ef       	ldi	r24, 0xF9	; 249
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
	UART_Send_Byte_Polling_8(FailCount + 48);
 744:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <FailCount>
 748:	80 5d       	subi	r24, 0xD0	; 208
 74a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <UART_Send_Byte_Polling_8>
	UART_Send_String_Polling_8(" \n");
 74e:	80 e3       	ldi	r24, 0x30	; 48
 750:	94 e0       	ldi	r25, 0x04	; 4
 752:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 756:	08 95       	ret

00000758 <UART_Process>:
}

void UART_Process(){
	if(UART_Flag_Received == 1){
 758:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <UART_Flag_Received>
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	09 f0       	breq	.+2      	; 0x762 <UART_Process+0xa>
 760:	ba c0       	rjmp	.+372    	; 0x8d6 <__stack+0x77>
		UART_Flag_Received = 0;
 762:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <UART_Flag_Received>
		
	switch(global_Flag){
 766:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <global_Flag>
 76a:	83 30       	cpi	r24, 0x03	; 3
 76c:	e9 f0       	breq	.+58     	; 0x7a8 <UART_Process+0x50>
 76e:	28 f4       	brcc	.+10     	; 0x77a <UART_Process+0x22>
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	51 f0       	breq	.+20     	; 0x788 <UART_Process+0x30>
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	69 f0       	breq	.+26     	; 0x792 <UART_Process+0x3a>
 778:	08 95       	ret
 77a:	84 30       	cpi	r24, 0x04	; 4
 77c:	09 f4       	brne	.+2      	; 0x780 <UART_Process+0x28>
 77e:	5e c0       	rjmp	.+188    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 780:	85 30       	cpi	r24, 0x05	; 5
 782:	09 f4       	brne	.+2      	; 0x786 <UART_Process+0x2e>
 784:	6b c0       	rjmp	.+214    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 786:	08 95       	ret
		/************************* Login Process *************************/
		case 1://Just Started, User Not loggedIn, user sent anything
			UART_Show_Request_UserID();Go_Next();break;
 788:	0e 94 a2 06 	call	0xd44	; 0xd44 <UART_Show_Request_UserID>
 78c:	0e 94 8e 03 	call	0x71c	; 0x71c <Go_Next>
 790:	08 95       	ret
		case 2: // we got user input for userID now we validate it
			strcpy(UART_UserID,Buffer);// Copy Buffer To USERID
 792:	62 ee       	ldi	r22, 0xE2	; 226
 794:	74 e0       	ldi	r23, 0x04	; 4
 796:	81 e7       	ldi	r24, 0x71	; 113
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 98 07 	call	0xf30	; 0xf30 <strcpy>
			UART_Show_Request_Password();Go_Next();break;
 79e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <UART_Show_Request_Password>
 7a2:	0e 94 8e 03 	call	0x71c	; 0x71c <Go_Next>
 7a6:	08 95       	ret
		case 3:// login Process
			strcpy(UART_Password,Buffer);// Copy Buffer to Password
 7a8:	62 ee       	ldi	r22, 0xE2	; 226
 7aa:	74 e0       	ldi	r23, 0x04	; 4
 7ac:	86 ed       	ldi	r24, 0xD6	; 214
 7ae:	94 e0       	ldi	r25, 0x04	; 4
 7b0:	0e 94 98 07 	call	0xf30	; 0xf30 <strcpy>
//			atoi ascii to integer || itoa integer to ascii
			User_ID = atoi(UART_UserID);
 7b4:	81 e7       	ldi	r24, 0x71	; 113
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 71 07 	call	0xee2	; 0xee2 <atoi>
 7bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <User_ID>
//			Check if User Exists
			if(EEPROM_Read_UserID_Exist(User_ID)){
 7c0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <EEPROM_Read_UserID_Exist>
 7c4:	88 23       	and	r24, r24
 7c6:	71 f0       	breq	.+28     	; 0x7e4 <UART_Process+0x8c>
				// Get Username and Password
				EEPROM_Read_Data(User_ID,EEPROM_Username,2);
 7c8:	42 e0       	ldi	r20, 0x02	; 2
 7ca:	68 e6       	ldi	r22, 0x68	; 104
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <User_ID>
 7d2:	0e 94 c6 02 	call	0x58c	; 0x58c <EEPROM_Read_Data>
				EEPROM_Read_Data(User_ID,EEPROM_Password,1);				
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	60 e6       	ldi	r22, 0x60	; 96
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <User_ID>
 7e0:	0e 94 c6 02 	call	0x58c	; 0x58c <EEPROM_Read_Data>
			}
			// User and password Compare!
			if(strcmp(EEPROM_Password,UART_Password)==0){
 7e4:	66 ed       	ldi	r22, 0xD6	; 214
 7e6:	74 e0       	ldi	r23, 0x04	; 4
 7e8:	80 e6       	ldi	r24, 0x60	; 96
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 8f 07 	call	0xf1e	; 0xf1e <strcmp>
 7f0:	89 2b       	or	r24, r25
 7f2:	89 f4       	brne	.+34     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
				UART_Send_String_Polling_8("Welcome Back! ");
 7f4:	83 e1       	ldi	r24, 0x13	; 19
 7f6:	92 e0       	ldi	r25, 0x02	; 2
 7f8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
				UART_Send_String_Polling_8(EEPROM_Username);
 7fc:	88 e6       	ldi	r24, 0x68	; 104
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
				UART_Send_String_Polling_8("\n");
 804:	81 e3       	ldi	r24, 0x31	; 49
 806:	94 e0       	ldi	r25, 0x04	; 4
 808:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
				UART_Show_MainMenu();
 80c:	0e 94 b1 06 	call	0xd62	; 0xd62 <UART_Show_MainMenu>
				Go_Next();
 810:	0e 94 8e 03 	call	0x71c	; 0x71c <Go_Next>
 814:	08 95       	ret
			}else{
//				If Login Fail, Count Failure, Lock Sys
				FailCount++;
 816:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <FailCount>
 81a:	8f 5f       	subi	r24, 0xFF	; 255
 81c:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <FailCount>
				if(FailCount >= Max_Failure_Login_Count){
 820:	83 30       	cpi	r24, 0x03	; 3
 822:	30 f0       	brcs	.+12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
					UART_Send_String_Polling_8("Login Failed, \nSystem Locked! \n");
 824:	82 e2       	ldi	r24, 0x22	; 34
 826:	92 e0       	ldi	r25, 0x02	; 2
 828:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
					BUZZER_ALARM_TILL_RESET();
 82c:	0e 94 ae 00 	call	0x15c	; 0x15c <BUZZER_ALARM_TILL_RESET>
				}
				UART_Login_Failed();
 830:	0e 94 9e 03 	call	0x73c	; 0x73c <UART_Login_Failed>
				Go_To(1);
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	0e 94 96 03 	call	0x72c	; 0x72c <Go_To>
 83a:	08 95       	ret
			}
			break;		
			
		/********************** End Login Process *************************/
		case 4:// Process choice 1 from MainMenu
			g_choice_1 = atoi(Buffer);
 83c:	82 ee       	ldi	r24, 0xE2	; 226
 83e:	94 e0       	ldi	r25, 0x04	; 4
 840:	0e 94 71 07 	call	0xee2	; 0xee2 <atoi>
 844:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <g_choice_1>
			if(g_choice_1 <= 9 || g_choice_1 != 0){
				UART_Choice_Handler_1(g_choice_1);
 848:	0e 94 2a 07 	call	0xe54	; 0xe54 <UART_Choice_Handler_1>
				Clear_Token();global_Flag++;
 84c:	0e 94 8b 03 	call	0x716	; 0x716 <Clear_Token>
 850:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <global_Flag>
 854:	8f 5f       	subi	r24, 0xFF	; 255
 856:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <global_Flag>
 85a:	08 95       	ret
				Clear_Token();
			}
			break;
			
		case 5:// Process choice 2 from SubMenu
			g_choice_2 = atoi(Buffer);
 85c:	82 ee       	ldi	r24, 0xE2	; 226
 85e:	94 e0       	ldi	r25, 0x04	; 4
 860:	0e 94 71 07 	call	0xee2	; 0xee2 <atoi>
 864:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <g_choice_2>
			if(g_choice_2 > 9){
 868:	8a 30       	cpi	r24, 0x0A	; 10
 86a:	38 f0       	brcs	.+14     	; 0x87a <__stack+0x1b>
				UART_Show_Invalid();
 86c:	0e 94 ac 06 	call	0xd58	; 0xd58 <UART_Show_Invalid>
				UART_Choice_Handler_1(g_choice_1);
 870:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <g_choice_1>
 874:	0e 94 2a 07 	call	0xe54	; 0xe54 <UART_Choice_Handler_1>
				break;
 878:	08 95       	ret
			}
			if(g_choice_2 == 0) {
 87a:	81 11       	cpse	r24, r1
 87c:	08 c0       	rjmp	.+16     	; 0x88e <__stack+0x2f>
				UART_Show_MainMenu();
 87e:	0e 94 b1 06 	call	0xd62	; 0xd62 <UART_Show_MainMenu>
				global_Flag--;
 882:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <global_Flag>
 886:	81 50       	subi	r24, 0x01	; 1
 888:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <global_Flag>
				break;
 88c:	08 95       	ret
			}
			switch(g_choice_1){
 88e:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <g_choice_1>
 892:	92 30       	cpi	r25, 0x02	; 2
 894:	71 f0       	breq	.+28     	; 0x8b2 <__stack+0x53>
 896:	18 f4       	brcc	.+6      	; 0x89e <__stack+0x3f>
 898:	91 30       	cpi	r25, 0x01	; 1
 89a:	31 f0       	breq	.+12     	; 0x8a8 <__stack+0x49>
 89c:	08 95       	ret
 89e:	93 30       	cpi	r25, 0x03	; 3
 8a0:	59 f0       	breq	.+22     	; 0x8b8 <__stack+0x59>
 8a2:	94 30       	cpi	r25, 0x04	; 4
 8a4:	b1 f0       	breq	.+44     	; 0x8d2 <__stack+0x73>
 8a6:	08 95       	ret
				case 1:// LED Controller
					if(g_choice_2 < 6)
 8a8:	86 30       	cpi	r24, 0x06	; 6
 8aa:	a8 f4       	brcc	.+42     	; 0x8d6 <__stack+0x77>
						UART_LED_Feedback(g_choice_2);
 8ac:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_LED_Feedback>
 8b0:	08 95       	ret
					break;
				case 2:// Air Conditioner Controller
					AC_Feedback(g_choice_2);break;
 8b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <AC_Feedback>
 8b6:	08 95       	ret
				case 3:// Door Controller
					if(User_ID != Admin_ID){
 8b8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <User_ID>
 8bc:	93 36       	cpi	r25, 0x63	; 99
 8be:	29 f0       	breq	.+10     	; 0x8ca <__stack+0x6b>
						UART_Send_String_Polling_8("Auth Denied, Ask Admin! \n");
 8c0:	82 e4       	ldi	r24, 0x42	; 66
 8c2:	92 e0       	ldi	r25, 0x02	; 2
 8c4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
						break;
 8c8:	08 95       	ret
					}else{
						Door_Feedback(g_choice_2);break;
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 55 01 	call	0x2aa	; 0x2aa <Door_Feedback>
 8d0:	08 95       	ret
					}
				case 4:// Dimmer Controller
					Dimmer_Feedback(g_choice_2);break;
 8d2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Dimmer_Feedback>
 8d6:	08 95       	ret

000008d8 <main>:
}
}


int main(void)
{
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
 8e0:	a0 97       	sbiw	r28, 0x20	; 32
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	de bf       	out	0x3e, r29	; 62
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	cd bf       	out	0x3d, r28	; 61
	Smart_Initialization();
 8ec:	0e 94 45 03 	call	0x68a	; 0x68a <Smart_Initialization>

	sint8 Admin_username[8] = "Kareem";
 8f0:	87 e0       	ldi	r24, 0x07	; 7
 8f2:	ea e7       	ldi	r30, 0x7A	; 122
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	de 01       	movw	r26, r28
 8f8:	11 96       	adiw	r26, 0x01	; 1
 8fa:	01 90       	ld	r0, Z+
 8fc:	0d 92       	st	X+, r0
 8fe:	8a 95       	dec	r24
 900:	e1 f7       	brne	.-8      	; 0x8fa <main+0x22>
 902:	18 86       	std	Y+8, r1	; 0x08
	sint8 Admin_password[8] = "1234";
 904:	85 e0       	ldi	r24, 0x05	; 5
 906:	e2 e8       	ldi	r30, 0x82	; 130
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	de 01       	movw	r26, r28
 90c:	19 96       	adiw	r26, 0x09	; 9
 90e:	01 90       	ld	r0, Z+
 910:	0d 92       	st	X+, r0
 912:	8a 95       	dec	r24
 914:	e1 f7       	brne	.-8      	; 0x90e <main+0x36>
 916:	13 e0       	ldi	r17, 0x03	; 3
 918:	fe 01       	movw	r30, r28
 91a:	3e 96       	adiw	r30, 0x0e	; 14
 91c:	df 01       	movw	r26, r30
 91e:	81 2f       	mov	r24, r17
 920:	1d 92       	st	X+, r1
 922:	8a 95       	dec	r24
 924:	e9 f7       	brne	.-6      	; 0x920 <main+0x48>
	EEPROM_Write_Byte(10,Admin_ID);
 926:	63 e6       	ldi	r22, 0x63	; 99
 928:	8a e0       	ldi	r24, 0x0A	; 10
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	0e 94 42 02 	call	0x484	; 0x484 <EEPROM_Write_Byte>
	EEPROM_Write_String(11,Admin_password);
 930:	be 01       	movw	r22, r28
 932:	67 5f       	subi	r22, 0xF7	; 247
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8b e0       	ldi	r24, 0x0B	; 11
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 84 02 	call	0x508	; 0x508 <EEPROM_Write_String>
	EEPROM_Write_String(20,Admin_username);
 93e:	be 01       	movw	r22, r28
 940:	6f 5f       	subi	r22, 0xFF	; 255
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	84 e1       	ldi	r24, 0x14	; 20
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 84 02 	call	0x508	; 0x508 <EEPROM_Write_String>
	//User1 Initialize :
	sint8 User1_username[8] = "User1";
 94c:	86 e0       	ldi	r24, 0x06	; 6
 94e:	ea e8       	ldi	r30, 0x8A	; 138
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	de 01       	movw	r26, r28
 954:	51 96       	adiw	r26, 0x11	; 17
 956:	01 90       	ld	r0, Z+
 958:	0d 92       	st	X+, r0
 95a:	8a 95       	dec	r24
 95c:	e1 f7       	brne	.-8      	; 0x956 <main+0x7e>
 95e:	18 8e       	std	Y+24, r1	; 0x18
 960:	1f 8a       	std	Y+23, r1	; 0x17
	sint8 User1_password[8] = "4321";
 962:	85 e0       	ldi	r24, 0x05	; 5
 964:	e2 e9       	ldi	r30, 0x92	; 146
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	de 01       	movw	r26, r28
 96a:	59 96       	adiw	r26, 0x19	; 25
 96c:	01 90       	ld	r0, Z+
 96e:	0d 92       	st	X+, r0
 970:	8a 95       	dec	r24
 972:	e1 f7       	brne	.-8      	; 0x96c <main+0x94>
 974:	fe 01       	movw	r30, r28
 976:	7e 96       	adiw	r30, 0x1e	; 30
 978:	df 01       	movw	r26, r30
 97a:	1d 92       	st	X+, r1
 97c:	1a 95       	dec	r17
 97e:	e9 f7       	brne	.-6      	; 0x97a <main+0xa2>
	uint8 User1_UserID = 1;
	EEPROM_Write_Byte(30,User1_UserID);
 980:	61 e0       	ldi	r22, 0x01	; 1
 982:	8e e1       	ldi	r24, 0x1E	; 30
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 42 02 	call	0x484	; 0x484 <EEPROM_Write_Byte>
	EEPROM_Write_String(31,User1_password);
 98a:	be 01       	movw	r22, r28
 98c:	67 5e       	subi	r22, 0xE7	; 231
 98e:	7f 4f       	sbci	r23, 0xFF	; 255
 990:	8f e1       	ldi	r24, 0x1F	; 31
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	0e 94 84 02 	call	0x508	; 0x508 <EEPROM_Write_String>
	EEPROM_Write_String(40,User1_username);
 998:	be 01       	movw	r22, r28
 99a:	6f 5e       	subi	r22, 0xEF	; 239
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	88 e2       	ldi	r24, 0x28	; 40
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 84 02 	call	0x508	; 0x508 <EEPROM_Write_String>
			
	while (1) 
    {
		UART_Process();
 9a6:	0e 94 ac 03 	call	0x758	; 0x758 <UART_Process>
 9aa:	fd cf       	rjmp	.-6      	; 0x9a6 <main+0xce>

000009ac <DIO_Set_Pin_Direction>:
		}else if(Output == Low){
		switch(port){
			case PORTAx:PORTA_Reg=0x00;break;
			case PORTBx:PORTB_Reg=0x00;break;
			case PORTCx:PORTC_Reg=0x00;break;
			case PORTDx:PORTD_Reg=0x00;break;
 9ac:	41 30       	cpi	r20, 0x01	; 1
 9ae:	a1 f5       	brne	.+104    	; 0xa18 <DIO_Set_Pin_Direction+0x6c>
 9b0:	81 30       	cpi	r24, 0x01	; 1
 9b2:	89 f0       	breq	.+34     	; 0x9d6 <DIO_Set_Pin_Direction+0x2a>
 9b4:	28 f0       	brcs	.+10     	; 0x9c0 <DIO_Set_Pin_Direction+0x14>
 9b6:	82 30       	cpi	r24, 0x02	; 2
 9b8:	c9 f0       	breq	.+50     	; 0x9ec <DIO_Set_Pin_Direction+0x40>
 9ba:	83 30       	cpi	r24, 0x03	; 3
 9bc:	11 f1       	breq	.+68     	; 0xa02 <DIO_Set_Pin_Direction+0x56>
 9be:	08 95       	ret
 9c0:	2a b3       	in	r18, 0x1a	; 26
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_Set_Pin_Direction+0x20>
 9c8:	88 0f       	add	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	6a 95       	dec	r22
 9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_Set_Pin_Direction+0x1c>
 9d0:	82 2b       	or	r24, r18
 9d2:	8a bb       	out	0x1a, r24	; 26
 9d4:	08 95       	ret
 9d6:	27 b3       	in	r18, 0x17	; 23
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_Set_Pin_Direction+0x36>
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	6a 95       	dec	r22
 9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_Set_Pin_Direction+0x32>
 9e6:	82 2b       	or	r24, r18
 9e8:	87 bb       	out	0x17, r24	; 23
 9ea:	08 95       	ret
 9ec:	24 b3       	in	r18, 0x14	; 20
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <DIO_Set_Pin_Direction+0x4c>
 9f4:	88 0f       	add	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	6a 95       	dec	r22
 9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <DIO_Set_Pin_Direction+0x48>
 9fc:	82 2b       	or	r24, r18
 9fe:	84 bb       	out	0x14, r24	; 20
 a00:	08 95       	ret
 a02:	21 b3       	in	r18, 0x11	; 17
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_Set_Pin_Direction+0x62>
 a0a:	88 0f       	add	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	6a 95       	dec	r22
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_Set_Pin_Direction+0x5e>
 a12:	82 2b       	or	r24, r18
 a14:	81 bb       	out	0x11, r24	; 17
 a16:	08 95       	ret
 a18:	41 11       	cpse	r20, r1
 a1a:	37 c0       	rjmp	.+110    	; 0xa8a <DIO_Set_Pin_Direction+0xde>
 a1c:	81 30       	cpi	r24, 0x01	; 1
 a1e:	91 f0       	breq	.+36     	; 0xa44 <DIO_Set_Pin_Direction+0x98>
 a20:	28 f0       	brcs	.+10     	; 0xa2c <DIO_Set_Pin_Direction+0x80>
 a22:	82 30       	cpi	r24, 0x02	; 2
 a24:	d9 f0       	breq	.+54     	; 0xa5c <DIO_Set_Pin_Direction+0xb0>
 a26:	83 30       	cpi	r24, 0x03	; 3
 a28:	29 f1       	breq	.+74     	; 0xa74 <DIO_Set_Pin_Direction+0xc8>
 a2a:	08 95       	ret
 a2c:	2a b3       	in	r18, 0x1a	; 26
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_Set_Pin_Direction+0x8c>
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	6a 95       	dec	r22
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_Set_Pin_Direction+0x88>
 a3c:	80 95       	com	r24
 a3e:	82 23       	and	r24, r18
 a40:	8a bb       	out	0x1a, r24	; 26
 a42:	08 95       	ret
 a44:	27 b3       	in	r18, 0x17	; 23
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <DIO_Set_Pin_Direction+0xa4>
 a4c:	88 0f       	add	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	6a 95       	dec	r22
 a52:	e2 f7       	brpl	.-8      	; 0xa4c <DIO_Set_Pin_Direction+0xa0>
 a54:	80 95       	com	r24
 a56:	82 23       	and	r24, r18
 a58:	87 bb       	out	0x17, r24	; 23
 a5a:	08 95       	ret
 a5c:	24 b3       	in	r18, 0x14	; 20
 a5e:	81 e0       	ldi	r24, 0x01	; 1
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_Set_Pin_Direction+0xbc>
 a64:	88 0f       	add	r24, r24
 a66:	99 1f       	adc	r25, r25
 a68:	6a 95       	dec	r22
 a6a:	e2 f7       	brpl	.-8      	; 0xa64 <DIO_Set_Pin_Direction+0xb8>
 a6c:	80 95       	com	r24
 a6e:	82 23       	and	r24, r18
 a70:	84 bb       	out	0x14, r24	; 20
 a72:	08 95       	ret
 a74:	21 b3       	in	r18, 0x11	; 17
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <DIO_Set_Pin_Direction+0xd4>
 a7c:	88 0f       	add	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	6a 95       	dec	r22
 a82:	e2 f7       	brpl	.-8      	; 0xa7c <DIO_Set_Pin_Direction+0xd0>
 a84:	80 95       	com	r24
 a86:	82 23       	and	r24, r18
 a88:	81 bb       	out	0x11, r24	; 17
 a8a:	08 95       	ret

00000a8c <DIO_Set_Pin_Output>:
		}
	}
}

void DIO_Set_Pin_Output(PORT port,PIN pin,DIO_VALUE Output){
	if(Output == High){
 a8c:	41 30       	cpi	r20, 0x01	; 1
 a8e:	a1 f5       	brne	.+104    	; 0xaf8 <DIO_Set_Pin_Output+0x6c>
		switch(port){
 a90:	81 30       	cpi	r24, 0x01	; 1
 a92:	89 f0       	breq	.+34     	; 0xab6 <DIO_Set_Pin_Output+0x2a>
 a94:	28 f0       	brcs	.+10     	; 0xaa0 <DIO_Set_Pin_Output+0x14>
 a96:	82 30       	cpi	r24, 0x02	; 2
 a98:	c9 f0       	breq	.+50     	; 0xacc <DIO_Set_Pin_Output+0x40>
 a9a:	83 30       	cpi	r24, 0x03	; 3
 a9c:	11 f1       	breq	.+68     	; 0xae2 <DIO_Set_Pin_Output+0x56>
 a9e:	08 95       	ret
			case PORTAx: Set(PORTA_Reg,pin) ;break;
 aa0:	2b b3       	in	r18, 0x1b	; 27
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <DIO_Set_Pin_Output+0x20>
 aa8:	88 0f       	add	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	6a 95       	dec	r22
 aae:	e2 f7       	brpl	.-8      	; 0xaa8 <DIO_Set_Pin_Output+0x1c>
 ab0:	82 2b       	or	r24, r18
 ab2:	8b bb       	out	0x1b, r24	; 27
 ab4:	08 95       	ret
			case PORTBx: Set(PORTB_Reg,pin) ;break;
 ab6:	28 b3       	in	r18, 0x18	; 24
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <DIO_Set_Pin_Output+0x36>
 abe:	88 0f       	add	r24, r24
 ac0:	99 1f       	adc	r25, r25
 ac2:	6a 95       	dec	r22
 ac4:	e2 f7       	brpl	.-8      	; 0xabe <DIO_Set_Pin_Output+0x32>
 ac6:	82 2b       	or	r24, r18
 ac8:	88 bb       	out	0x18, r24	; 24
 aca:	08 95       	ret
			case PORTCx: Set(PORTC_Reg,pin) ;break;
 acc:	25 b3       	in	r18, 0x15	; 21
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <DIO_Set_Pin_Output+0x4c>
 ad4:	88 0f       	add	r24, r24
 ad6:	99 1f       	adc	r25, r25
 ad8:	6a 95       	dec	r22
 ada:	e2 f7       	brpl	.-8      	; 0xad4 <DIO_Set_Pin_Output+0x48>
 adc:	82 2b       	or	r24, r18
 ade:	85 bb       	out	0x15, r24	; 21
 ae0:	08 95       	ret
			case PORTDx: Set(PORTD_Reg,pin) ;break;
 ae2:	22 b3       	in	r18, 0x12	; 18
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <DIO_Set_Pin_Output+0x62>
 aea:	88 0f       	add	r24, r24
 aec:	99 1f       	adc	r25, r25
 aee:	6a 95       	dec	r22
 af0:	e2 f7       	brpl	.-8      	; 0xaea <DIO_Set_Pin_Output+0x5e>
 af2:	82 2b       	or	r24, r18
 af4:	82 bb       	out	0x12, r24	; 18
 af6:	08 95       	ret
			default:break;
		}
	}
	else if(Output == Low){
 af8:	41 11       	cpse	r20, r1
 afa:	38 c0       	rjmp	.+112    	; 0xb6c <DIO_Set_Pin_Output+0xe0>
		switch(port){
 afc:	81 30       	cpi	r24, 0x01	; 1
 afe:	91 f0       	breq	.+36     	; 0xb24 <DIO_Set_Pin_Output+0x98>
 b00:	28 f0       	brcs	.+10     	; 0xb0c <DIO_Set_Pin_Output+0x80>
 b02:	82 30       	cpi	r24, 0x02	; 2
 b04:	d9 f0       	breq	.+54     	; 0xb3c <DIO_Set_Pin_Output+0xb0>
 b06:	83 30       	cpi	r24, 0x03	; 3
 b08:	29 f1       	breq	.+74     	; 0xb54 <DIO_Set_Pin_Output+0xc8>
 b0a:	08 95       	ret
			case PORTAx: Clear(PORTA_Reg,pin);break;
 b0c:	2b b3       	in	r18, 0x1b	; 27
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <DIO_Set_Pin_Output+0x8c>
 b14:	88 0f       	add	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	6a 95       	dec	r22
 b1a:	e2 f7       	brpl	.-8      	; 0xb14 <DIO_Set_Pin_Output+0x88>
 b1c:	80 95       	com	r24
 b1e:	82 23       	and	r24, r18
 b20:	8b bb       	out	0x1b, r24	; 27
 b22:	08 95       	ret
			case PORTBx: Clear(PORTB_Reg,pin);break;
 b24:	28 b3       	in	r18, 0x18	; 24
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_Set_Pin_Output+0xa4>
 b2c:	88 0f       	add	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	6a 95       	dec	r22
 b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_Set_Pin_Output+0xa0>
 b34:	80 95       	com	r24
 b36:	82 23       	and	r24, r18
 b38:	88 bb       	out	0x18, r24	; 24
 b3a:	08 95       	ret
			case PORTCx: Clear(PORTC_Reg,pin);break;
 b3c:	25 b3       	in	r18, 0x15	; 21
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <DIO_Set_Pin_Output+0xbc>
 b44:	88 0f       	add	r24, r24
 b46:	99 1f       	adc	r25, r25
 b48:	6a 95       	dec	r22
 b4a:	e2 f7       	brpl	.-8      	; 0xb44 <DIO_Set_Pin_Output+0xb8>
 b4c:	80 95       	com	r24
 b4e:	82 23       	and	r24, r18
 b50:	85 bb       	out	0x15, r24	; 21
 b52:	08 95       	ret
			case PORTDx: Clear(PORTD_Reg,pin);break;
 b54:	22 b3       	in	r18, 0x12	; 18
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <DIO_Set_Pin_Output+0xd4>
 b5c:	88 0f       	add	r24, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	6a 95       	dec	r22
 b62:	e2 f7       	brpl	.-8      	; 0xb5c <DIO_Set_Pin_Output+0xd0>
 b64:	80 95       	com	r24
 b66:	82 23       	and	r24, r18
 b68:	82 bb       	out	0x12, r24	; 18
 b6a:	08 95       	ret
			default:break;
		}
	}
	else if(Output == Toggle){
 b6c:	42 30       	cpi	r20, 0x02	; 2
 b6e:	99 f5       	brne	.+102    	; 0xbd6 <DIO_Set_Pin_Output+0x14a>
		switch(port){
 b70:	81 30       	cpi	r24, 0x01	; 1
 b72:	89 f0       	breq	.+34     	; 0xb96 <DIO_Set_Pin_Output+0x10a>
 b74:	28 f0       	brcs	.+10     	; 0xb80 <DIO_Set_Pin_Output+0xf4>
 b76:	82 30       	cpi	r24, 0x02	; 2
 b78:	c9 f0       	breq	.+50     	; 0xbac <DIO_Set_Pin_Output+0x120>
 b7a:	83 30       	cpi	r24, 0x03	; 3
 b7c:	11 f1       	breq	.+68     	; 0xbc2 <DIO_Set_Pin_Output+0x136>
 b7e:	08 95       	ret
			case PORTAx: Toggle(PORTA_Reg,pin);break;
 b80:	2b b3       	in	r18, 0x1b	; 27
 b82:	81 e0       	ldi	r24, 0x01	; 1
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <DIO_Set_Pin_Output+0x100>
 b88:	88 0f       	add	r24, r24
 b8a:	99 1f       	adc	r25, r25
 b8c:	6a 95       	dec	r22
 b8e:	e2 f7       	brpl	.-8      	; 0xb88 <DIO_Set_Pin_Output+0xfc>
 b90:	82 27       	eor	r24, r18
 b92:	8b bb       	out	0x1b, r24	; 27
 b94:	08 95       	ret
			case PORTBx: Toggle(PORTB_Reg,pin);break;
 b96:	28 b3       	in	r18, 0x18	; 24
 b98:	81 e0       	ldi	r24, 0x01	; 1
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <DIO_Set_Pin_Output+0x116>
 b9e:	88 0f       	add	r24, r24
 ba0:	99 1f       	adc	r25, r25
 ba2:	6a 95       	dec	r22
 ba4:	e2 f7       	brpl	.-8      	; 0xb9e <DIO_Set_Pin_Output+0x112>
 ba6:	82 27       	eor	r24, r18
 ba8:	88 bb       	out	0x18, r24	; 24
 baa:	08 95       	ret
			case PORTCx: Toggle(PORTC_Reg,pin);break;
 bac:	25 b3       	in	r18, 0x15	; 21
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <DIO_Set_Pin_Output+0x12c>
 bb4:	88 0f       	add	r24, r24
 bb6:	99 1f       	adc	r25, r25
 bb8:	6a 95       	dec	r22
 bba:	e2 f7       	brpl	.-8      	; 0xbb4 <DIO_Set_Pin_Output+0x128>
 bbc:	82 27       	eor	r24, r18
 bbe:	85 bb       	out	0x15, r24	; 21
 bc0:	08 95       	ret
			case PORTDx: Toggle(PORTD_Reg,pin);break;
 bc2:	22 b3       	in	r18, 0x12	; 18
 bc4:	81 e0       	ldi	r24, 0x01	; 1
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_Set_Pin_Output+0x142>
 bca:	88 0f       	add	r24, r24
 bcc:	99 1f       	adc	r25, r25
 bce:	6a 95       	dec	r22
 bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_Set_Pin_Output+0x13e>
 bd2:	82 27       	eor	r24, r18
 bd4:	82 bb       	out	0x12, r24	; 18
 bd6:	08 95       	ret

00000bd8 <GIE_Enable>:
}

void GIE_Enable()
{
	//General Interrupt Enable by Set bit 7 On SREG Register
	Set(SREG_Reg,7);
 bd8:	8f b7       	in	r24, 0x3f	; 63
 bda:	80 68       	ori	r24, 0x80	; 128
 bdc:	8f bf       	out	0x3f, r24	; 63
 bde:	08 95       	ret

00000be0 <GIE_Disable>:
}

void GIE_Disable()
{
	//General Interrupt Disable by Set bit 7 On SREG Register
	Clear(SREG_Reg,7);
 be0:	8f b7       	in	r24, 0x3f	; 63
 be2:	8f 77       	andi	r24, 0x7F	; 127
 be4:	8f bf       	out	0x3f, r24	; 63
 be6:	08 95       	ret

00000be8 <Timer0_Init>:
	#elif (Timer0_OC0_Pin == Timer_COM_Pin_SET)
	Set(TCCR0_Reg,5);  Set(TCCR0_Reg,4);
	#endif
}
void Timer0_Set_TCNT0_Reg(uint8 value)   {    TCNT0_Reg= value;    }//Timer Register
void Timer0_Set_OCR0_Reg(uint8 value)    {    OCR0_Reg = value;    }//Output Compare Register
 be8:	83 b7       	in	r24, 0x33	; 51
 bea:	8f 7b       	andi	r24, 0xBF	; 191
 bec:	83 bf       	out	0x33, r24	; 51
 bee:	83 b7       	in	r24, 0x33	; 51
 bf0:	87 7f       	andi	r24, 0xF7	; 247
 bf2:	83 bf       	out	0x33, r24	; 51
 bf4:	83 b7       	in	r24, 0x33	; 51
 bf6:	8b 7f       	andi	r24, 0xFB	; 251
 bf8:	83 bf       	out	0x33, r24	; 51
 bfa:	83 b7       	in	r24, 0x33	; 51
 bfc:	8d 7f       	andi	r24, 0xFD	; 253
 bfe:	83 bf       	out	0x33, r24	; 51
 c00:	83 b7       	in	r24, 0x33	; 51
 c02:	81 60       	ori	r24, 0x01	; 1
 c04:	83 bf       	out	0x33, r24	; 51
 c06:	83 b7       	in	r24, 0x33	; 51
 c08:	8f 7d       	andi	r24, 0xDF	; 223
 c0a:	83 bf       	out	0x33, r24	; 51
 c0c:	83 b7       	in	r24, 0x33	; 51
 c0e:	8f 7e       	andi	r24, 0xEF	; 239
 c10:	83 bf       	out	0x33, r24	; 51
 c12:	08 95       	ret

00000c14 <Timer0_Enable_Overflow_Interrupt>:
void Timer0_Enable_Overflow_Interrupt()  {    Set(TIMSK_Reg,0);    }
 c14:	89 b7       	in	r24, 0x39	; 57
 c16:	81 60       	ori	r24, 0x01	; 1
 c18:	89 bf       	out	0x39, r24	; 57
 c1a:	08 95       	ret

00000c1c <TWI_Init>:
	TWCR_Reg =   (1<<5)  | (1<<2) |(1<<7);
	while(Get(TWCR_Reg ,7)  == 0);//Wait till Send Successfully(INT_FLAG DOWN)
}
void TWI_Set_My_Address(uint8 Address)
{
	TWAR_Reg = (TWAR_Reg & 0x01) | (Address<<1);
 c1c:	8a e0       	ldi	r24, 0x0A	; 10
 c1e:	80 b9       	out	0x00, r24	; 0
 c20:	81 b1       	in	r24, 0x01	; 1
 c22:	81 60       	ori	r24, 0x01	; 1
 c24:	81 b9       	out	0x01, r24	; 1
 c26:	81 b1       	in	r24, 0x01	; 1
 c28:	8d 7f       	andi	r24, 0xFD	; 253
 c2a:	81 b9       	out	0x01, r24	; 1
 c2c:	86 b7       	in	r24, 0x36	; 54
 c2e:	84 60       	ori	r24, 0x04	; 4
 c30:	86 bf       	out	0x36, r24	; 54
 c32:	08 95       	ret

00000c34 <TWI_Check_Status>:
 c34:	21 b1       	in	r18, 0x01	; 1
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	28 7f       	andi	r18, 0xF8	; 248
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	82 17       	cp	r24, r18
 c3e:	93 07       	cpc	r25, r19
 c40:	11 f4       	brne	.+4      	; 0xc46 <TWI_Check_Status+0x12>
 c42:	81 e0       	ldi	r24, 0x01	; 1
 c44:	08 95       	ret
 c46:	80 e0       	ldi	r24, 0x00	; 0
 c48:	08 95       	ret

00000c4a <TWI_Send_Stop>:
 c4a:	84 e9       	ldi	r24, 0x94	; 148
 c4c:	86 bf       	out	0x36, r24	; 54
 c4e:	08 95       	ret

00000c50 <TWI_MSTR_Send_Start>:
 c50:	84 ea       	ldi	r24, 0xA4	; 164
 c52:	86 bf       	out	0x36, r24	; 54
 c54:	06 b6       	in	r0, 0x36	; 54
 c56:	07 fe       	sbrs	r0, 7
 c58:	fd cf       	rjmp	.-6      	; 0xc54 <TWI_MSTR_Send_Start+0x4>
 c5a:	08 95       	ret

00000c5c <TWI_Receive_Data>:
}
uint8 TWI_Receive_Data(uint8 ACK_State){
	if(ACK_State == 1)
 c5c:	81 30       	cpi	r24, 0x01	; 1
 c5e:	19 f4       	brne	.+6      	; 0xc66 <TWI_Receive_Data+0xa>
	Set(TWCR_Reg,6);		//SEND ACK IF Input is 1 for ACK
 c60:	86 b7       	in	r24, 0x36	; 54
 c62:	80 64       	ori	r24, 0x40	; 64
 c64:	86 bf       	out	0x36, r24	; 54
	// 	Set(TWCR_Reg,2);			//Enable TWI
	// 	Set(TWCR_Reg,7);			//Set Interrupt Flag to Clear it
	TWCR_Reg =   (1<<7)| (1<<2);
 c66:	84 e8       	ldi	r24, 0x84	; 132
 c68:	86 bf       	out	0x36, r24	; 54
	while(Get(TWCR_Reg,7)== 0);	//Wait for flag to be 0
 c6a:	06 b6       	in	r0, 0x36	; 54
 c6c:	07 fe       	sbrs	r0, 7
 c6e:	fd cf       	rjmp	.-6      	; 0xc6a <TWI_Receive_Data+0xe>
	return TWDR_Reg;			//Send back DATA Received Value
 c70:	83 b1       	in	r24, 0x03	; 3
}
 c72:	08 95       	ret

00000c74 <TWI_Send_Data>:
void TWI_Send_Data(uint8 Data){
	//TWCR_Reg =0;
	TWDR_Reg = Data;
 c74:	83 b9       	out	0x03, r24	; 3
	//Set(TWCR_Reg,2);// Enable TWI
	//Set(TWCR_Reg,7);// Clear Interrupt Flag
	//TWCR_Reg = 0;
	TWCR_Reg =   (1<<7)| (1<<2);
 c76:	84 e8       	ldi	r24, 0x84	; 132
 c78:	86 bf       	out	0x36, r24	; 54
	while(Get(TWCR_Reg,7)== 0);	//Wait for flag to be 0
 c7a:	06 b6       	in	r0, 0x36	; 54
 c7c:	07 fe       	sbrs	r0, 7
 c7e:	fd cf       	rjmp	.-6      	; 0xc7a <TWI_Send_Data+0x6>
 c80:	08 95       	ret

00000c82 <UART_Enable_RX_Interrupt>:
// 			UART_Send_String_Polling_8(" Username: ");
// 			UART_Send_String_Polling_8(Username);
// 			UART_Send_String_Polling_8("/n");
// 		}
	}
}
 c82:	8a b1       	in	r24, 0x0a	; 10
 c84:	80 68       	ori	r24, 0x80	; 128
 c86:	8a b9       	out	0x0a, r24	; 10
 c88:	08 95       	ret

00000c8a <UART_Init>:
 c8a:	8a b1       	in	r24, 0x0a	; 10
 c8c:	8b 7f       	andi	r24, 0xFB	; 251
 c8e:	8a b9       	out	0x0a, r24	; 10
 c90:	80 b5       	in	r24, 0x20	; 32
 c92:	84 60       	ori	r24, 0x04	; 4
 c94:	80 bd       	out	0x20, r24	; 32
 c96:	80 b5       	in	r24, 0x20	; 32
 c98:	82 60       	ori	r24, 0x02	; 2
 c9a:	80 bd       	out	0x20, r24	; 32
 c9c:	80 b5       	in	r24, 0x20	; 32
 c9e:	8f 7b       	andi	r24, 0xBF	; 191
 ca0:	80 bd       	out	0x20, r24	; 32
 ca2:	80 b5       	in	r24, 0x20	; 32
 ca4:	80 68       	ori	r24, 0x80	; 128
 ca6:	80 bd       	out	0x20, r24	; 32
 ca8:	80 b5       	in	r24, 0x20	; 32
 caa:	8f 7d       	andi	r24, 0xDF	; 223
 cac:	80 bd       	out	0x20, r24	; 32
 cae:	80 b5       	in	r24, 0x20	; 32
 cb0:	8f 7e       	andi	r24, 0xEF	; 239
 cb2:	80 bd       	out	0x20, r24	; 32
 cb4:	80 b5       	in	r24, 0x20	; 32
 cb6:	87 7f       	andi	r24, 0xF7	; 247
 cb8:	80 bd       	out	0x20, r24	; 32
 cba:	10 bc       	out	0x20, r1	; 32
 cbc:	87 e6       	ldi	r24, 0x67	; 103
 cbe:	89 b9       	out	0x09, r24	; 9
 cc0:	8a b1       	in	r24, 0x0a	; 10
 cc2:	80 61       	ori	r24, 0x10	; 16
 cc4:	8a b9       	out	0x0a, r24	; 10
 cc6:	8a b1       	in	r24, 0x0a	; 10
 cc8:	88 60       	ori	r24, 0x08	; 8
 cca:	8a b9       	out	0x0a, r24	; 10
 ccc:	8a b1       	in	r24, 0x0a	; 10
 cce:	80 68       	ori	r24, 0x80	; 128
 cd0:	8a b9       	out	0x0a, r24	; 10
 cd2:	08 95       	ret

00000cd4 <UART_Send_Byte_Polling_8>:
 cd4:	5d 9b       	sbis	0x0b, 5	; 11
 cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <UART_Send_Byte_Polling_8>
 cd8:	8c b9       	out	0x0c, r24	; 12
 cda:	08 95       	ret

00000cdc <UART_Send_String_Polling_8>:
 cdc:	0f 93       	push	r16
 cde:	1f 93       	push	r17
 ce0:	cf 93       	push	r28
 ce2:	8c 01       	movw	r16, r24
 ce4:	c0 e0       	ldi	r28, 0x00	; 0
 ce6:	03 c0       	rjmp	.+6      	; 0xcee <UART_Send_String_Polling_8+0x12>
 ce8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <UART_Send_Byte_Polling_8>
 cec:	cf 5f       	subi	r28, 0xFF	; 255
 cee:	f8 01       	movw	r30, r16
 cf0:	ec 0f       	add	r30, r28
 cf2:	f1 1d       	adc	r31, r1
 cf4:	80 81       	ld	r24, Z
 cf6:	81 11       	cpse	r24, r1
 cf8:	f7 cf       	rjmp	.-18     	; 0xce8 <UART_Send_String_Polling_8+0xc>
 cfa:	cf 91       	pop	r28
 cfc:	1f 91       	pop	r17
 cfe:	0f 91       	pop	r16
 d00:	08 95       	ret

00000d02 <UART_Receive_Byte_8>:
 d02:	5f 9b       	sbis	0x0b, 7	; 11
 d04:	fe cf       	rjmp	.-4      	; 0xd02 <UART_Receive_Byte_8>
 d06:	8c b1       	in	r24, 0x0c	; 12
 d08:	08 95       	ret

00000d0a <UART_Recieve_String_8>:
 d0a:	ef 92       	push	r14
 d0c:	ff 92       	push	r15
 d0e:	1f 93       	push	r17
 d10:	cf 93       	push	r28
 d12:	df 93       	push	r29
 d14:	7c 01       	movw	r14, r24
 d16:	10 e0       	ldi	r17, 0x00	; 0
 d18:	e7 01       	movw	r28, r14
 d1a:	c1 0f       	add	r28, r17
 d1c:	d1 1d       	adc	r29, r1
 d1e:	0e 94 81 06 	call	0xd02	; 0xd02 <UART_Receive_Byte_8>
 d22:	88 83       	st	Y, r24
 d24:	8d 30       	cpi	r24, 0x0D	; 13
 d26:	09 f4       	brne	.+2      	; 0xd2a <UART_Recieve_String_8+0x20>
 d28:	18 82       	st	Y, r1
 d2a:	88 81       	ld	r24, Y
 d2c:	8a 30       	cpi	r24, 0x0A	; 10
 d2e:	11 f4       	brne	.+4      	; 0xd34 <UART_Recieve_String_8+0x2a>
 d30:	18 82       	st	Y, r1
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <UART_Recieve_String_8+0x2e>
 d34:	1f 5f       	subi	r17, 0xFF	; 255
 d36:	f0 cf       	rjmp	.-32     	; 0xd18 <UART_Recieve_String_8+0xe>
 d38:	df 91       	pop	r29
 d3a:	cf 91       	pop	r28
 d3c:	1f 91       	pop	r17
 d3e:	ff 90       	pop	r15
 d40:	ef 90       	pop	r14
 d42:	08 95       	ret

00000d44 <UART_Show_Request_UserID>:
 d44:	80 e6       	ldi	r24, 0x60	; 96
 d46:	92 e0       	ldi	r25, 0x02	; 2
 d48:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d4c:	08 95       	ret

00000d4e <UART_Show_Request_Password>:
 d4e:	8c e7       	ldi	r24, 0x7C	; 124
 d50:	92 e0       	ldi	r25, 0x02	; 2
 d52:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d56:	08 95       	ret

00000d58 <UART_Show_Invalid>:
 d58:	84 e9       	ldi	r24, 0x94	; 148
 d5a:	92 e0       	ldi	r25, 0x02	; 2
 d5c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d60:	08 95       	ret

00000d62 <UART_Show_MainMenu>:
 d62:	85 eb       	ldi	r24, 0xB5	; 181
 d64:	92 e0       	ldi	r25, 0x02	; 2
 d66:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d6a:	86 ec       	ldi	r24, 0xC6	; 198
 d6c:	92 e0       	ldi	r25, 0x02	; 2
 d6e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d72:	89 ed       	ldi	r24, 0xD9	; 217
 d74:	92 e0       	ldi	r25, 0x02	; 2
 d76:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d7a:	8a ee       	ldi	r24, 0xEA	; 234
 d7c:	92 e0       	ldi	r25, 0x02	; 2
 d7e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d82:	8d ef       	ldi	r24, 0xFD	; 253
 d84:	92 e0       	ldi	r25, 0x02	; 2
 d86:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d8a:	82 e1       	ldi	r24, 0x12	; 18
 d8c:	93 e0       	ldi	r25, 0x03	; 3
 d8e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d92:	88 e2       	ldi	r24, 0x28	; 40
 d94:	93 e0       	ldi	r25, 0x03	; 3
 d96:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 d9a:	8e e3       	ldi	r24, 0x3E	; 62
 d9c:	93 e0       	ldi	r25, 0x03	; 3
 d9e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 da2:	80 e5       	ldi	r24, 0x50	; 80
 da4:	93 e0       	ldi	r25, 0x03	; 3
 da6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 daa:	87 e6       	ldi	r24, 0x67	; 103
 dac:	93 e0       	ldi	r25, 0x03	; 3
 dae:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 db2:	8b e7       	ldi	r24, 0x7B	; 123
 db4:	93 e0       	ldi	r25, 0x03	; 3
 db6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 dba:	08 95       	ret

00000dbc <UART_Show_Control_Leds>:
 dbc:	89 e8       	ldi	r24, 0x89	; 137
 dbe:	93 e0       	ldi	r25, 0x03	; 3
 dc0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 dc4:	8c e9       	ldi	r24, 0x9C	; 156
 dc6:	93 e0       	ldi	r25, 0x03	; 3
 dc8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 dcc:	8f ea       	ldi	r24, 0xAF	; 175
 dce:	93 e0       	ldi	r25, 0x03	; 3
 dd0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 dd4:	82 ec       	ldi	r24, 0xC2	; 194
 dd6:	93 e0       	ldi	r25, 0x03	; 3
 dd8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 ddc:	85 ed       	ldi	r24, 0xD5	; 213
 dde:	93 e0       	ldi	r25, 0x03	; 3
 de0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 de4:	88 ee       	ldi	r24, 0xE8	; 232
 de6:	93 e0       	ldi	r25, 0x03	; 3
 de8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 dec:	08 95       	ret

00000dee <UART_Show_Control_AC>:
 dee:	83 ef       	ldi	r24, 0xF3	; 243
 df0:	93 e0       	ldi	r25, 0x03	; 3
 df2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 df6:	81 e0       	ldi	r24, 0x01	; 1
 df8:	94 e0       	ldi	r25, 0x04	; 4
 dfa:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 dfe:	8a e1       	ldi	r24, 0x1A	; 26
 e00:	94 e0       	ldi	r25, 0x04	; 4
 e02:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e06:	88 ee       	ldi	r24, 0xE8	; 232
 e08:	93 e0       	ldi	r25, 0x03	; 3
 e0a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e0e:	08 95       	ret

00000e10 <UART_Show_Control_Door>:
 e10:	83 e3       	ldi	r24, 0x33	; 51
 e12:	94 e0       	ldi	r25, 0x04	; 4
 e14:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e18:	88 e4       	ldi	r24, 0x48	; 72
 e1a:	94 e0       	ldi	r25, 0x04	; 4
 e1c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e20:	88 ee       	ldi	r24, 0xE8	; 232
 e22:	93 e0       	ldi	r25, 0x03	; 3
 e24:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e28:	08 95       	ret

00000e2a <UART_Show_Control_Dimmer>:
 e2a:	8e e5       	ldi	r24, 0x5E	; 94
 e2c:	94 e0       	ldi	r25, 0x04	; 4
 e2e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e32:	8e e6       	ldi	r24, 0x6E	; 110
 e34:	94 e0       	ldi	r25, 0x04	; 4
 e36:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e3a:	80 e8       	ldi	r24, 0x80	; 128
 e3c:	94 e0       	ldi	r25, 0x04	; 4
 e3e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e42:	81 e9       	ldi	r24, 0x91	; 145
 e44:	94 e0       	ldi	r25, 0x04	; 4
 e46:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e4a:	88 ee       	ldi	r24, 0xE8	; 232
 e4c:	93 e0       	ldi	r25, 0x03	; 3
 e4e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
 e52:	08 95       	ret

00000e54 <UART_Choice_Handler_1>:

void UART_Choice_Handler_1(uint8 g_choice_1){
	switch(g_choice_1){
 e54:	82 30       	cpi	r24, 0x02	; 2
 e56:	61 f0       	breq	.+24     	; 0xe70 <UART_Choice_Handler_1+0x1c>
 e58:	18 f4       	brcc	.+6      	; 0xe60 <UART_Choice_Handler_1+0xc>
 e5a:	81 30       	cpi	r24, 0x01	; 1
 e5c:	31 f0       	breq	.+12     	; 0xe6a <UART_Choice_Handler_1+0x16>
 e5e:	08 95       	ret
 e60:	83 30       	cpi	r24, 0x03	; 3
 e62:	49 f0       	breq	.+18     	; 0xe76 <UART_Choice_Handler_1+0x22>
 e64:	84 30       	cpi	r24, 0x04	; 4
 e66:	51 f0       	breq	.+20     	; 0xe7c <UART_Choice_Handler_1+0x28>
 e68:	08 95       	ret
		case 1:UART_Show_Control_Leds();break;
 e6a:	0e 94 de 06 	call	0xdbc	; 0xdbc <UART_Show_Control_Leds>
 e6e:	08 95       	ret
		case 2:UART_Show_Control_AC();	break;
 e70:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_Show_Control_AC>
 e74:	08 95       	ret
		case 3:UART_Show_Control_Door();break;
 e76:	0e 94 08 07 	call	0xe10	; 0xe10 <UART_Show_Control_Door>
 e7a:	08 95       	ret
		case 4:UART_Show_Control_Dimmer();break;
 e7c:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_Show_Control_Dimmer>
 e80:	08 95       	ret

00000e82 <UART_LED_Feedback>:
		break;
	}
}


void UART_LED_Feedback(uint8 g_choice_2){
 e82:	cf 93       	push	r28
	uint8 x = 0;
	switch(g_choice_2){
 e84:	83 30       	cpi	r24, 0x03	; 3
 e86:	99 f0       	breq	.+38     	; 0xeae <UART_LED_Feedback+0x2c>
 e88:	28 f4       	brcc	.+10     	; 0xe94 <UART_LED_Feedback+0x12>
 e8a:	81 30       	cpi	r24, 0x01	; 1
 e8c:	41 f0       	breq	.+16     	; 0xe9e <UART_LED_Feedback+0x1c>
 e8e:	82 30       	cpi	r24, 0x02	; 2
 e90:	51 f0       	breq	.+20     	; 0xea6 <UART_LED_Feedback+0x24>
 e92:	19 c0       	rjmp	.+50     	; 0xec6 <UART_LED_Feedback+0x44>
 e94:	84 30       	cpi	r24, 0x04	; 4
 e96:	79 f0       	breq	.+30     	; 0xeb6 <UART_LED_Feedback+0x34>
 e98:	85 30       	cpi	r24, 0x05	; 5
 e9a:	89 f0       	breq	.+34     	; 0xebe <UART_LED_Feedback+0x3c>
 e9c:	14 c0       	rjmp	.+40     	; 0xec6 <UART_LED_Feedback+0x44>
		case 1: // Toggle Led 0
			LED_0_Toggle(); x = 0;break;
 e9e:	0e 94 27 03 	call	0x64e	; 0x64e <LED_0_Toggle>
 ea2:	c0 e0       	ldi	r28, 0x00	; 0
 ea4:	11 c0       	rjmp	.+34     	; 0xec8 <UART_LED_Feedback+0x46>
		case 2: // Toggle Led 1
			LED_1_Toggle(); x = 1;break;
 ea6:	0e 94 2d 03 	call	0x65a	; 0x65a <LED_1_Toggle>
 eaa:	c1 e0       	ldi	r28, 0x01	; 1
 eac:	0d c0       	rjmp	.+26     	; 0xec8 <UART_LED_Feedback+0x46>
		case 3: // Toggle Led 2
			LED_2_Toggle(); x = 2;break;
 eae:	0e 94 33 03 	call	0x666	; 0x666 <LED_2_Toggle>
 eb2:	c2 e0       	ldi	r28, 0x02	; 2
 eb4:	09 c0       	rjmp	.+18     	; 0xec8 <UART_LED_Feedback+0x46>
		case 4: // Toggle Led 3
			LED_3_Toggle(); x = 3;break;
 eb6:	0e 94 39 03 	call	0x672	; 0x672 <LED_3_Toggle>
 eba:	c3 e0       	ldi	r28, 0x03	; 3
 ebc:	05 c0       	rjmp	.+10     	; 0xec8 <UART_LED_Feedback+0x46>
		case 5: // Toggle Led 4
			LED_4_Toggle(); x = 4;break;
 ebe:	0e 94 3f 03 	call	0x67e	; 0x67e <LED_4_Toggle>
 ec2:	c4 e0       	ldi	r28, 0x04	; 4
 ec4:	01 c0       	rjmp	.+2      	; 0xec8 <UART_LED_Feedback+0x46>
	}
}


void UART_LED_Feedback(uint8 g_choice_2){
	uint8 x = 0;
 ec6:	c0 e0       	ldi	r28, 0x00	; 0
		case 4: // Toggle Led 3
			LED_3_Toggle(); x = 3;break;
		case 5: // Toggle Led 4
			LED_4_Toggle(); x = 4;break;
	}
	UART_Send_String_Polling_8("Led ");
 ec8:	82 ec       	ldi	r24, 0xC2	; 194
 eca:	94 e0       	ldi	r25, 0x04	; 4
 ecc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
	UART_Send_Byte_Polling_8(x);
 ed0:	8c 2f       	mov	r24, r28
 ed2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <UART_Send_Byte_Polling_8>
	UART_Send_String_Polling_8("Toggled");	
 ed6:	87 ec       	ldi	r24, 0xC7	; 199
 ed8:	94 e0       	ldi	r25, 0x04	; 4
 eda:	0e 94 6e 06 	call	0xcdc	; 0xcdc <UART_Send_String_Polling_8>
}
 ede:	cf 91       	pop	r28
 ee0:	08 95       	ret

00000ee2 <atoi>:
 ee2:	fc 01       	movw	r30, r24
 ee4:	88 27       	eor	r24, r24
 ee6:	99 27       	eor	r25, r25
 ee8:	e8 94       	clt
 eea:	21 91       	ld	r18, Z+
 eec:	20 32       	cpi	r18, 0x20	; 32
 eee:	e9 f3       	breq	.-6      	; 0xeea <atoi+0x8>
 ef0:	29 30       	cpi	r18, 0x09	; 9
 ef2:	10 f0       	brcs	.+4      	; 0xef8 <atoi+0x16>
 ef4:	2e 30       	cpi	r18, 0x0E	; 14
 ef6:	c8 f3       	brcs	.-14     	; 0xeea <atoi+0x8>
 ef8:	2b 32       	cpi	r18, 0x2B	; 43
 efa:	41 f0       	breq	.+16     	; 0xf0c <atoi+0x2a>
 efc:	2d 32       	cpi	r18, 0x2D	; 45
 efe:	39 f4       	brne	.+14     	; 0xf0e <atoi+0x2c>
 f00:	68 94       	set
 f02:	04 c0       	rjmp	.+8      	; 0xf0c <atoi+0x2a>
 f04:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__mulhi_const_10>
 f08:	82 0f       	add	r24, r18
 f0a:	91 1d       	adc	r25, r1
 f0c:	21 91       	ld	r18, Z+
 f0e:	20 53       	subi	r18, 0x30	; 48
 f10:	2a 30       	cpi	r18, 0x0A	; 10
 f12:	c0 f3       	brcs	.-16     	; 0xf04 <atoi+0x22>
 f14:	1e f4       	brtc	.+6      	; 0xf1c <atoi+0x3a>
 f16:	90 95       	com	r25
 f18:	81 95       	neg	r24
 f1a:	9f 4f       	sbci	r25, 0xFF	; 255
 f1c:	08 95       	ret

00000f1e <strcmp>:
 f1e:	fb 01       	movw	r30, r22
 f20:	dc 01       	movw	r26, r24
 f22:	8d 91       	ld	r24, X+
 f24:	01 90       	ld	r0, Z+
 f26:	80 19       	sub	r24, r0
 f28:	01 10       	cpse	r0, r1
 f2a:	d9 f3       	breq	.-10     	; 0xf22 <strcmp+0x4>
 f2c:	99 0b       	sbc	r25, r25
 f2e:	08 95       	ret

00000f30 <strcpy>:
 f30:	fb 01       	movw	r30, r22
 f32:	dc 01       	movw	r26, r24
 f34:	01 90       	ld	r0, Z+
 f36:	0d 92       	st	X+, r0
 f38:	00 20       	and	r0, r0
 f3a:	e1 f7       	brne	.-8      	; 0xf34 <strcpy+0x4>
 f3c:	08 95       	ret

00000f3e <__mulhi_const_10>:
 f3e:	7a e0       	ldi	r23, 0x0A	; 10
 f40:	97 9f       	mul	r25, r23
 f42:	90 2d       	mov	r25, r0
 f44:	87 9f       	mul	r24, r23
 f46:	80 2d       	mov	r24, r0
 f48:	91 0d       	add	r25, r1
 f4a:	11 24       	eor	r1, r1
 f4c:	08 95       	ret

00000f4e <_exit>:
 f4e:	f8 94       	cli

00000f50 <__stop_program>:
 f50:	ff cf       	rjmp	.-2      	; 0xf50 <__stop_program>
