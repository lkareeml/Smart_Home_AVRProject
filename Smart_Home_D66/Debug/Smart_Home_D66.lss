
Smart_Home_D66.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030e  00800060  0000093a  000009ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080036e  0080036e  00000cdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031c9  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed4  00000000  00000000  00004349  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b57  00000000  00000000  0000521d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009e4  00000000  00000000  00006d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fa9  00000000  00000000  00007758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bd8  00000000  00000000  00008701  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0000a2d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
  8a:	0c 94 9b 04 	jmp	0x936	; 0x936 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUZZER_On>:
	DIO_Set_Pin_Output(PORTAx,Pin3,High);
}

void BUZZER_Off()
{
	DIO_Set_Pin_Output(PORTAx,Pin3,Low);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
  9c:	08 95       	ret

0000009e <BUZZER_ALARM_TILL_RESET>:
}

void BUZZER_ALARM_TILL_RESET()
{
	GIE_Disable();
  9e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <GIE_Disable>
	BUZZER_On();
  a2:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_On>
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <BUZZER_ALARM_TILL_RESET+0x8>

000000a8 <__vector_7>:
	
*/


ISR(TIMER1_COMPA_vect) // Timer1 compare match interrupt
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	static uint8 counter = 0;
	// Start if counter = 0 by making Servo Pin high
	if(counter==0){DIO_Set_Pin_Output(PORTDx,Pin7,High);}
  ca:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
  ce:	81 11       	cpse	r24, r1
  d0:	06 c0       	rjmp	.+12     	; 0xde <__vector_7+0x36>
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
  dc:	07 c0       	rjmp	.+14     	; 0xec <__vector_7+0x44>
	else if(counter == 1){
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	29 f4       	brne	.+10     	; 0xec <__vector_7+0x44>
		if(door_state == 0){
			DIO_Set_Pin_Output(PORTDx,Pin7,Low);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	67 e0       	ldi	r22, 0x07	; 7
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
	else if(counter == 5){
		if(door_state == 1){
			DIO_Set_Pin_Output(PORTDx,Pin7,Low);
		}
	}
	if(counter<40){counter++;}
  ec:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
  f0:	88 32       	cpi	r24, 0x28	; 40
  f2:	20 f4       	brcc	.+8      	; 0xfc <__vector_7+0x54>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_7+0x58>
	else {counter = 0;}
  fc:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <__data_end>
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	bf 91       	pop	r27
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	7f 91       	pop	r23
 10e:	6f 91       	pop	r22
 110:	5f 91       	pop	r21
 112:	4f 91       	pop	r20
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <EEPROM_Init>:
#include "../../MCAL/TWI_I2C/TWI_I2C.h"
#include "EEPROM.h"
#include <util/delay.h>


void  EEPROM_Init(void){TWI_Init();}
 122:	0e 94 83 03 	call	0x706	; 0x706 <TWI_Init>
 126:	08 95       	ret

00000128 <LED_Init_All>:
void LED_0_On(){DIO_Set_Pin_Output(PORTCx,2,High);}
void LED_1_On(){DIO_Set_Pin_Output(PORTCx,7,High);}
void LED_2_On(){DIO_Set_Pin_Output(PORTDx,3,High);}
void LED_3_On(){DIO_Set_Pin_Output(PORTDx,4,High);}
void LED_4_On(){DIO_Set_Pin_Output(PORTDx,5,High);}
void Lamp_Dimmer_On(){DIO_Set_Pin_Output(PORTAx,0,High);}
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Set_Pin_Direction>
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	67 e0       	ldi	r22, 0x07	; 7
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Set_Pin_Direction>
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Set_Pin_Direction>
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	64 e0       	ldi	r22, 0x04	; 4
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Set_Pin_Direction>
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Set_Pin_Direction>
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Set_Pin_Direction>
 164:	08 95       	ret

00000166 <LED_0_Off>:

void LED_0_Off(){DIO_Set_Pin_Output(PORTCx,2,Low);}
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 170:	08 95       	ret

00000172 <LED_1_Off>:
void LED_1_Off(){DIO_Set_Pin_Output(PORTCx,7,Low);}
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	67 e0       	ldi	r22, 0x07	; 7
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 17c:	08 95       	ret

0000017e <LED_2_Off>:
void LED_2_Off(){DIO_Set_Pin_Output(PORTDx,3,Low);}
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	63 e0       	ldi	r22, 0x03	; 3
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 188:	08 95       	ret

0000018a <LED_3_Off>:
void LED_3_Off(){DIO_Set_Pin_Output(PORTDx,4,Low);}
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 194:	08 95       	ret

00000196 <LED_4_Off>:
void LED_4_Off(){DIO_Set_Pin_Output(PORTDx,5,Low);}
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	65 e0       	ldi	r22, 0x05	; 5
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 1a0:	08 95       	ret

000001a2 <Lamp_Dimmer_Off>:
void Lamp_Dimmer_Off(){DIO_Set_Pin_Output(PORTAx,0,Low);}
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 1ac:	08 95       	ret

000001ae <Smart_Initialization>:

sint8 Buffer[8];
static uint8 UART_Flag_Received = 0;

void Smart_Initialization(){
	LED_Init_All();
 1ae:	0e 94 94 00 	call	0x128	; 0x128 <LED_Init_All>
	LED_1_Off();LED_2_Off();LED_3_Off();LED_4_Off();LED_0_Off();
 1b2:	0e 94 b9 00 	call	0x172	; 0x172 <LED_1_Off>
 1b6:	0e 94 bf 00 	call	0x17e	; 0x17e <LED_2_Off>
 1ba:	0e 94 c5 00 	call	0x18a	; 0x18a <LED_3_Off>
 1be:	0e 94 cb 00 	call	0x196	; 0x196 <LED_4_Off>
 1c2:	0e 94 b3 00 	call	0x166	; 0x166 <LED_0_Off>
	Lamp_Dimmer_Off();
 1c6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Lamp_Dimmer_Off>
	EEPROM_Init();
 1ca:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_Init>
	UART_Init();
 1ce:	0e 94 93 03 	call	0x726	; 0x726 <UART_Init>
	GIE_Enable();
 1d2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <GIE_Enable>
 1d6:	08 95       	ret

000001d8 <__vector_13>:
}
ISR(USART_RXC_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	UART_Recieve_String_8(Buffer);
 1fa:	82 e9       	ldi	r24, 0x92	; 146
 1fc:	93 e0       	ldi	r25, 0x03	; 3
 1fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_Recieve_String_8>
	UART_Flag_Received = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <UART_Flag_Received>
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <Clear_Buffer>:
void Clear_Buffer(sint8 * Buffer){
 22a:	9c 01       	movw	r18, r24
	for(uint8 i = 0; i < sizeof(*Buffer); ++i) Buffer[i] = 0;
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	05 c0       	rjmp	.+10     	; 0x23a <Clear_Buffer+0x10>
 230:	f9 01       	movw	r30, r18
 232:	e9 0f       	add	r30, r25
 234:	f1 1d       	adc	r31, r1
 236:	10 82       	st	Z, r1
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	99 23       	and	r25, r25
 23c:	c9 f3       	breq	.-14     	; 0x230 <Clear_Buffer+0x6>
}
 23e:	08 95       	ret

00000240 <UART_Process>:
	static uint8 g_choice_1 = 0;
 	static sint8 UART_Choice_2[8];
	static uint8 g_choice_2 = 0;


	if(UART_Flag_Received == 1){
 240:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <UART_Flag_Received>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	09 f0       	breq	.+2      	; 0x24a <UART_Process+0xa>
 248:	29 c1       	rjmp	.+594    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
		switch(global_Flag){
 24a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <global_Flag.2384>
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	59 f1       	breq	.+86     	; 0x2a8 <UART_Process+0x68>
 252:	28 f4       	brcc	.+10     	; 0x25e <UART_Process+0x1e>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	51 f0       	breq	.+20     	; 0x26c <UART_Process+0x2c>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	b1 f0       	breq	.+44     	; 0x288 <UART_Process+0x48>
 25c:	08 95       	ret
 25e:	84 30       	cpi	r24, 0x04	; 4
 260:	09 f4       	brne	.+2      	; 0x264 <UART_Process+0x24>
 262:	6f c0       	rjmp	.+222    	; 0x342 <UART_Process+0x102>
 264:	85 30       	cpi	r24, 0x05	; 5
 266:	09 f4       	brne	.+2      	; 0x26a <UART_Process+0x2a>
 268:	8e c0       	rjmp	.+284    	; 0x386 <UART_Process+0x146>
 26a:	08 95       	ret
			case 1://Just Started, User Not loggedIn, user sent anything
				UART_Show_Request_UserID();
 26c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <UART_Show_Request_UserID>
				Clear_Buffer(Buffer);
 270:	82 e9       	ldi	r24, 0x92	; 146
 272:	93 e0       	ldi	r25, 0x03	; 3
 274:	0e 94 15 01 	call	0x22a	; 0x22a <Clear_Buffer>
				UART_Flag_Received = 0;
 278:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <UART_Flag_Received>
				global_Flag++;
 27c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <global_Flag.2384>
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <global_Flag.2384>
				break;
 286:	08 95       	ret
			case 2: // we got user input for userID now we validate it
				strcpy(UART_UserID,Buffer);// Copy Buffer To USERID
 288:	62 e9       	ldi	r22, 0x92	; 146
 28a:	73 e0       	ldi	r23, 0x03	; 3
 28c:	89 e8       	ldi	r24, 0x89	; 137
 28e:	93 e0       	ldi	r25, 0x03	; 3
 290:	0e 94 94 04 	call	0x928	; 0x928 <strcpy>
				UART_Flag_Received = 0;
 294:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <UART_Flag_Received>
				UART_Show_Request_Password();
 298:	0e 94 f5 03 	call	0x7ea	; 0x7ea <UART_Show_Request_Password>
				global_Flag++;
 29c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <global_Flag.2384>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <global_Flag.2384>
				break;
 2a6:	08 95       	ret
			case 3:// Get password, Compare password in EEPROM, User login
				strcpy(UART_Password,Buffer);// Copy Buffer to Password
 2a8:	62 e9       	ldi	r22, 0x92	; 146
 2aa:	73 e0       	ldi	r23, 0x03	; 3
 2ac:	81 e8       	ldi	r24, 0x81	; 129
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	0e 94 94 04 	call	0x928	; 0x928 <strcpy>
				UART_Flag_Received = 0;
 2b4:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <UART_Flag_Received>
			// 					if(EEPROM_Read_User_Password(UART_UserID[0],EEPROM_Username,EEPROM_Password) == 1){
			// 						//User and password Exist
			// 					}
			// ****************** END OF LOGICAL PROBLEM HERE!! ***************************
			// User and password Compare!
				if(strcmp(EEPROM_Password,UART_Password)==0){
 2b8:	61 e8       	ldi	r22, 0x81	; 129
 2ba:	73 e0       	ldi	r23, 0x03	; 3
 2bc:	89 e6       	ldi	r24, 0x69	; 105
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 8b 04 	call	0x916	; 0x916 <strcmp>
 2c4:	89 2b       	or	r24, r25
 2c6:	a9 f4       	brne	.+42     	; 0x2f2 <UART_Process+0xb2>
					UART_Send_String_Polling_8("Welcome Back! ");
 2c8:	82 e7       	ldi	r24, 0x72	; 114
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
					UART_Send_String_Polling_8(EEPROM_Username);
 2d0:	81 e6       	ldi	r24, 0x61	; 97
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
					UART_Send_String_Polling_8("\n");
 2d8:	84 ea       	ldi	r24, 0xA4	; 164
 2da:	92 e0       	ldi	r25, 0x02	; 2
 2dc:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
					UART_Show_MainMenu();
 2e0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <UART_Show_MainMenu>
					login_Fail = 0;
 2e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
					global_Flag++;
 2e8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <global_Flag.2384>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <global_Flag.2384>
				}
			// If you Login Fail, Count Failure
				if(login_Fail == 1){
 2f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	09 f0       	breq	.+2      	; 0x2fc <UART_Process+0xbc>
 2fa:	d0 c0       	rjmp	.+416    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
					FailCount++;
 2fc:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <FailCount.2385>
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <FailCount.2385>
					if(FailCount >= Max_Failure_Login_Count){
 306:	83 30       	cpi	r24, 0x03	; 3
 308:	30 f0       	brcs	.+12     	; 0x316 <UART_Process+0xd6>
						UART_Send_String_Polling_8("Login Failed, \nSystem Locked! \n");
 30a:	81 e8       	ldi	r24, 0x81	; 129
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
						BUZZER_ALARM_TILL_RESET();
 312:	0e 94 4f 00 	call	0x9e	; 0x9e <BUZZER_ALARM_TILL_RESET>
					}
					UART_Send_String_Polling_8("Login Failed, Try again! \n");
 316:	81 ea       	ldi	r24, 0xA1	; 161
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
					UART_Send_Byte_Polling_8(FailCount + 48);
 31e:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <FailCount.2385>
 322:	80 5d       	subi	r24, 0xD0	; 208
 324:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Send_Byte_Polling_8>
					UART_Send_String_Polling_8(" \n");
 328:	83 ea       	ldi	r24, 0xA3	; 163
 32a:	92 e0       	ldi	r25, 0x02	; 2
 32c:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
					global_Flag-=2;UART_Flag_Received = 1;
 330:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <global_Flag.2384>
 334:	82 50       	subi	r24, 0x02	; 2
 336:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <global_Flag.2384>
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <UART_Flag_Received>
 340:	08 95       	ret
				}
				break;
			
			case 4:
			// User Logged success, Process choice 1 from MainMenu
				strcpy(UART_Choice_1,Buffer);// Copy Buffer To Choice_1
 342:	62 e9       	ldi	r22, 0x92	; 146
 344:	73 e0       	ldi	r23, 0x03	; 3
 346:	88 e7       	ldi	r24, 0x78	; 120
 348:	93 e0       	ldi	r25, 0x03	; 3
 34a:	0e 94 94 04 	call	0x928	; 0x928 <strcpy>
				UART_Flag_Received = 0;
 34e:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <UART_Flag_Received>
				g_choice_1 = (UART_Choice_1[0]-48);
 352:	e8 e7       	ldi	r30, 0x78	; 120
 354:	f3 e0       	ldi	r31, 0x03	; 3
 356:	80 81       	ld	r24, Z
 358:	80 53       	subi	r24, 0x30	; 48
 35a:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <g_choice_1.2391>
				if( (g_choice_1 > 9 && g_choice_1 < 1) || (UART_Choice_1[1] != 0) ){
 35e:	91 81       	ldd	r25, Z+1	; 0x01
 360:	99 23       	and	r25, r25
 362:	49 f0       	breq	.+18     	; 0x376 <UART_Process+0x136>
					UART_Show_Invalid();
 364:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <UART_Show_Invalid>
					UART_Show_MainMenu();
 368:	0e 94 ff 03 	call	0x7fe	; 0x7fe <UART_Show_MainMenu>
					Clear_Buffer(UART_Choice_1);
 36c:	88 e7       	ldi	r24, 0x78	; 120
 36e:	93 e0       	ldi	r25, 0x03	; 3
 370:	0e 94 15 01 	call	0x22a	; 0x22a <Clear_Buffer>
					break;
 374:	08 95       	ret
				}
				UART_Choice_Handler_1(g_choice_1);
 376:	0e 94 74 04 	call	0x8e8	; 0x8e8 <UART_Choice_Handler_1>
				global_Flag++;
 37a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <global_Flag.2384>
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <global_Flag.2384>
				break;
 384:	08 95       	ret
		case 5:
			// User Logged success, Process choice 1 from MainMenu
			strcpy(UART_Choice_2,Buffer);// Copy Buffer To Choice_2
 386:	62 e9       	ldi	r22, 0x92	; 146
 388:	73 e0       	ldi	r23, 0x03	; 3
 38a:	8f e6       	ldi	r24, 0x6F	; 111
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	0e 94 94 04 	call	0x928	; 0x928 <strcpy>
			UART_Flag_Received = 0;
 392:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <UART_Flag_Received>
			g_choice_2 = (UART_Choice_2[0]-48);
 396:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <UART_Choice_2.2392>
 39a:	90 ed       	ldi	r25, 0xD0	; 208
 39c:	98 0f       	add	r25, r24
			//5,8,9 Invalid as no next step
			
			if(g_choice_1 == 6){// Create New User Handler 
 39e:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <g_choice_1.2391>
 3a2:	86 30       	cpi	r24, 0x06	; 6
 3a4:	49 f4       	brne	.+18     	; 0x3b8 <UART_Process+0x178>
				// Allow Only Admin To Create User!
				if(UART_UserID[0]-48 != 99){
 3a6:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <UART_UserID.2386>
 3aa:	23 39       	cpi	r18, 0x93	; 147
 3ac:	29 f0       	breq	.+10     	; 0x3b8 <UART_Process+0x178>
					UART_Send_String_Polling_8("Auth Denied, Ask Admin! \n");
 3ae:	8c eb       	ldi	r24, 0xBC	; 188
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
					break;//Break from Main Case 5
 3b6:	08 95       	ret
				}
			}
			if(g_choice_1 == 5 || g_choice_1 > 6){
 3b8:	85 30       	cpi	r24, 0x05	; 5
 3ba:	11 f0       	breq	.+4      	; 0x3c0 <UART_Process+0x180>
 3bc:	87 30       	cpi	r24, 0x07	; 7
 3be:	18 f0       	brcs	.+6      	; 0x3c6 <UART_Process+0x186>
				UART_Show_Invalid();break;//Break from Main Case 5
 3c0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <UART_Show_Invalid>
 3c4:	08 95       	ret
			}
			// Handle Invalid Choice Out of range
			if( (g_choice_2 > 9 && g_choice_2 < 0) || (UART_Choice_2[1] != 0) ){
 3c6:	20 91 70 03 	lds	r18, 0x0370	; 0x800370 <UART_Choice_2.2392+0x1>
 3ca:	22 23       	and	r18, r18
 3cc:	59 f0       	breq	.+22     	; 0x3e4 <UART_Process+0x1a4>
				UART_Show_Invalid();
 3ce:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <UART_Show_Invalid>
				UART_Choice_Handler_1(g_choice_1);
 3d2:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <g_choice_1.2391>
 3d6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <UART_Choice_Handler_1>
				Clear_Buffer(UART_Choice_2);
 3da:	8f e6       	ldi	r24, 0x6F	; 111
 3dc:	93 e0       	ldi	r25, 0x03	; 3
 3de:	0e 94 15 01 	call	0x22a	; 0x22a <Clear_Buffer>
				break;
 3e2:	08 95       	ret
			}
			

						
			// LED Controller
			if(g_choice_1 == 1){
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	e9 f5       	brne	.+122    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				if(g_choice_2 > 5){
 3e8:	96 30       	cpi	r25, 0x06	; 6
 3ea:	18 f0       	brcs	.+6      	; 0x3f2 <UART_Process+0x1b2>
					UART_Show_Invalid();break;//Break from Main Case 5
 3ec:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <UART_Show_Invalid>
 3f0:	08 95       	ret
				}
				switch(g_choice_2){
 3f2:	92 30       	cpi	r25, 0x02	; 2
 3f4:	91 f0       	breq	.+36     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f6:	28 f4       	brcc	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f8:	99 23       	and	r25, r25
 3fa:	39 f1       	breq	.+78     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3fc:	91 30       	cpi	r25, 0x01	; 1
 3fe:	39 f0       	breq	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	08 95       	ret
 402:	94 30       	cpi	r25, 0x04	; 4
 404:	b1 f0       	breq	.+44     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 406:	78 f0       	brcs	.+30     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 408:	95 30       	cpi	r25, 0x05	; 5
 40a:	c9 f0       	breq	.+50     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 40c:	08 95       	ret
					case 1: // Toggle Led 0
						DIO_Set_Pin_Output(Led0_Port,Led0_Pin,Toggle);break;
 40e:	42 e0       	ldi	r20, 0x02	; 2
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 418:	08 95       	ret
					case 2: // Toggle Led 1
						DIO_Set_Pin_Output(Led1_Port,Led1_Pin,Toggle);break;
 41a:	42 e0       	ldi	r20, 0x02	; 2
 41c:	67 e0       	ldi	r22, 0x07	; 7
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 424:	08 95       	ret
					case 3: // Toggle Led 2
						DIO_Set_Pin_Output(Led2_Port,Led2_Pin,Toggle);break;
 426:	42 e0       	ldi	r20, 0x02	; 2
 428:	63 e0       	ldi	r22, 0x03	; 3
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 430:	08 95       	ret
					case 4: // Toggle Led 3
						DIO_Set_Pin_Output(Led3_Port,Led3_Pin,Toggle);break;
 432:	42 e0       	ldi	r20, 0x02	; 2
 434:	65 e0       	ldi	r22, 0x05	; 5
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 43c:	08 95       	ret
					case 5: // Toggle Led 4
						DIO_Set_Pin_Output(Led4_Port,Led4_Pin,Toggle);break;
 43e:	42 e0       	ldi	r20, 0x02	; 2
 440:	64 e0       	ldi	r22, 0x04	; 4
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
 448:	08 95       	ret
					case 0: // Go Back
						UART_Send_String_Polling_8("Going Back!\n");
 44a:	86 ed       	ldi	r24, 0xD6	; 214
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
						UART_Show_MainMenu();
 452:	0e 94 ff 03 	call	0x7fe	; 0x7fe <UART_Show_MainMenu>
						global_Flag--;
 456:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <global_Flag.2384>
 45a:	81 50       	subi	r24, 0x01	; 1
 45c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <global_Flag.2384>
					break;
 460:	08 95       	ret
				}
			}
			// Air Conditioner Controller
			else if(g_choice_1 == 2){
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	29 f4       	brne	.+10     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
				if(g_choice_2 > 3){
 466:	94 30       	cpi	r25, 0x04	; 4
 468:	c8 f0       	brcs	.+50     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
					UART_Show_Invalid();break;//Break from Main Case 5
 46a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <UART_Show_Invalid>
 46e:	08 95       	ret
					case 0: // Go Back
					break;
				}
			}
			// Door Controller
			else if(g_choice_1 == 3){
 470:	83 30       	cpi	r24, 0x03	; 3
 472:	71 f4       	brne	.+28     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
				if(UART_UserID[0]-48 != 99){
 474:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <UART_UserID.2386>
 478:	83 39       	cpi	r24, 0x93	; 147
 47a:	29 f0       	breq	.+10     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
					UART_Send_String_Polling_8("Auth Denied, Ask Admin! \n");
 47c:	8c eb       	ldi	r24, 0xBC	; 188
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
					break;//Break from Main Case 5
 484:	08 95       	ret
				}
				else if(g_choice_2 > 2){
 486:	93 30       	cpi	r25, 0x03	; 3
 488:	48 f0       	brcs	.+18     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
					UART_Show_Invalid();break;//Break from Main Case 5
 48a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <UART_Show_Invalid>
 48e:	08 95       	ret
					case 0: // Go Back
					break;
				}
			}
			//Dimmer Controller
			else if(g_choice_1 == 4){
 490:	84 30       	cpi	r24, 0x04	; 4
 492:	21 f4       	brne	.+8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
				if(g_choice_2 > 4){
 494:	95 30       	cpi	r25, 0x05	; 5
 496:	10 f0       	brcs	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
					UART_Show_Invalid();break;//Break from Main Case 5
 498:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <UART_Show_Invalid>
 49c:	08 95       	ret

0000049e <main>:
}


int main(void)
{
	UART_Enable_RX_Interrupt();
 49e:	0e 94 8f 03 	call	0x71e	; 0x71e <UART_Enable_RX_Interrupt>
	Smart_Initialization();
 4a2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Smart_Initialization>
	DIO_Set_Pin_Output(PORTCx,7,High);
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	67 e0       	ldi	r22, 0x07	; 7
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(PORTDx,3,High);
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	63 e0       	ldi	r22, 0x03	; 3
 4b4:	83 e0       	ldi	r24, 0x03	; 3
 4b6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
	DIO_Set_Pin_Output(PORTCx,2,High);
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_Set_Pin_Output>
   
	while (1) 
    {
		UART_Process();
 4c4:	0e 94 20 01 	call	0x240	; 0x240 <UART_Process>
 4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <main+0x26>

000004ca <DIO_Set_Pin_Direction>:
		}else if(Output == Low){
		switch(port){
			case PORTAx:PORTA_Reg=0x00;break;
			case PORTBx:PORTB_Reg=0x00;break;
			case PORTCx:PORTC_Reg=0x00;break;
			case PORTDx:PORTD_Reg=0x00;break;
 4ca:	41 30       	cpi	r20, 0x01	; 1
 4cc:	a1 f5       	brne	.+104    	; 0x536 <DIO_Set_Pin_Direction+0x6c>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	89 f0       	breq	.+34     	; 0x4f4 <DIO_Set_Pin_Direction+0x2a>
 4d2:	28 f0       	brcs	.+10     	; 0x4de <DIO_Set_Pin_Direction+0x14>
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	c9 f0       	breq	.+50     	; 0x50a <DIO_Set_Pin_Direction+0x40>
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	11 f1       	breq	.+68     	; 0x520 <DIO_Set_Pin_Direction+0x56>
 4dc:	08 95       	ret
 4de:	2a b3       	in	r18, 0x1a	; 26
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_Set_Pin_Direction+0x20>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_Set_Pin_Direction+0x1c>
 4ee:	82 2b       	or	r24, r18
 4f0:	8a bb       	out	0x1a, r24	; 26
 4f2:	08 95       	ret
 4f4:	27 b3       	in	r18, 0x17	; 23
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_Set_Pin_Direction+0x36>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_Set_Pin_Direction+0x32>
 504:	82 2b       	or	r24, r18
 506:	87 bb       	out	0x17, r24	; 23
 508:	08 95       	ret
 50a:	24 b3       	in	r18, 0x14	; 20
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_Set_Pin_Direction+0x4c>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	6a 95       	dec	r22
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_Set_Pin_Direction+0x48>
 51a:	82 2b       	or	r24, r18
 51c:	84 bb       	out	0x14, r24	; 20
 51e:	08 95       	ret
 520:	21 b3       	in	r18, 0x11	; 17
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_Set_Pin_Direction+0x62>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_Set_Pin_Direction+0x5e>
 530:	82 2b       	or	r24, r18
 532:	81 bb       	out	0x11, r24	; 17
 534:	08 95       	ret
 536:	41 11       	cpse	r20, r1
 538:	37 c0       	rjmp	.+110    	; 0x5a8 <DIO_Set_Pin_Direction+0xde>
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	91 f0       	breq	.+36     	; 0x562 <DIO_Set_Pin_Direction+0x98>
 53e:	28 f0       	brcs	.+10     	; 0x54a <DIO_Set_Pin_Direction+0x80>
 540:	82 30       	cpi	r24, 0x02	; 2
 542:	d9 f0       	breq	.+54     	; 0x57a <DIO_Set_Pin_Direction+0xb0>
 544:	83 30       	cpi	r24, 0x03	; 3
 546:	29 f1       	breq	.+74     	; 0x592 <DIO_Set_Pin_Direction+0xc8>
 548:	08 95       	ret
 54a:	2a b3       	in	r18, 0x1a	; 26
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_Set_Pin_Direction+0x8c>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_Set_Pin_Direction+0x88>
 55a:	80 95       	com	r24
 55c:	82 23       	and	r24, r18
 55e:	8a bb       	out	0x1a, r24	; 26
 560:	08 95       	ret
 562:	27 b3       	in	r18, 0x17	; 23
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_Set_Pin_Direction+0xa4>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_Set_Pin_Direction+0xa0>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	87 bb       	out	0x17, r24	; 23
 578:	08 95       	ret
 57a:	24 b3       	in	r18, 0x14	; 20
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_Set_Pin_Direction+0xbc>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_Set_Pin_Direction+0xb8>
 58a:	80 95       	com	r24
 58c:	82 23       	and	r24, r18
 58e:	84 bb       	out	0x14, r24	; 20
 590:	08 95       	ret
 592:	21 b3       	in	r18, 0x11	; 17
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_Set_Pin_Direction+0xd4>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_Set_Pin_Direction+0xd0>
 5a2:	80 95       	com	r24
 5a4:	82 23       	and	r24, r18
 5a6:	81 bb       	out	0x11, r24	; 17
 5a8:	08 95       	ret

000005aa <DIO_Set_Pin_Output>:
		}
	}
}

void DIO_Set_Pin_Output(PORT port,PIN pin,DIO_VALUE Output){
	if(Output == High){
 5aa:	41 30       	cpi	r20, 0x01	; 1
 5ac:	a1 f5       	brne	.+104    	; 0x616 <DIO_Set_Pin_Output+0x6c>
		switch(port){
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	89 f0       	breq	.+34     	; 0x5d4 <DIO_Set_Pin_Output+0x2a>
 5b2:	28 f0       	brcs	.+10     	; 0x5be <DIO_Set_Pin_Output+0x14>
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	c9 f0       	breq	.+50     	; 0x5ea <DIO_Set_Pin_Output+0x40>
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	11 f1       	breq	.+68     	; 0x600 <DIO_Set_Pin_Output+0x56>
 5bc:	08 95       	ret
			case PORTAx: Set(PORTA_Reg,pin) ;break;
 5be:	2b b3       	in	r18, 0x1b	; 27
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_Set_Pin_Output+0x20>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_Set_Pin_Output+0x1c>
 5ce:	82 2b       	or	r24, r18
 5d0:	8b bb       	out	0x1b, r24	; 27
 5d2:	08 95       	ret
			case PORTBx: Set(PORTB_Reg,pin) ;break;
 5d4:	28 b3       	in	r18, 0x18	; 24
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_Set_Pin_Output+0x36>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_Set_Pin_Output+0x32>
 5e4:	82 2b       	or	r24, r18
 5e6:	88 bb       	out	0x18, r24	; 24
 5e8:	08 95       	ret
			case PORTCx: Set(PORTC_Reg,pin) ;break;
 5ea:	25 b3       	in	r18, 0x15	; 21
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_Set_Pin_Output+0x4c>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_Set_Pin_Output+0x48>
 5fa:	82 2b       	or	r24, r18
 5fc:	85 bb       	out	0x15, r24	; 21
 5fe:	08 95       	ret
			case PORTDx: Set(PORTD_Reg,pin) ;break;
 600:	22 b3       	in	r18, 0x12	; 18
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_Set_Pin_Output+0x62>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_Set_Pin_Output+0x5e>
 610:	82 2b       	or	r24, r18
 612:	82 bb       	out	0x12, r24	; 18
 614:	08 95       	ret
			default:break;
		}
	}
	else if(Output == Low){
 616:	41 11       	cpse	r20, r1
 618:	38 c0       	rjmp	.+112    	; 0x68a <DIO_Set_Pin_Output+0xe0>
		switch(port){
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	91 f0       	breq	.+36     	; 0x642 <DIO_Set_Pin_Output+0x98>
 61e:	28 f0       	brcs	.+10     	; 0x62a <DIO_Set_Pin_Output+0x80>
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	d9 f0       	breq	.+54     	; 0x65a <DIO_Set_Pin_Output+0xb0>
 624:	83 30       	cpi	r24, 0x03	; 3
 626:	29 f1       	breq	.+74     	; 0x672 <DIO_Set_Pin_Output+0xc8>
 628:	08 95       	ret
			case PORTAx: Clear(PORTA_Reg,pin);break;
 62a:	2b b3       	in	r18, 0x1b	; 27
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_Set_Pin_Output+0x8c>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	6a 95       	dec	r22
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_Set_Pin_Output+0x88>
 63a:	80 95       	com	r24
 63c:	82 23       	and	r24, r18
 63e:	8b bb       	out	0x1b, r24	; 27
 640:	08 95       	ret
			case PORTBx: Clear(PORTB_Reg,pin);break;
 642:	28 b3       	in	r18, 0x18	; 24
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_Set_Pin_Output+0xa4>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_Set_Pin_Output+0xa0>
 652:	80 95       	com	r24
 654:	82 23       	and	r24, r18
 656:	88 bb       	out	0x18, r24	; 24
 658:	08 95       	ret
			case PORTCx: Clear(PORTC_Reg,pin);break;
 65a:	25 b3       	in	r18, 0x15	; 21
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_Set_Pin_Output+0xbc>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_Set_Pin_Output+0xb8>
 66a:	80 95       	com	r24
 66c:	82 23       	and	r24, r18
 66e:	85 bb       	out	0x15, r24	; 21
 670:	08 95       	ret
			case PORTDx: Clear(PORTD_Reg,pin);break;
 672:	22 b3       	in	r18, 0x12	; 18
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_Set_Pin_Output+0xd4>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_Set_Pin_Output+0xd0>
 682:	80 95       	com	r24
 684:	82 23       	and	r24, r18
 686:	82 bb       	out	0x12, r24	; 18
 688:	08 95       	ret
			default:break;
		}
	}
	else if(Output == Toggle){
 68a:	42 30       	cpi	r20, 0x02	; 2
 68c:	99 f5       	brne	.+102    	; 0x6f4 <DIO_Set_Pin_Output+0x14a>
		switch(port){
 68e:	81 30       	cpi	r24, 0x01	; 1
 690:	89 f0       	breq	.+34     	; 0x6b4 <DIO_Set_Pin_Output+0x10a>
 692:	28 f0       	brcs	.+10     	; 0x69e <DIO_Set_Pin_Output+0xf4>
 694:	82 30       	cpi	r24, 0x02	; 2
 696:	c9 f0       	breq	.+50     	; 0x6ca <DIO_Set_Pin_Output+0x120>
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	11 f1       	breq	.+68     	; 0x6e0 <DIO_Set_Pin_Output+0x136>
 69c:	08 95       	ret
			case PORTAx: Toggle(PORTA_Reg,pin);break;
 69e:	2b b3       	in	r18, 0x1b	; 27
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_Set_Pin_Output+0x100>
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	6a 95       	dec	r22
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_Set_Pin_Output+0xfc>
 6ae:	82 27       	eor	r24, r18
 6b0:	8b bb       	out	0x1b, r24	; 27
 6b2:	08 95       	ret
			case PORTBx: Toggle(PORTB_Reg,pin);break;
 6b4:	28 b3       	in	r18, 0x18	; 24
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_Set_Pin_Output+0x116>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	6a 95       	dec	r22
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_Set_Pin_Output+0x112>
 6c4:	82 27       	eor	r24, r18
 6c6:	88 bb       	out	0x18, r24	; 24
 6c8:	08 95       	ret
			case PORTCx: Toggle(PORTC_Reg,pin);break;
 6ca:	25 b3       	in	r18, 0x15	; 21
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_Set_Pin_Output+0x12c>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_Set_Pin_Output+0x128>
 6da:	82 27       	eor	r24, r18
 6dc:	85 bb       	out	0x15, r24	; 21
 6de:	08 95       	ret
			case PORTDx: Toggle(PORTD_Reg,pin);break;
 6e0:	22 b3       	in	r18, 0x12	; 18
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_Set_Pin_Output+0x142>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_Set_Pin_Output+0x13e>
 6f0:	82 27       	eor	r24, r18
 6f2:	82 bb       	out	0x12, r24	; 18
 6f4:	08 95       	ret

000006f6 <GIE_Enable>:
}

void GIE_Enable()
{
	//General Interrupt Enable by Set bit 7 On SREG Register
	Set(SREG_Reg,7);
 6f6:	8f b7       	in	r24, 0x3f	; 63
 6f8:	80 68       	ori	r24, 0x80	; 128
 6fa:	8f bf       	out	0x3f, r24	; 63
 6fc:	08 95       	ret

000006fe <GIE_Disable>:
}

void GIE_Disable()
{
	//General Interrupt Disable by Set bit 7 On SREG Register
	Clear(SREG_Reg,7);
 6fe:	8f b7       	in	r24, 0x3f	; 63
 700:	8f 77       	andi	r24, 0x7F	; 127
 702:	8f bf       	out	0x3f, r24	; 63
 704:	08 95       	ret

00000706 <TWI_Init>:
//Interrupt Flag >> Get(TWCR_Reg,7);
// Write Collision Flag Get(TWCR_Reg,3);

void TWI_Init(){
	// Setup Bit Rate 0 ~ 255
	TWBR_Reg = 10;
 706:	8a e0       	ldi	r24, 0x0A	; 10
 708:	80 b9       	out	0x00, r24	; 0
	//#if (TWI_Prescaler == Pre_1)
	//Clear(TWSR_Reg,0);Clear(TWSR_Reg,1);
	//#elif (TWI_Prescaler == Pre_4)
	//Clear(TWSR_Reg,0);Set(TWSR_Reg,1);
	//#elif (TWI_Prescaler == Pre_16)
	Set(TWSR_Reg,0);Clear(TWSR_Reg,1);
 70a:	81 b1       	in	r24, 0x01	; 1
 70c:	81 60       	ori	r24, 0x01	; 1
 70e:	81 b9       	out	0x01, r24	; 1
 710:	81 b1       	in	r24, 0x01	; 1
 712:	8d 7f       	andi	r24, 0xFD	; 253
 714:	81 b9       	out	0x01, r24	; 1
	//#elif (TWI_Prescaler == Pre_64)
	//Set(TWSR_Reg,0);Set(TWSR_Reg,1);
	//#endif
	//Enable TWI
	Set(TWCR_Reg,2);
 716:	86 b7       	in	r24, 0x36	; 54
 718:	84 60       	ori	r24, 0x04	; 4
 71a:	86 bf       	out	0x36, r24	; 54
 71c:	08 95       	ret

0000071e <UART_Enable_RX_Interrupt>:
// 			UART_Send_String_Polling_8(" Username: ");
// 			UART_Send_String_Polling_8(Username);
// 			UART_Send_String_Polling_8("/n");
// 		}
	}
}
 71e:	8a b1       	in	r24, 0x0a	; 10
 720:	80 68       	ori	r24, 0x80	; 128
 722:	8a b9       	out	0x0a, r24	; 10
 724:	08 95       	ret

00000726 <UART_Init>:
 726:	8a b1       	in	r24, 0x0a	; 10
 728:	8b 7f       	andi	r24, 0xFB	; 251
 72a:	8a b9       	out	0x0a, r24	; 10
 72c:	80 b5       	in	r24, 0x20	; 32
 72e:	84 60       	ori	r24, 0x04	; 4
 730:	80 bd       	out	0x20, r24	; 32
 732:	80 b5       	in	r24, 0x20	; 32
 734:	82 60       	ori	r24, 0x02	; 2
 736:	80 bd       	out	0x20, r24	; 32
 738:	80 b5       	in	r24, 0x20	; 32
 73a:	8f 7b       	andi	r24, 0xBF	; 191
 73c:	80 bd       	out	0x20, r24	; 32
 73e:	80 b5       	in	r24, 0x20	; 32
 740:	80 68       	ori	r24, 0x80	; 128
 742:	80 bd       	out	0x20, r24	; 32
 744:	80 b5       	in	r24, 0x20	; 32
 746:	8f 7d       	andi	r24, 0xDF	; 223
 748:	80 bd       	out	0x20, r24	; 32
 74a:	80 b5       	in	r24, 0x20	; 32
 74c:	8f 7e       	andi	r24, 0xEF	; 239
 74e:	80 bd       	out	0x20, r24	; 32
 750:	80 b5       	in	r24, 0x20	; 32
 752:	87 7f       	andi	r24, 0xF7	; 247
 754:	80 bd       	out	0x20, r24	; 32
 756:	10 bc       	out	0x20, r1	; 32
 758:	87 e6       	ldi	r24, 0x67	; 103
 75a:	89 b9       	out	0x09, r24	; 9
 75c:	8a b1       	in	r24, 0x0a	; 10
 75e:	80 61       	ori	r24, 0x10	; 16
 760:	8a b9       	out	0x0a, r24	; 10
 762:	8a b1       	in	r24, 0x0a	; 10
 764:	88 60       	ori	r24, 0x08	; 8
 766:	8a b9       	out	0x0a, r24	; 10
 768:	8a b1       	in	r24, 0x0a	; 10
 76a:	80 68       	ori	r24, 0x80	; 128
 76c:	8a b9       	out	0x0a, r24	; 10
 76e:	08 95       	ret

00000770 <UART_Send_Byte_Polling_8>:
 770:	5d 9b       	sbis	0x0b, 5	; 11
 772:	fe cf       	rjmp	.-4      	; 0x770 <UART_Send_Byte_Polling_8>
 774:	8c b9       	out	0x0c, r24	; 12
 776:	08 95       	ret

00000778 <UART_Send_String_Polling_8>:
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	8c 01       	movw	r16, r24
 780:	c0 e0       	ldi	r28, 0x00	; 0
 782:	03 c0       	rjmp	.+6      	; 0x78a <UART_Send_String_Polling_8+0x12>
 784:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Send_Byte_Polling_8>
 788:	cf 5f       	subi	r28, 0xFF	; 255
 78a:	f8 01       	movw	r30, r16
 78c:	ec 0f       	add	r30, r28
 78e:	f1 1d       	adc	r31, r1
 790:	80 81       	ld	r24, Z
 792:	81 11       	cpse	r24, r1
 794:	f7 cf       	rjmp	.-18     	; 0x784 <UART_Send_String_Polling_8+0xc>
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	08 95       	ret

0000079e <UART_Receive_Byte_8>:
 79e:	5f 9b       	sbis	0x0b, 7	; 11
 7a0:	fe cf       	rjmp	.-4      	; 0x79e <UART_Receive_Byte_8>
 7a2:	8c b1       	in	r24, 0x0c	; 12
 7a4:	08 95       	ret

000007a6 <UART_Recieve_String_8>:
 7a6:	ef 92       	push	r14
 7a8:	ff 92       	push	r15
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	7c 01       	movw	r14, r24
 7b2:	10 e0       	ldi	r17, 0x00	; 0
 7b4:	e7 01       	movw	r28, r14
 7b6:	c1 0f       	add	r28, r17
 7b8:	d1 1d       	adc	r29, r1
 7ba:	0e 94 cf 03 	call	0x79e	; 0x79e <UART_Receive_Byte_8>
 7be:	88 83       	st	Y, r24
 7c0:	8d 30       	cpi	r24, 0x0D	; 13
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <UART_Recieve_String_8+0x20>
 7c4:	18 82       	st	Y, r1
 7c6:	88 81       	ld	r24, Y
 7c8:	8a 30       	cpi	r24, 0x0A	; 10
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <UART_Recieve_String_8+0x2a>
 7cc:	18 82       	st	Y, r1
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <UART_Recieve_String_8+0x2e>
 7d0:	1f 5f       	subi	r17, 0xFF	; 255
 7d2:	f0 cf       	rjmp	.-32     	; 0x7b4 <UART_Recieve_String_8+0xe>
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	ff 90       	pop	r15
 7dc:	ef 90       	pop	r14
 7de:	08 95       	ret

000007e0 <UART_Show_Request_UserID>:
 7e0:	87 ee       	ldi	r24, 0xE7	; 231
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 7e8:	08 95       	ret

000007ea <UART_Show_Request_Password>:
 7ea:	8d ef       	ldi	r24, 0xFD	; 253
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 7f2:	08 95       	ret

000007f4 <UART_Show_Invalid>:
 7f4:	85 e1       	ldi	r24, 0x15	; 21
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 7fc:	08 95       	ret

000007fe <UART_Show_MainMenu>:
 7fe:	86 e3       	ldi	r24, 0x36	; 54
 800:	91 e0       	ldi	r25, 0x01	; 1
 802:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 806:	87 e4       	ldi	r24, 0x47	; 71
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 80e:	8a e5       	ldi	r24, 0x5A	; 90
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 816:	8b e6       	ldi	r24, 0x6B	; 107
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 81e:	8e e7       	ldi	r24, 0x7E	; 126
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 826:	83 e9       	ldi	r24, 0x93	; 147
 828:	91 e0       	ldi	r25, 0x01	; 1
 82a:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 82e:	89 ea       	ldi	r24, 0xA9	; 169
 830:	91 e0       	ldi	r25, 0x01	; 1
 832:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 836:	8f eb       	ldi	r24, 0xBF	; 191
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 83e:	81 ed       	ldi	r24, 0xD1	; 209
 840:	91 e0       	ldi	r25, 0x01	; 1
 842:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 846:	88 ee       	ldi	r24, 0xE8	; 232
 848:	91 e0       	ldi	r25, 0x01	; 1
 84a:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 84e:	08 95       	ret

00000850 <UART_Show_Control_Leds>:
 850:	8c ef       	ldi	r24, 0xFC	; 252
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 858:	8f e0       	ldi	r24, 0x0F	; 15
 85a:	92 e0       	ldi	r25, 0x02	; 2
 85c:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 860:	82 e2       	ldi	r24, 0x22	; 34
 862:	92 e0       	ldi	r25, 0x02	; 2
 864:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 868:	85 e3       	ldi	r24, 0x35	; 53
 86a:	92 e0       	ldi	r25, 0x02	; 2
 86c:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 870:	88 e4       	ldi	r24, 0x48	; 72
 872:	92 e0       	ldi	r25, 0x02	; 2
 874:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 878:	8b e5       	ldi	r24, 0x5B	; 91
 87a:	92 e0       	ldi	r25, 0x02	; 2
 87c:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 880:	08 95       	ret

00000882 <UART_Show_Control_AC>:
 882:	86 e6       	ldi	r24, 0x66	; 102
 884:	92 e0       	ldi	r25, 0x02	; 2
 886:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 88a:	84 e7       	ldi	r24, 0x74	; 116
 88c:	92 e0       	ldi	r25, 0x02	; 2
 88e:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 892:	8d e8       	ldi	r24, 0x8D	; 141
 894:	92 e0       	ldi	r25, 0x02	; 2
 896:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 89a:	8b e5       	ldi	r24, 0x5B	; 91
 89c:	92 e0       	ldi	r25, 0x02	; 2
 89e:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8a2:	08 95       	ret

000008a4 <UART_Show_Control_Door>:
 8a4:	86 ea       	ldi	r24, 0xA6	; 166
 8a6:	92 e0       	ldi	r25, 0x02	; 2
 8a8:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8ac:	8b eb       	ldi	r24, 0xBB	; 187
 8ae:	92 e0       	ldi	r25, 0x02	; 2
 8b0:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8b4:	8b e5       	ldi	r24, 0x5B	; 91
 8b6:	92 e0       	ldi	r25, 0x02	; 2
 8b8:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8bc:	08 95       	ret

000008be <UART_Show_Control_Dimmer>:
 8be:	81 ed       	ldi	r24, 0xD1	; 209
 8c0:	92 e0       	ldi	r25, 0x02	; 2
 8c2:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8c6:	81 ee       	ldi	r24, 0xE1	; 225
 8c8:	92 e0       	ldi	r25, 0x02	; 2
 8ca:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8ce:	83 ef       	ldi	r24, 0xF3	; 243
 8d0:	92 e0       	ldi	r25, 0x02	; 2
 8d2:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8d6:	84 e0       	ldi	r24, 0x04	; 4
 8d8:	93 e0       	ldi	r25, 0x03	; 3
 8da:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8de:	8b e5       	ldi	r24, 0x5B	; 91
 8e0:	92 e0       	ldi	r25, 0x02	; 2
 8e2:	0e 94 bc 03 	call	0x778	; 0x778 <UART_Send_String_Polling_8>
 8e6:	08 95       	ret

000008e8 <UART_Choice_Handler_1>:

void UART_Choice_Handler_1(uint8 g_choice_1){
	switch(g_choice_1){
 8e8:	82 30       	cpi	r24, 0x02	; 2
 8ea:	61 f0       	breq	.+24     	; 0x904 <UART_Choice_Handler_1+0x1c>
 8ec:	18 f4       	brcc	.+6      	; 0x8f4 <UART_Choice_Handler_1+0xc>
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	31 f0       	breq	.+12     	; 0x8fe <UART_Choice_Handler_1+0x16>
 8f2:	08 95       	ret
 8f4:	83 30       	cpi	r24, 0x03	; 3
 8f6:	49 f0       	breq	.+18     	; 0x90a <UART_Choice_Handler_1+0x22>
 8f8:	84 30       	cpi	r24, 0x04	; 4
 8fa:	51 f0       	breq	.+20     	; 0x910 <UART_Choice_Handler_1+0x28>
 8fc:	08 95       	ret
		case 1:UART_Show_Control_Leds();break;
 8fe:	0e 94 28 04 	call	0x850	; 0x850 <UART_Show_Control_Leds>
 902:	08 95       	ret
		case 2:UART_Show_Control_AC();	break;
 904:	0e 94 41 04 	call	0x882	; 0x882 <UART_Show_Control_AC>
 908:	08 95       	ret
		case 3:UART_Show_Control_Door();break;
 90a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <UART_Show_Control_Door>
 90e:	08 95       	ret
		case 4:UART_Show_Control_Dimmer();break;
 910:	0e 94 5f 04 	call	0x8be	; 0x8be <UART_Show_Control_Dimmer>
 914:	08 95       	ret

00000916 <strcmp>:
 916:	fb 01       	movw	r30, r22
 918:	dc 01       	movw	r26, r24
 91a:	8d 91       	ld	r24, X+
 91c:	01 90       	ld	r0, Z+
 91e:	80 19       	sub	r24, r0
 920:	01 10       	cpse	r0, r1
 922:	d9 f3       	breq	.-10     	; 0x91a <strcmp+0x4>
 924:	99 0b       	sbc	r25, r25
 926:	08 95       	ret

00000928 <strcpy>:
 928:	fb 01       	movw	r30, r22
 92a:	dc 01       	movw	r26, r24
 92c:	01 90       	ld	r0, Z+
 92e:	0d 92       	st	X+, r0
 930:	00 20       	and	r0, r0
 932:	e1 f7       	brne	.-8      	; 0x92c <strcpy+0x4>
 934:	08 95       	ret

00000936 <_exit>:
 936:	f8 94       	cli

00000938 <__stop_program>:
 938:	ff cf       	rjmp	.-2      	; 0x938 <__stop_program>
